/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/arquivos/js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/lazysizes/lazysizes.js":
/*!*********************************************!*\
  !*** ./node_modules/lazysizes/lazysizes.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function(window, factory) {
	var lazySizes = factory(window, window.document, Date);
	window.lazySizes = lazySizes;
	if( true && module.exports){
		module.exports = lazySizes;
	}
}(typeof window != 'undefined' ?
      window : {}, function l(window, document, Date) { // Pass in the windoe Date function also for SSR because the Date class can be lost
	'use strict';
	/*jshint eqnull:true */

	var lazysizes, lazySizesCfg;

	(function(){
		var prop;

		var lazySizesDefaults = {
			lazyClass: 'lazyload',
			loadedClass: 'lazyloaded',
			loadingClass: 'lazyloading',
			preloadClass: 'lazypreload',
			errorClass: 'lazyerror',
			//strictClass: 'lazystrict',
			autosizesClass: 'lazyautosizes',
			srcAttr: 'data-src',
			srcsetAttr: 'data-srcset',
			sizesAttr: 'data-sizes',
			//preloadAfterLoad: false,
			minSize: 40,
			customMedia: {},
			init: true,
			expFactor: 1.5,
			hFac: 0.8,
			loadMode: 2,
			loadHidden: true,
			ricTimeout: 0,
			throttleDelay: 125,
		};

		lazySizesCfg = window.lazySizesConfig || window.lazysizesConfig || {};

		for(prop in lazySizesDefaults){
			if(!(prop in lazySizesCfg)){
				lazySizesCfg[prop] = lazySizesDefaults[prop];
			}
		}
	})();

	if (!document || !document.getElementsByClassName) {
		return {
			init: function () {},
			cfg: lazySizesCfg,
			noSupport: true,
		};
	}

	var docElem = document.documentElement;

	var supportPicture = window.HTMLPictureElement;

	var _addEventListener = 'addEventListener';

	var _getAttribute = 'getAttribute';

	/**
	 * Update to bind to window because 'this' becomes null during SSR
	 * builds.
	 */
	var addEventListener = window[_addEventListener].bind(window);

	var setTimeout = window.setTimeout;

	var requestAnimationFrame = window.requestAnimationFrame || setTimeout;

	var requestIdleCallback = window.requestIdleCallback;

	var regPicture = /^picture$/i;

	var loadEvents = ['load', 'error', 'lazyincluded', '_lazyloaded'];

	var regClassCache = {};

	var forEach = Array.prototype.forEach;

	var hasClass = function(ele, cls) {
		if(!regClassCache[cls]){
			regClassCache[cls] = new RegExp('(\\s|^)'+cls+'(\\s|$)');
		}
		return regClassCache[cls].test(ele[_getAttribute]('class') || '') && regClassCache[cls];
	};

	var addClass = function(ele, cls) {
		if (!hasClass(ele, cls)){
			ele.setAttribute('class', (ele[_getAttribute]('class') || '').trim() + ' ' + cls);
		}
	};

	var removeClass = function(ele, cls) {
		var reg;
		if ((reg = hasClass(ele,cls))) {
			ele.setAttribute('class', (ele[_getAttribute]('class') || '').replace(reg, ' '));
		}
	};

	var addRemoveLoadEvents = function(dom, fn, add){
		var action = add ? _addEventListener : 'removeEventListener';
		if(add){
			addRemoveLoadEvents(dom, fn);
		}
		loadEvents.forEach(function(evt){
			dom[action](evt, fn);
		});
	};

	var triggerEvent = function(elem, name, detail, noBubbles, noCancelable){
		var event = document.createEvent('Event');

		if(!detail){
			detail = {};
		}

		detail.instance = lazysizes;

		event.initEvent(name, !noBubbles, !noCancelable);

		event.detail = detail;

		elem.dispatchEvent(event);
		return event;
	};

	var updatePolyfill = function (el, full){
		var polyfill;
		if( !supportPicture && ( polyfill = (window.picturefill || lazySizesCfg.pf) ) ){
			if(full && full.src && !el[_getAttribute]('srcset')){
				el.setAttribute('srcset', full.src);
			}
			polyfill({reevaluate: true, elements: [el]});
		} else if(full && full.src){
			el.src = full.src;
		}
	};

	var getCSS = function (elem, style){
		return (getComputedStyle(elem, null) || {})[style];
	};

	var getWidth = function(elem, parent, width){
		width = width || elem.offsetWidth;

		while(width < lazySizesCfg.minSize && parent && !elem._lazysizesWidth){
			width =  parent.offsetWidth;
			parent = parent.parentNode;
		}

		return width;
	};

	var rAF = (function(){
		var running, waiting;
		var firstFns = [];
		var secondFns = [];
		var fns = firstFns;

		var run = function(){
			var runFns = fns;

			fns = firstFns.length ? secondFns : firstFns;

			running = true;
			waiting = false;

			while(runFns.length){
				runFns.shift()();
			}

			running = false;
		};

		var rafBatch = function(fn, queue){
			if(running && !queue){
				fn.apply(this, arguments);
			} else {
				fns.push(fn);

				if(!waiting){
					waiting = true;
					(document.hidden ? setTimeout : requestAnimationFrame)(run);
				}
			}
		};

		rafBatch._lsFlush = run;

		return rafBatch;
	})();

	var rAFIt = function(fn, simple){
		return simple ?
			function() {
				rAF(fn);
			} :
			function(){
				var that = this;
				var args = arguments;
				rAF(function(){
					fn.apply(that, args);
				});
			}
		;
	};

	var throttle = function(fn){
		var running;
		var lastTime = 0;
		var gDelay = lazySizesCfg.throttleDelay;
		var rICTimeout = lazySizesCfg.ricTimeout;
		var run = function(){
			running = false;
			lastTime = Date.now();
			fn();
		};
		var idleCallback = requestIdleCallback && rICTimeout > 49 ?
			function(){
				requestIdleCallback(run, {timeout: rICTimeout});

				if(rICTimeout !== lazySizesCfg.ricTimeout){
					rICTimeout = lazySizesCfg.ricTimeout;
				}
			} :
			rAFIt(function(){
				setTimeout(run);
			}, true)
		;

		return function(isPriority){
			var delay;

			if((isPriority = isPriority === true)){
				rICTimeout = 33;
			}

			if(running){
				return;
			}

			running =  true;

			delay = gDelay - (Date.now() - lastTime);

			if(delay < 0){
				delay = 0;
			}

			if(isPriority || delay < 9){
				idleCallback();
			} else {
				setTimeout(idleCallback, delay);
			}
		};
	};

	//based on http://modernjavascript.blogspot.de/2013/08/building-better-debounce.html
	var debounce = function(func) {
		var timeout, timestamp;
		var wait = 99;
		var run = function(){
			timeout = null;
			func();
		};
		var later = function() {
			var last = Date.now() - timestamp;

			if (last < wait) {
				setTimeout(later, wait - last);
			} else {
				(requestIdleCallback || run)(run);
			}
		};

		return function() {
			timestamp = Date.now();

			if (!timeout) {
				timeout = setTimeout(later, wait);
			}
		};
	};

	var loader = (function(){
		var preloadElems, isCompleted, resetPreloadingTimer, loadMode, started;

		var eLvW, elvH, eLtop, eLleft, eLright, eLbottom, isBodyHidden;

		var regImg = /^img$/i;
		var regIframe = /^iframe$/i;

		var supportScroll = ('onscroll' in window) && !(/(gle|ing)bot/.test(navigator.userAgent));

		var shrinkExpand = 0;
		var currentExpand = 0;

		var isLoading = 0;
		var lowRuns = -1;

		var resetPreloading = function(e){
			isLoading--;
			if(!e || isLoading < 0 || !e.target){
				isLoading = 0;
			}
		};

		var isVisible = function (elem) {
			if (isBodyHidden == null) {
				isBodyHidden = getCSS(document.body, 'visibility') == 'hidden';
			}

			return isBodyHidden || !(getCSS(elem.parentNode, 'visibility') == 'hidden' && getCSS(elem, 'visibility') == 'hidden');
		};

		var isNestedVisible = function(elem, elemExpand){
			var outerRect;
			var parent = elem;
			var visible = isVisible(elem);

			eLtop -= elemExpand;
			eLbottom += elemExpand;
			eLleft -= elemExpand;
			eLright += elemExpand;

			while(visible && (parent = parent.offsetParent) && parent != document.body && parent != docElem){
				visible = ((getCSS(parent, 'opacity') || 1) > 0);

				if(visible && getCSS(parent, 'overflow') != 'visible'){
					outerRect = parent.getBoundingClientRect();
					visible = eLright > outerRect.left &&
						eLleft < outerRect.right &&
						eLbottom > outerRect.top - 1 &&
						eLtop < outerRect.bottom + 1
					;
				}
			}

			return visible;
		};

		var checkElements = function() {
			var eLlen, i, rect, autoLoadElem, loadedSomething, elemExpand, elemNegativeExpand, elemExpandVal,
				beforeExpandVal, defaultExpand, preloadExpand, hFac;
			var lazyloadElems = lazysizes.elements;

			if((loadMode = lazySizesCfg.loadMode) && isLoading < 8 && (eLlen = lazyloadElems.length)){

				i = 0;

				lowRuns++;

				for(; i < eLlen; i++){

					if(!lazyloadElems[i] || lazyloadElems[i]._lazyRace){continue;}

					if(!supportScroll || (lazysizes.prematureUnveil && lazysizes.prematureUnveil(lazyloadElems[i]))){unveilElement(lazyloadElems[i]);continue;}

					if(!(elemExpandVal = lazyloadElems[i][_getAttribute]('data-expand')) || !(elemExpand = elemExpandVal * 1)){
						elemExpand = currentExpand;
					}

					if (!defaultExpand) {
						defaultExpand = (!lazySizesCfg.expand || lazySizesCfg.expand < 1) ?
							docElem.clientHeight > 500 && docElem.clientWidth > 500 ? 500 : 370 :
							lazySizesCfg.expand;

						lazysizes._defEx = defaultExpand;

						preloadExpand = defaultExpand * lazySizesCfg.expFactor;
						hFac = lazySizesCfg.hFac;
						isBodyHidden = null;

						if(currentExpand < preloadExpand && isLoading < 1 && lowRuns > 2 && loadMode > 2 && !document.hidden){
							currentExpand = preloadExpand;
							lowRuns = 0;
						} else if(loadMode > 1 && lowRuns > 1 && isLoading < 6){
							currentExpand = defaultExpand;
						} else {
							currentExpand = shrinkExpand;
						}
					}

					if(beforeExpandVal !== elemExpand){
						eLvW = innerWidth + (elemExpand * hFac);
						elvH = innerHeight + elemExpand;
						elemNegativeExpand = elemExpand * -1;
						beforeExpandVal = elemExpand;
					}

					rect = lazyloadElems[i].getBoundingClientRect();

					if ((eLbottom = rect.bottom) >= elemNegativeExpand &&
						(eLtop = rect.top) <= elvH &&
						(eLright = rect.right) >= elemNegativeExpand * hFac &&
						(eLleft = rect.left) <= eLvW &&
						(eLbottom || eLright || eLleft || eLtop) &&
						(lazySizesCfg.loadHidden || isVisible(lazyloadElems[i])) &&
						((isCompleted && isLoading < 3 && !elemExpandVal && (loadMode < 3 || lowRuns < 4)) || isNestedVisible(lazyloadElems[i], elemExpand))){
						unveilElement(lazyloadElems[i]);
						loadedSomething = true;
						if(isLoading > 9){break;}
					} else if(!loadedSomething && isCompleted && !autoLoadElem &&
						isLoading < 4 && lowRuns < 4 && loadMode > 2 &&
						(preloadElems[0] || lazySizesCfg.preloadAfterLoad) &&
						(preloadElems[0] || (!elemExpandVal && ((eLbottom || eLright || eLleft || eLtop) || lazyloadElems[i][_getAttribute](lazySizesCfg.sizesAttr) != 'auto')))){
						autoLoadElem = preloadElems[0] || lazyloadElems[i];
					}
				}

				if(autoLoadElem && !loadedSomething){
					unveilElement(autoLoadElem);
				}
			}
		};

		var throttledCheckElements = throttle(checkElements);

		var switchLoadingClass = function(e){
			var elem = e.target;

			if (elem._lazyCache) {
				delete elem._lazyCache;
				return;
			}

			resetPreloading(e);
			addClass(elem, lazySizesCfg.loadedClass);
			removeClass(elem, lazySizesCfg.loadingClass);
			addRemoveLoadEvents(elem, rafSwitchLoadingClass);
			triggerEvent(elem, 'lazyloaded');
		};
		var rafedSwitchLoadingClass = rAFIt(switchLoadingClass);
		var rafSwitchLoadingClass = function(e){
			rafedSwitchLoadingClass({target: e.target});
		};

		var changeIframeSrc = function(elem, src){
			try {
				elem.contentWindow.location.replace(src);
			} catch(e){
				elem.src = src;
			}
		};

		var handleSources = function(source){
			var customMedia;

			var sourceSrcset = source[_getAttribute](lazySizesCfg.srcsetAttr);

			if( (customMedia = lazySizesCfg.customMedia[source[_getAttribute]('data-media') || source[_getAttribute]('media')]) ){
				source.setAttribute('media', customMedia);
			}

			if(sourceSrcset){
				source.setAttribute('srcset', sourceSrcset);
			}
		};

		var lazyUnveil = rAFIt(function (elem, detail, isAuto, sizes, isImg){
			var src, srcset, parent, isPicture, event, firesLoad;

			if(!(event = triggerEvent(elem, 'lazybeforeunveil', detail)).defaultPrevented){

				if(sizes){
					if(isAuto){
						addClass(elem, lazySizesCfg.autosizesClass);
					} else {
						elem.setAttribute('sizes', sizes);
					}
				}

				srcset = elem[_getAttribute](lazySizesCfg.srcsetAttr);
				src = elem[_getAttribute](lazySizesCfg.srcAttr);

				if(isImg) {
					parent = elem.parentNode;
					isPicture = parent && regPicture.test(parent.nodeName || '');
				}

				firesLoad = detail.firesLoad || (('src' in elem) && (srcset || src || isPicture));

				event = {target: elem};

				addClass(elem, lazySizesCfg.loadingClass);

				if(firesLoad){
					clearTimeout(resetPreloadingTimer);
					resetPreloadingTimer = setTimeout(resetPreloading, 2500);
					addRemoveLoadEvents(elem, rafSwitchLoadingClass, true);
				}

				if(isPicture){
					forEach.call(parent.getElementsByTagName('source'), handleSources);
				}

				if(srcset){
					elem.setAttribute('srcset', srcset);
				} else if(src && !isPicture){
					if(regIframe.test(elem.nodeName)){
						changeIframeSrc(elem, src);
					} else {
						elem.src = src;
					}
				}

				if(isImg && (srcset || isPicture)){
					updatePolyfill(elem, {src: src});
				}
			}

			if(elem._lazyRace){
				delete elem._lazyRace;
			}
			removeClass(elem, lazySizesCfg.lazyClass);

			rAF(function(){
				// Part of this can be removed as soon as this fix is older: https://bugs.chromium.org/p/chromium/issues/detail?id=7731 (2015)
				var isLoaded = elem.complete && elem.naturalWidth > 1;

				if( !firesLoad || isLoaded){
					if (isLoaded) {
						addClass(elem, 'ls-is-cached');
					}
					switchLoadingClass(event);
					elem._lazyCache = true;
					setTimeout(function(){
						if ('_lazyCache' in elem) {
							delete elem._lazyCache;
						}
					}, 9);
				}
				if (elem.loading == 'lazy') {
					isLoading--;
				}
			}, true);
		});

		var unveilElement = function (elem){
			if (elem._lazyRace) {return;}
			var detail;

			var isImg = regImg.test(elem.nodeName);

			//allow using sizes="auto", but don't use. it's invalid. Use data-sizes="auto" or a valid value for sizes instead (i.e.: sizes="80vw")
			var sizes = isImg && (elem[_getAttribute](lazySizesCfg.sizesAttr) || elem[_getAttribute]('sizes'));
			var isAuto = sizes == 'auto';

			if( (isAuto || !isCompleted) && isImg && (elem[_getAttribute]('src') || elem.srcset) && !elem.complete && !hasClass(elem, lazySizesCfg.errorClass) && hasClass(elem, lazySizesCfg.lazyClass)){return;}

			detail = triggerEvent(elem, 'lazyunveilread').detail;

			if(isAuto){
				 autoSizer.updateElem(elem, true, elem.offsetWidth);
			}

			elem._lazyRace = true;
			isLoading++;

			lazyUnveil(elem, detail, isAuto, sizes, isImg);
		};

		var afterScroll = debounce(function(){
			lazySizesCfg.loadMode = 3;
			throttledCheckElements();
		});

		var altLoadmodeScrollListner = function(){
			if(lazySizesCfg.loadMode == 3){
				lazySizesCfg.loadMode = 2;
			}
			afterScroll();
		};

		var onload = function(){
			if(isCompleted){return;}
			if(Date.now() - started < 999){
				setTimeout(onload, 999);
				return;
			}


			isCompleted = true;

			lazySizesCfg.loadMode = 3;

			throttledCheckElements();

			addEventListener('scroll', altLoadmodeScrollListner, true);
		};

		return {
			_: function(){
				started = Date.now();

				lazysizes.elements = document.getElementsByClassName(lazySizesCfg.lazyClass);
				preloadElems = document.getElementsByClassName(lazySizesCfg.lazyClass + ' ' + lazySizesCfg.preloadClass);

				addEventListener('scroll', throttledCheckElements, true);

				addEventListener('resize', throttledCheckElements, true);

				addEventListener('pageshow', function (e) {
					if (e.persisted) {
						var loadingElements = document.querySelectorAll('.' + lazySizesCfg.loadingClass);

						if (loadingElements.length && loadingElements.forEach) {
							requestAnimationFrame(function () {
								loadingElements.forEach( function (img) {
									if (img.complete) {
										unveilElement(img);
									}
								});
							});
						}
					}
				});

				if(window.MutationObserver){
					new MutationObserver( throttledCheckElements ).observe( docElem, {childList: true, subtree: true, attributes: true} );
				} else {
					docElem[_addEventListener]('DOMNodeInserted', throttledCheckElements, true);
					docElem[_addEventListener]('DOMAttrModified', throttledCheckElements, true);
					setInterval(throttledCheckElements, 999);
				}

				addEventListener('hashchange', throttledCheckElements, true);

				//, 'fullscreenchange'
				['focus', 'mouseover', 'click', 'load', 'transitionend', 'animationend'].forEach(function(name){
					document[_addEventListener](name, throttledCheckElements, true);
				});

				if((/d$|^c/.test(document.readyState))){
					onload();
				} else {
					addEventListener('load', onload);
					document[_addEventListener]('DOMContentLoaded', throttledCheckElements);
					setTimeout(onload, 20000);
				}

				if(lazysizes.elements.length){
					checkElements();
					rAF._lsFlush();
				} else {
					throttledCheckElements();
				}
			},
			checkElems: throttledCheckElements,
			unveil: unveilElement,
			_aLSL: altLoadmodeScrollListner,
		};
	})();


	var autoSizer = (function(){
		var autosizesElems;

		var sizeElement = rAFIt(function(elem, parent, event, width){
			var sources, i, len;
			elem._lazysizesWidth = width;
			width += 'px';

			elem.setAttribute('sizes', width);

			if(regPicture.test(parent.nodeName || '')){
				sources = parent.getElementsByTagName('source');
				for(i = 0, len = sources.length; i < len; i++){
					sources[i].setAttribute('sizes', width);
				}
			}

			if(!event.detail.dataAttr){
				updatePolyfill(elem, event.detail);
			}
		});
		var getSizeElement = function (elem, dataAttr, width){
			var event;
			var parent = elem.parentNode;

			if(parent){
				width = getWidth(elem, parent, width);
				event = triggerEvent(elem, 'lazybeforesizes', {width: width, dataAttr: !!dataAttr});

				if(!event.defaultPrevented){
					width = event.detail.width;

					if(width && width !== elem._lazysizesWidth){
						sizeElement(elem, parent, event, width);
					}
				}
			}
		};

		var updateElementsSizes = function(){
			var i;
			var len = autosizesElems.length;
			if(len){
				i = 0;

				for(; i < len; i++){
					getSizeElement(autosizesElems[i]);
				}
			}
		};

		var debouncedUpdateElementsSizes = debounce(updateElementsSizes);

		return {
			_: function(){
				autosizesElems = document.getElementsByClassName(lazySizesCfg.autosizesClass);
				addEventListener('resize', debouncedUpdateElementsSizes);
			},
			checkElems: debouncedUpdateElementsSizes,
			updateElem: getSizeElement
		};
	})();

	var init = function(){
		if(!init.i && document.getElementsByClassName){
			init.i = true;
			autoSizer._();
			loader._();
		}
	};

	setTimeout(function(){
		if(lazySizesCfg.init){
			init();
		}
	});

	lazysizes = {
		cfg: lazySizesCfg,
		autoSizer: autoSizer,
		loader: loader,
		init: init,
		uP: updatePolyfill,
		aC: addClass,
		rC: removeClass,
		hC: hasClass,
		fire: triggerEvent,
		gW: getWidth,
		rAF: rAF,
	};

	return lazysizes;
}
));


/***/ }),

/***/ "./node_modules/lazysizes/plugins/noscript/ls.noscript.js":
/*!****************************************************************!*\
  !*** ./node_modules/lazysizes/plugins/noscript/ls.noscript.js ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

(function(window, factory) {
	var globalInstall = function(){
		factory(window.lazySizes);
		window.removeEventListener('lazyunveilread', globalInstall, true);
	};

	factory = factory.bind(null, window, window.document);

	if( true && module.exports){
		factory(__webpack_require__(/*! lazysizes */ "./node_modules/lazysizes/lazysizes.js"));
	} else if(window.lazySizes) {
		globalInstall();
	} else {
		window.addEventListener('lazyunveilread', globalInstall, true);
	}
}(window, function(window, document, lazySizes) {
	/*jshint eqnull:true */
	'use strict';

	var dummyParent = {nodeName: ''};
	var supportPicture = !!window.HTMLPictureElement && ('sizes' in document.createElement('img'));
	var config = window.lazySizes && lazySizes.cfg;

	var handleLoadingElements = function(e){
		var i, isResponsive, hasTriggered, onload, loading;

		var loadElements = e.target.querySelectorAll('img, iframe');

		for(i = 0; i < loadElements.length; i++){
			isResponsive = loadElements[i].getAttribute('srcset') || (loadElements[i].parentNode || dummyParent).nodeName.toLowerCase() == 'picture';

			if(!supportPicture && isResponsive){
				lazySizes.uP(loadElements[i]);
			}

			if(!loadElements[i].complete && (isResponsive || loadElements[i].src)){
				e.detail.firesLoad = true;

				if(!onload || !loading){
					loading = 0;
					/*jshint loopfunc:true */
					onload = function(evt){
						loading--;
						if((!evt || loading < 1) && !hasTriggered){
							hasTriggered = true;
							e.detail.firesLoad = false;
							lazySizes.fire(e.target, '_lazyloaded', {}, false, true);
						}

						if(evt && evt.target){
							evt.target.removeEventListener('load', onload);
							evt.target.removeEventListener('error', onload);
						}
					};

					setTimeout(onload, 3500);
				}

				loading++;

				loadElements[i].addEventListener('load', onload);
				loadElements[i].addEventListener('error', onload);
			}
		}
	};

	config.getNoscriptContent =  function(noScript){
		return noScript.textContent || noScript.innerText;
	};

	window.addEventListener('lazybeforeunveil', function(e){
		if(e.detail.instance != lazySizes || e.defaultPrevented || e.target.getAttribute('data-noscript') == null){return;}

		var noScript = e.target.querySelector('noscript, script[type*="html"]') || {};
		var content = config.getNoscriptContent(noScript);

		if(content){
			e.target.innerHTML = content;
			handleLoadingElements(e);
		}
	});
}));


/***/ }),

/***/ "./node_modules/node-libs-browser/node_modules/process/browser.js":
/*!************************************************************************!*\
  !*** ./node_modules/node-libs-browser/node_modules/process/browser.js ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/path-browserify/index.js":
/*!***********************************************!*\
  !*** ./node_modules/path-browserify/index.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {// .dirname, .basename, and .extname methods are extracted from Node.js v8.11.1,
// backported and transplited with Babel, with backwards-compat fixes

// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

// resolves . and .. elements in a path array with directory names there
// must be no slashes, empty elements, or device names (c:\) in the array
// (so also no leading and trailing slashes - it does not distinguish
// relative and absolute paths)
function normalizeArray(parts, allowAboveRoot) {
  // if the path tries to go above the root, `up` ends up > 0
  var up = 0;
  for (var i = parts.length - 1; i >= 0; i--) {
    var last = parts[i];
    if (last === '.') {
      parts.splice(i, 1);
    } else if (last === '..') {
      parts.splice(i, 1);
      up++;
    } else if (up) {
      parts.splice(i, 1);
      up--;
    }
  }

  // if the path is allowed to go above the root, restore leading ..s
  if (allowAboveRoot) {
    for (; up--; up) {
      parts.unshift('..');
    }
  }

  return parts;
}

// path.resolve([from ...], to)
// posix version
exports.resolve = function() {
  var resolvedPath = '',
      resolvedAbsolute = false;

  for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
    var path = (i >= 0) ? arguments[i] : process.cwd();

    // Skip empty and invalid entries
    if (typeof path !== 'string') {
      throw new TypeError('Arguments to path.resolve must be strings');
    } else if (!path) {
      continue;
    }

    resolvedPath = path + '/' + resolvedPath;
    resolvedAbsolute = path.charAt(0) === '/';
  }

  // At this point the path should be resolved to a full absolute path, but
  // handle relative paths to be safe (might happen when process.cwd() fails)

  // Normalize the path
  resolvedPath = normalizeArray(filter(resolvedPath.split('/'), function(p) {
    return !!p;
  }), !resolvedAbsolute).join('/');

  return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
};

// path.normalize(path)
// posix version
exports.normalize = function(path) {
  var isAbsolute = exports.isAbsolute(path),
      trailingSlash = substr(path, -1) === '/';

  // Normalize the path
  path = normalizeArray(filter(path.split('/'), function(p) {
    return !!p;
  }), !isAbsolute).join('/');

  if (!path && !isAbsolute) {
    path = '.';
  }
  if (path && trailingSlash) {
    path += '/';
  }

  return (isAbsolute ? '/' : '') + path;
};

// posix version
exports.isAbsolute = function(path) {
  return path.charAt(0) === '/';
};

// posix version
exports.join = function() {
  var paths = Array.prototype.slice.call(arguments, 0);
  return exports.normalize(filter(paths, function(p, index) {
    if (typeof p !== 'string') {
      throw new TypeError('Arguments to path.join must be strings');
    }
    return p;
  }).join('/'));
};


// path.relative(from, to)
// posix version
exports.relative = function(from, to) {
  from = exports.resolve(from).substr(1);
  to = exports.resolve(to).substr(1);

  function trim(arr) {
    var start = 0;
    for (; start < arr.length; start++) {
      if (arr[start] !== '') break;
    }

    var end = arr.length - 1;
    for (; end >= 0; end--) {
      if (arr[end] !== '') break;
    }

    if (start > end) return [];
    return arr.slice(start, end - start + 1);
  }

  var fromParts = trim(from.split('/'));
  var toParts = trim(to.split('/'));

  var length = Math.min(fromParts.length, toParts.length);
  var samePartsLength = length;
  for (var i = 0; i < length; i++) {
    if (fromParts[i] !== toParts[i]) {
      samePartsLength = i;
      break;
    }
  }

  var outputParts = [];
  for (var i = samePartsLength; i < fromParts.length; i++) {
    outputParts.push('..');
  }

  outputParts = outputParts.concat(toParts.slice(samePartsLength));

  return outputParts.join('/');
};

exports.sep = '/';
exports.delimiter = ':';

exports.dirname = function (path) {
  if (typeof path !== 'string') path = path + '';
  if (path.length === 0) return '.';
  var code = path.charCodeAt(0);
  var hasRoot = code === 47 /*/*/;
  var end = -1;
  var matchedSlash = true;
  for (var i = path.length - 1; i >= 1; --i) {
    code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        if (!matchedSlash) {
          end = i;
          break;
        }
      } else {
      // We saw the first non-path separator
      matchedSlash = false;
    }
  }

  if (end === -1) return hasRoot ? '/' : '.';
  if (hasRoot && end === 1) {
    // return '//';
    // Backwards-compat fix:
    return '/';
  }
  return path.slice(0, end);
};

function basename(path) {
  if (typeof path !== 'string') path = path + '';

  var start = 0;
  var end = -1;
  var matchedSlash = true;
  var i;

  for (i = path.length - 1; i >= 0; --i) {
    if (path.charCodeAt(i) === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          start = i + 1;
          break;
        }
      } else if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // path component
      matchedSlash = false;
      end = i + 1;
    }
  }

  if (end === -1) return '';
  return path.slice(start, end);
}

// Uses a mixed approach for backwards-compatibility, as ext behavior changed
// in new Node.js versions, so only basename() above is backported here
exports.basename = function (path, ext) {
  var f = basename(path);
  if (ext && f.substr(-1 * ext.length) === ext) {
    f = f.substr(0, f.length - ext.length);
  }
  return f;
};

exports.extname = function (path) {
  if (typeof path !== 'string') path = path + '';
  var startDot = -1;
  var startPart = 0;
  var end = -1;
  var matchedSlash = true;
  // Track the state of characters (if any) we see before our first dot and
  // after any path separator we find
  var preDotState = 0;
  for (var i = path.length - 1; i >= 0; --i) {
    var code = path.charCodeAt(i);
    if (code === 47 /*/*/) {
        // If we reached a path separator that was not part of a set of path
        // separators at the end of the string, stop now
        if (!matchedSlash) {
          startPart = i + 1;
          break;
        }
        continue;
      }
    if (end === -1) {
      // We saw the first non-path separator, mark this as the end of our
      // extension
      matchedSlash = false;
      end = i + 1;
    }
    if (code === 46 /*.*/) {
        // If this is our first dot, mark it as the start of our extension
        if (startDot === -1)
          startDot = i;
        else if (preDotState !== 1)
          preDotState = 1;
    } else if (startDot !== -1) {
      // We saw a non-dot and non-path separator before our dot, so we should
      // have a good chance at having a non-empty extension
      preDotState = -1;
    }
  }

  if (startDot === -1 || end === -1 ||
      // We saw a non-dot character immediately before the dot
      preDotState === 0 ||
      // The (right-most) trimmed path component is exactly '..'
      preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
    return '';
  }
  return path.slice(startDot, end);
};

function filter (xs, f) {
    if (xs.filter) return xs.filter(f);
    var res = [];
    for (var i = 0; i < xs.length; i++) {
        if (f(xs[i], i, xs)) res.push(xs[i]);
    }
    return res;
}

// String.prototype.substr - negative index don't work in IE8
var substr = 'ab'.substr(-1) === 'b'
    ? function (str, start, len) { return str.substr(start, len) }
    : function (str, start, len) {
        if (start < 0) start = str.length + start;
        return str.substr(start, len);
    }
;

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../node-libs-browser/node_modules/process/browser.js */ "./node_modules/node-libs-browser/node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/regenerator-runtime/runtime.js":
/*!*****************************************************!*\
  !*** ./node_modules/regenerator-runtime/runtime.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var runtime = (function (exports) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  exports.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  exports.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  exports.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  exports.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator, PromiseImpl) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return PromiseImpl.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return PromiseImpl.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new PromiseImpl(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  exports.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
    if (PromiseImpl === void 0) PromiseImpl = Promise;

    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList),
      PromiseImpl
    );

    return exports.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        // Note: ["return"] must be used for ES3 parsing compatibility.
        if (delegate.iterator["return"]) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  exports.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  exports.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined;
      }

      return ContinueSentinel;
    }
  };

  // Regardless of whether this script is executing as a CommonJS module
  // or not, return the runtime object so that we can declare the variable
  // regeneratorRuntime in the outer scope, which allows this module to be
  // injected easily by `bin/regenerator --include-runtime script.js`.
  return exports;

}(
  // If this script is executing as a CommonJS module, use module.exports
  // as the regeneratorRuntime namespace. Otherwise create a new empty
  // object. Either way, the resulting object will be used to initialize
  // the regeneratorRuntime variable at the top of this file.
   true ? module.exports : undefined
));

try {
  regeneratorRuntime = runtime;
} catch (accidentalStrictMode) {
  // This module should not be running in strict mode, so the above
  // assignment should always work unless something is misconfigured. Just
  // in case runtime.js accidentally runs in strict mode, we can escape
  // strict mode using a global Function call. This could conceivably fail
  // if a Content Security Policy forbids using Function, but in that case
  // the proper solution is to fix the accidental strict mode problem. If
  // you've misconfigured your bundler to force strict mode and applied a
  // CSP to forbid Function, and you're not willing to fix either of those
  // problems, please detail your unique predicament in a GitHub issue.
  Function("r", "regeneratorRuntime = r")(runtime);
}


/***/ }),

/***/ "./node_modules/slick-carousel/slick/slick.js":
/*!****************************************************!*\
  !*** ./node_modules/slick-carousel/slick/slick.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
     _ _      _       _
 ___| (_) ___| | __  (_)___
/ __| | |/ __| |/ /  | / __|
\__ \ | | (__|   < _ | \__ \
|___/_|_|\___|_|\_(_)/ |___/
                   |__/

 Version: 1.7.1
  Author: Ken Wheeler
 Website: http://kenwheeler.github.io
    Docs: http://kenwheeler.github.io/slick
    Repo: http://github.com/kenwheeler/slick
  Issues: http://github.com/kenwheeler/slick/issues

 */
/* global window, document, define, jQuery, setInterval, clearInterval */
;(function(factory) {
    'use strict';
    if (true) {
        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
    } else {}

}(function($) {
    'use strict';
    var Slick = window.Slick || {};

    Slick = (function() {

        var instanceUid = 0;

        function Slick(element, settings) {

            var _ = this, dataSettings;

            _.defaults = {
                accessibility: true,
                adaptiveHeight: false,
                appendArrows: $(element),
                appendDots: $(element),
                arrows: true,
                asNavFor: null,
                prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>',
                nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>',
                autoplay: false,
                autoplaySpeed: 3000,
                centerMode: false,
                centerPadding: '50px',
                cssEase: 'ease',
                customPaging: function(slider, i) {
                    return $('<button type="button" />').text(i + 1);
                },
                dots: false,
                dotsClass: 'slick-dots',
                draggable: true,
                easing: 'linear',
                edgeFriction: 0.35,
                fade: false,
                focusOnSelect: false,
                infinite: true,
                initialSlide: 0,
                lazyLoad: 'ondemand',
                mobileFirst: false,
                pauseOnHover: true,
                pauseOnFocus: true,
                pauseOnDotsHover: false,
                respondTo: 'window',
                responsive: null,
                rows: 1,
                rtl: false,
                slide: '',
                slidesPerRow: 1,
                slidesToShow: 1,
                slidesToScroll: 1,
                speed: 500,
                swipe: true,
                swipeToSlide: false,
                touchMove: true,
                touchThreshold: 5,
                useCSS: true,
                useTransform: true,
                variableWidth: false,
                vertical: false,
                verticalSwiping: false,
                waitForAnimate: true,
                zIndex: 1000
            };

            _.initials = {
                animating: false,
                dragging: false,
                autoPlayTimer: null,
                currentDirection: 0,
                currentLeft: null,
                currentSlide: 0,
                direction: 1,
                $dots: null,
                listWidth: null,
                listHeight: null,
                loadIndex: 0,
                $nextArrow: null,
                $prevArrow: null,
                scrolling: false,
                slideCount: null,
                slideWidth: null,
                $slideTrack: null,
                $slides: null,
                sliding: false,
                slideOffset: 0,
                swipeLeft: null,
                swiping: false,
                $list: null,
                touchObject: {},
                transformsEnabled: false,
                unslicked: false
            };

            $.extend(_, _.initials);

            _.activeBreakpoint = null;
            _.animType = null;
            _.animProp = null;
            _.breakpoints = [];
            _.breakpointSettings = [];
            _.cssTransitions = false;
            _.focussed = false;
            _.interrupted = false;
            _.hidden = 'hidden';
            _.paused = true;
            _.positionProp = null;
            _.respondTo = null;
            _.rowCount = 1;
            _.shouldClick = true;
            _.$slider = $(element);
            _.$slidesCache = null;
            _.transformType = null;
            _.transitionType = null;
            _.visibilityChange = 'visibilitychange';
            _.windowWidth = 0;
            _.windowTimer = null;

            dataSettings = $(element).data('slick') || {};

            _.options = $.extend({}, _.defaults, settings, dataSettings);

            _.currentSlide = _.options.initialSlide;

            _.originalSettings = _.options;

            if (typeof document.mozHidden !== 'undefined') {
                _.hidden = 'mozHidden';
                _.visibilityChange = 'mozvisibilitychange';
            } else if (typeof document.webkitHidden !== 'undefined') {
                _.hidden = 'webkitHidden';
                _.visibilityChange = 'webkitvisibilitychange';
            }

            _.autoPlay = $.proxy(_.autoPlay, _);
            _.autoPlayClear = $.proxy(_.autoPlayClear, _);
            _.autoPlayIterator = $.proxy(_.autoPlayIterator, _);
            _.changeSlide = $.proxy(_.changeSlide, _);
            _.clickHandler = $.proxy(_.clickHandler, _);
            _.selectHandler = $.proxy(_.selectHandler, _);
            _.setPosition = $.proxy(_.setPosition, _);
            _.swipeHandler = $.proxy(_.swipeHandler, _);
            _.dragHandler = $.proxy(_.dragHandler, _);
            _.keyHandler = $.proxy(_.keyHandler, _);

            _.instanceUid = instanceUid++;

            // A simple way to check for HTML strings
            // Strict HTML recognition (must start with <)
            // Extracted from jQuery v1.11 source
            _.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/;


            _.registerBreakpoints();
            _.init(true);

        }

        return Slick;

    }());

    Slick.prototype.activateADA = function() {
        var _ = this;

        _.$slideTrack.find('.slick-active').attr({
            'aria-hidden': 'false'
        }).find('a, input, button, select').attr({
            'tabindex': '0'
        });

    };

    Slick.prototype.addSlide = Slick.prototype.slickAdd = function(markup, index, addBefore) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            addBefore = index;
            index = null;
        } else if (index < 0 || (index >= _.slideCount)) {
            return false;
        }

        _.unload();

        if (typeof(index) === 'number') {
            if (index === 0 && _.$slides.length === 0) {
                $(markup).appendTo(_.$slideTrack);
            } else if (addBefore) {
                $(markup).insertBefore(_.$slides.eq(index));
            } else {
                $(markup).insertAfter(_.$slides.eq(index));
            }
        } else {
            if (addBefore === true) {
                $(markup).prependTo(_.$slideTrack);
            } else {
                $(markup).appendTo(_.$slideTrack);
            }
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slides.each(function(index, element) {
            $(element).attr('data-slick-index', index);
        });

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.animateHeight = function() {
        var _ = this;
        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.animate({
                height: targetHeight
            }, _.options.speed);
        }
    };

    Slick.prototype.animateSlide = function(targetLeft, callback) {

        var animProps = {},
            _ = this;

        _.animateHeight();

        if (_.options.rtl === true && _.options.vertical === false) {
            targetLeft = -targetLeft;
        }
        if (_.transformsEnabled === false) {
            if (_.options.vertical === false) {
                _.$slideTrack.animate({
                    left: targetLeft
                }, _.options.speed, _.options.easing, callback);
            } else {
                _.$slideTrack.animate({
                    top: targetLeft
                }, _.options.speed, _.options.easing, callback);
            }

        } else {

            if (_.cssTransitions === false) {
                if (_.options.rtl === true) {
                    _.currentLeft = -(_.currentLeft);
                }
                $({
                    animStart: _.currentLeft
                }).animate({
                    animStart: targetLeft
                }, {
                    duration: _.options.speed,
                    easing: _.options.easing,
                    step: function(now) {
                        now = Math.ceil(now);
                        if (_.options.vertical === false) {
                            animProps[_.animType] = 'translate(' +
                                now + 'px, 0px)';
                            _.$slideTrack.css(animProps);
                        } else {
                            animProps[_.animType] = 'translate(0px,' +
                                now + 'px)';
                            _.$slideTrack.css(animProps);
                        }
                    },
                    complete: function() {
                        if (callback) {
                            callback.call();
                        }
                    }
                });

            } else {

                _.applyTransition();
                targetLeft = Math.ceil(targetLeft);

                if (_.options.vertical === false) {
                    animProps[_.animType] = 'translate3d(' + targetLeft + 'px, 0px, 0px)';
                } else {
                    animProps[_.animType] = 'translate3d(0px,' + targetLeft + 'px, 0px)';
                }
                _.$slideTrack.css(animProps);

                if (callback) {
                    setTimeout(function() {

                        _.disableTransition();

                        callback.call();
                    }, _.options.speed);
                }

            }

        }

    };

    Slick.prototype.getNavTarget = function() {

        var _ = this,
            asNavFor = _.options.asNavFor;

        if ( asNavFor && asNavFor !== null ) {
            asNavFor = $(asNavFor).not(_.$slider);
        }

        return asNavFor;

    };

    Slick.prototype.asNavFor = function(index) {

        var _ = this,
            asNavFor = _.getNavTarget();

        if ( asNavFor !== null && typeof asNavFor === 'object' ) {
            asNavFor.each(function() {
                var target = $(this).slick('getSlick');
                if(!target.unslicked) {
                    target.slideHandler(index, true);
                }
            });
        }

    };

    Slick.prototype.applyTransition = function(slide) {

        var _ = this,
            transition = {};

        if (_.options.fade === false) {
            transition[_.transitionType] = _.transformType + ' ' + _.options.speed + 'ms ' + _.options.cssEase;
        } else {
            transition[_.transitionType] = 'opacity ' + _.options.speed + 'ms ' + _.options.cssEase;
        }

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.autoPlay = function() {

        var _ = this;

        _.autoPlayClear();

        if ( _.slideCount > _.options.slidesToShow ) {
            _.autoPlayTimer = setInterval( _.autoPlayIterator, _.options.autoplaySpeed );
        }

    };

    Slick.prototype.autoPlayClear = function() {

        var _ = this;

        if (_.autoPlayTimer) {
            clearInterval(_.autoPlayTimer);
        }

    };

    Slick.prototype.autoPlayIterator = function() {

        var _ = this,
            slideTo = _.currentSlide + _.options.slidesToScroll;

        if ( !_.paused && !_.interrupted && !_.focussed ) {

            if ( _.options.infinite === false ) {

                if ( _.direction === 1 && ( _.currentSlide + 1 ) === ( _.slideCount - 1 )) {
                    _.direction = 0;
                }

                else if ( _.direction === 0 ) {

                    slideTo = _.currentSlide - _.options.slidesToScroll;

                    if ( _.currentSlide - 1 === 0 ) {
                        _.direction = 1;
                    }

                }

            }

            _.slideHandler( slideTo );

        }

    };

    Slick.prototype.buildArrows = function() {

        var _ = this;

        if (_.options.arrows === true ) {

            _.$prevArrow = $(_.options.prevArrow).addClass('slick-arrow');
            _.$nextArrow = $(_.options.nextArrow).addClass('slick-arrow');

            if( _.slideCount > _.options.slidesToShow ) {

                _.$prevArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');
                _.$nextArrow.removeClass('slick-hidden').removeAttr('aria-hidden tabindex');

                if (_.htmlExpr.test(_.options.prevArrow)) {
                    _.$prevArrow.prependTo(_.options.appendArrows);
                }

                if (_.htmlExpr.test(_.options.nextArrow)) {
                    _.$nextArrow.appendTo(_.options.appendArrows);
                }

                if (_.options.infinite !== true) {
                    _.$prevArrow
                        .addClass('slick-disabled')
                        .attr('aria-disabled', 'true');
                }

            } else {

                _.$prevArrow.add( _.$nextArrow )

                    .addClass('slick-hidden')
                    .attr({
                        'aria-disabled': 'true',
                        'tabindex': '-1'
                    });

            }

        }

    };

    Slick.prototype.buildDots = function() {

        var _ = this,
            i, dot;

        if (_.options.dots === true) {

            _.$slider.addClass('slick-dotted');

            dot = $('<ul />').addClass(_.options.dotsClass);

            for (i = 0; i <= _.getDotCount(); i += 1) {
                dot.append($('<li />').append(_.options.customPaging.call(this, _, i)));
            }

            _.$dots = dot.appendTo(_.options.appendDots);

            _.$dots.find('li').first().addClass('slick-active');

        }

    };

    Slick.prototype.buildOut = function() {

        var _ = this;

        _.$slides =
            _.$slider
                .children( _.options.slide + ':not(.slick-cloned)')
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        _.$slides.each(function(index, element) {
            $(element)
                .attr('data-slick-index', index)
                .data('originalStyling', $(element).attr('style') || '');
        });

        _.$slider.addClass('slick-slider');

        _.$slideTrack = (_.slideCount === 0) ?
            $('<div class="slick-track"/>').appendTo(_.$slider) :
            _.$slides.wrapAll('<div class="slick-track"/>').parent();

        _.$list = _.$slideTrack.wrap(
            '<div class="slick-list"/>').parent();
        _.$slideTrack.css('opacity', 0);

        if (_.options.centerMode === true || _.options.swipeToSlide === true) {
            _.options.slidesToScroll = 1;
        }

        $('img[data-lazy]', _.$slider).not('[src]').addClass('slick-loading');

        _.setupInfinite();

        _.buildArrows();

        _.buildDots();

        _.updateDots();


        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        if (_.options.draggable === true) {
            _.$list.addClass('draggable');
        }

    };

    Slick.prototype.buildRows = function() {

        var _ = this, a, b, c, newSlides, numOfSlides, originalSlides,slidesPerSection;

        newSlides = document.createDocumentFragment();
        originalSlides = _.$slider.children();

        if(_.options.rows > 1) {

            slidesPerSection = _.options.slidesPerRow * _.options.rows;
            numOfSlides = Math.ceil(
                originalSlides.length / slidesPerSection
            );

            for(a = 0; a < numOfSlides; a++){
                var slide = document.createElement('div');
                for(b = 0; b < _.options.rows; b++) {
                    var row = document.createElement('div');
                    for(c = 0; c < _.options.slidesPerRow; c++) {
                        var target = (a * slidesPerSection + ((b * _.options.slidesPerRow) + c));
                        if (originalSlides.get(target)) {
                            row.appendChild(originalSlides.get(target));
                        }
                    }
                    slide.appendChild(row);
                }
                newSlides.appendChild(slide);
            }

            _.$slider.empty().append(newSlides);
            _.$slider.children().children().children()
                .css({
                    'width':(100 / _.options.slidesPerRow) + '%',
                    'display': 'inline-block'
                });

        }

    };

    Slick.prototype.checkResponsive = function(initial, forceUpdate) {

        var _ = this,
            breakpoint, targetBreakpoint, respondToWidth, triggerBreakpoint = false;
        var sliderWidth = _.$slider.width();
        var windowWidth = window.innerWidth || $(window).width();

        if (_.respondTo === 'window') {
            respondToWidth = windowWidth;
        } else if (_.respondTo === 'slider') {
            respondToWidth = sliderWidth;
        } else if (_.respondTo === 'min') {
            respondToWidth = Math.min(windowWidth, sliderWidth);
        }

        if ( _.options.responsive &&
            _.options.responsive.length &&
            _.options.responsive !== null) {

            targetBreakpoint = null;

            for (breakpoint in _.breakpoints) {
                if (_.breakpoints.hasOwnProperty(breakpoint)) {
                    if (_.originalSettings.mobileFirst === false) {
                        if (respondToWidth < _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    } else {
                        if (respondToWidth > _.breakpoints[breakpoint]) {
                            targetBreakpoint = _.breakpoints[breakpoint];
                        }
                    }
                }
            }

            if (targetBreakpoint !== null) {
                if (_.activeBreakpoint !== null) {
                    if (targetBreakpoint !== _.activeBreakpoint || forceUpdate) {
                        _.activeBreakpoint =
                            targetBreakpoint;
                        if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                            _.unslick(targetBreakpoint);
                        } else {
                            _.options = $.extend({}, _.originalSettings,
                                _.breakpointSettings[
                                    targetBreakpoint]);
                            if (initial === true) {
                                _.currentSlide = _.options.initialSlide;
                            }
                            _.refresh(initial);
                        }
                        triggerBreakpoint = targetBreakpoint;
                    }
                } else {
                    _.activeBreakpoint = targetBreakpoint;
                    if (_.breakpointSettings[targetBreakpoint] === 'unslick') {
                        _.unslick(targetBreakpoint);
                    } else {
                        _.options = $.extend({}, _.originalSettings,
                            _.breakpointSettings[
                                targetBreakpoint]);
                        if (initial === true) {
                            _.currentSlide = _.options.initialSlide;
                        }
                        _.refresh(initial);
                    }
                    triggerBreakpoint = targetBreakpoint;
                }
            } else {
                if (_.activeBreakpoint !== null) {
                    _.activeBreakpoint = null;
                    _.options = _.originalSettings;
                    if (initial === true) {
                        _.currentSlide = _.options.initialSlide;
                    }
                    _.refresh(initial);
                    triggerBreakpoint = targetBreakpoint;
                }
            }

            // only trigger breakpoints during an actual break. not on initialize.
            if( !initial && triggerBreakpoint !== false ) {
                _.$slider.trigger('breakpoint', [_, triggerBreakpoint]);
            }
        }

    };

    Slick.prototype.changeSlide = function(event, dontAnimate) {

        var _ = this,
            $target = $(event.currentTarget),
            indexOffset, slideOffset, unevenOffset;

        // If target is a link, prevent default action.
        if($target.is('a')) {
            event.preventDefault();
        }

        // If target is not the <li> element (ie: a child), find the <li>.
        if(!$target.is('li')) {
            $target = $target.closest('li');
        }

        unevenOffset = (_.slideCount % _.options.slidesToScroll !== 0);
        indexOffset = unevenOffset ? 0 : (_.slideCount - _.currentSlide) % _.options.slidesToScroll;

        switch (event.data.message) {

            case 'previous':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : _.options.slidesToShow - indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide - slideOffset, false, dontAnimate);
                }
                break;

            case 'next':
                slideOffset = indexOffset === 0 ? _.options.slidesToScroll : indexOffset;
                if (_.slideCount > _.options.slidesToShow) {
                    _.slideHandler(_.currentSlide + slideOffset, false, dontAnimate);
                }
                break;

            case 'index':
                var index = event.data.index === 0 ? 0 :
                    event.data.index || $target.index() * _.options.slidesToScroll;

                _.slideHandler(_.checkNavigable(index), false, dontAnimate);
                $target.children().trigger('focus');
                break;

            default:
                return;
        }

    };

    Slick.prototype.checkNavigable = function(index) {

        var _ = this,
            navigables, prevNavigable;

        navigables = _.getNavigableIndexes();
        prevNavigable = 0;
        if (index > navigables[navigables.length - 1]) {
            index = navigables[navigables.length - 1];
        } else {
            for (var n in navigables) {
                if (index < navigables[n]) {
                    index = prevNavigable;
                    break;
                }
                prevNavigable = navigables[n];
            }
        }

        return index;
    };

    Slick.prototype.cleanUpEvents = function() {

        var _ = this;

        if (_.options.dots && _.$dots !== null) {

            $('li', _.$dots)
                .off('click.slick', _.changeSlide)
                .off('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .off('mouseleave.slick', $.proxy(_.interrupt, _, false));

            if (_.options.accessibility === true) {
                _.$dots.off('keydown.slick', _.keyHandler);
            }
        }

        _.$slider.off('focus.slick blur.slick');

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow && _.$prevArrow.off('click.slick', _.changeSlide);
            _.$nextArrow && _.$nextArrow.off('click.slick', _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow.off('keydown.slick', _.keyHandler);
                _.$nextArrow.off('keydown.slick', _.keyHandler);
            }
        }

        _.$list.off('touchstart.slick mousedown.slick', _.swipeHandler);
        _.$list.off('touchmove.slick mousemove.slick', _.swipeHandler);
        _.$list.off('touchend.slick mouseup.slick', _.swipeHandler);
        _.$list.off('touchcancel.slick mouseleave.slick', _.swipeHandler);

        _.$list.off('click.slick', _.clickHandler);

        $(document).off(_.visibilityChange, _.visibility);

        _.cleanUpSlideEvents();

        if (_.options.accessibility === true) {
            _.$list.off('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().off('click.slick', _.selectHandler);
        }

        $(window).off('orientationchange.slick.slick-' + _.instanceUid, _.orientationChange);

        $(window).off('resize.slick.slick-' + _.instanceUid, _.resize);

        $('[draggable!=true]', _.$slideTrack).off('dragstart', _.preventDefault);

        $(window).off('load.slick.slick-' + _.instanceUid, _.setPosition);

    };

    Slick.prototype.cleanUpSlideEvents = function() {

        var _ = this;

        _.$list.off('mouseenter.slick', $.proxy(_.interrupt, _, true));
        _.$list.off('mouseleave.slick', $.proxy(_.interrupt, _, false));

    };

    Slick.prototype.cleanUpRows = function() {

        var _ = this, originalSlides;

        if(_.options.rows > 1) {
            originalSlides = _.$slides.children().children();
            originalSlides.removeAttr('style');
            _.$slider.empty().append(originalSlides);
        }

    };

    Slick.prototype.clickHandler = function(event) {

        var _ = this;

        if (_.shouldClick === false) {
            event.stopImmediatePropagation();
            event.stopPropagation();
            event.preventDefault();
        }

    };

    Slick.prototype.destroy = function(refresh) {

        var _ = this;

        _.autoPlayClear();

        _.touchObject = {};

        _.cleanUpEvents();

        $('.slick-cloned', _.$slider).detach();

        if (_.$dots) {
            _.$dots.remove();
        }

        if ( _.$prevArrow && _.$prevArrow.length ) {

            _.$prevArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.prevArrow )) {
                _.$prevArrow.remove();
            }
        }

        if ( _.$nextArrow && _.$nextArrow.length ) {

            _.$nextArrow
                .removeClass('slick-disabled slick-arrow slick-hidden')
                .removeAttr('aria-hidden aria-disabled tabindex')
                .css('display','');

            if ( _.htmlExpr.test( _.options.nextArrow )) {
                _.$nextArrow.remove();
            }
        }


        if (_.$slides) {

            _.$slides
                .removeClass('slick-slide slick-active slick-center slick-visible slick-current')
                .removeAttr('aria-hidden')
                .removeAttr('data-slick-index')
                .each(function(){
                    $(this).attr('style', $(this).data('originalStyling'));
                });

            _.$slideTrack.children(this.options.slide).detach();

            _.$slideTrack.detach();

            _.$list.detach();

            _.$slider.append(_.$slides);
        }

        _.cleanUpRows();

        _.$slider.removeClass('slick-slider');
        _.$slider.removeClass('slick-initialized');
        _.$slider.removeClass('slick-dotted');

        _.unslicked = true;

        if(!refresh) {
            _.$slider.trigger('destroy', [_]);
        }

    };

    Slick.prototype.disableTransition = function(slide) {

        var _ = this,
            transition = {};

        transition[_.transitionType] = '';

        if (_.options.fade === false) {
            _.$slideTrack.css(transition);
        } else {
            _.$slides.eq(slide).css(transition);
        }

    };

    Slick.prototype.fadeSlide = function(slideIndex, callback) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).css({
                zIndex: _.options.zIndex
            });

            _.$slides.eq(slideIndex).animate({
                opacity: 1
            }, _.options.speed, _.options.easing, callback);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 1,
                zIndex: _.options.zIndex
            });

            if (callback) {
                setTimeout(function() {

                    _.disableTransition(slideIndex);

                    callback.call();
                }, _.options.speed);
            }

        }

    };

    Slick.prototype.fadeSlideOut = function(slideIndex) {

        var _ = this;

        if (_.cssTransitions === false) {

            _.$slides.eq(slideIndex).animate({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            }, _.options.speed, _.options.easing);

        } else {

            _.applyTransition(slideIndex);

            _.$slides.eq(slideIndex).css({
                opacity: 0,
                zIndex: _.options.zIndex - 2
            });

        }

    };

    Slick.prototype.filterSlides = Slick.prototype.slickFilter = function(filter) {

        var _ = this;

        if (filter !== null) {

            _.$slidesCache = _.$slides;

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.filter(filter).appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.focusHandler = function() {

        var _ = this;

        _.$slider
            .off('focus.slick blur.slick')
            .on('focus.slick blur.slick', '*', function(event) {

            event.stopImmediatePropagation();
            var $sf = $(this);

            setTimeout(function() {

                if( _.options.pauseOnFocus ) {
                    _.focussed = $sf.is(':focus');
                    _.autoPlay();
                }

            }, 0);

        });
    };

    Slick.prototype.getCurrent = Slick.prototype.slickCurrentSlide = function() {

        var _ = this;
        return _.currentSlide;

    };

    Slick.prototype.getDotCount = function() {

        var _ = this;

        var breakPoint = 0;
        var counter = 0;
        var pagerQty = 0;

        if (_.options.infinite === true) {
            if (_.slideCount <= _.options.slidesToShow) {
                 ++pagerQty;
            } else {
                while (breakPoint < _.slideCount) {
                    ++pagerQty;
                    breakPoint = counter + _.options.slidesToScroll;
                    counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
                }
            }
        } else if (_.options.centerMode === true) {
            pagerQty = _.slideCount;
        } else if(!_.options.asNavFor) {
            pagerQty = 1 + Math.ceil((_.slideCount - _.options.slidesToShow) / _.options.slidesToScroll);
        }else {
            while (breakPoint < _.slideCount) {
                ++pagerQty;
                breakPoint = counter + _.options.slidesToScroll;
                counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
            }
        }

        return pagerQty - 1;

    };

    Slick.prototype.getLeft = function(slideIndex) {

        var _ = this,
            targetLeft,
            verticalHeight,
            verticalOffset = 0,
            targetSlide;

        _.slideOffset = 0;
        verticalHeight = _.$slides.first().outerHeight(true);

        if (_.options.infinite === true) {
            if (_.slideCount > _.options.slidesToShow) {
                _.slideOffset = (_.slideWidth * _.options.slidesToShow) * -1;
                verticalOffset = (verticalHeight * _.options.slidesToShow) * -1;
            }
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                if (slideIndex + _.options.slidesToScroll > _.slideCount && _.slideCount > _.options.slidesToShow) {
                    if (slideIndex > _.slideCount) {
                        _.slideOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * _.slideWidth) * -1;
                        verticalOffset = ((_.options.slidesToShow - (slideIndex - _.slideCount)) * verticalHeight) * -1;
                    } else {
                        _.slideOffset = ((_.slideCount % _.options.slidesToScroll) * _.slideWidth) * -1;
                        verticalOffset = ((_.slideCount % _.options.slidesToScroll) * verticalHeight) * -1;
                    }
                }
            }
        } else {
            if (slideIndex + _.options.slidesToShow > _.slideCount) {
                _.slideOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * _.slideWidth;
                verticalOffset = ((slideIndex + _.options.slidesToShow) - _.slideCount) * verticalHeight;
            }
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.slideOffset = 0;
            verticalOffset = 0;
        }

        if (_.options.centerMode === true && _.slideCount <= _.options.slidesToShow) {
            _.slideOffset = ((_.slideWidth * Math.floor(_.options.slidesToShow)) / 2) - ((_.slideWidth * _.slideCount) / 2);
        } else if (_.options.centerMode === true && _.options.infinite === true) {
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2) - _.slideWidth;
        } else if (_.options.centerMode === true) {
            _.slideOffset = 0;
            _.slideOffset += _.slideWidth * Math.floor(_.options.slidesToShow / 2);
        }

        if (_.options.vertical === false) {
            targetLeft = ((slideIndex * _.slideWidth) * -1) + _.slideOffset;
        } else {
            targetLeft = ((slideIndex * verticalHeight) * -1) + verticalOffset;
        }

        if (_.options.variableWidth === true) {

            if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
            } else {
                targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow);
            }

            if (_.options.rtl === true) {
                if (targetSlide[0]) {
                    targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                } else {
                    targetLeft =  0;
                }
            } else {
                targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
            }

            if (_.options.centerMode === true) {
                if (_.slideCount <= _.options.slidesToShow || _.options.infinite === false) {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex);
                } else {
                    targetSlide = _.$slideTrack.children('.slick-slide').eq(slideIndex + _.options.slidesToShow + 1);
                }

                if (_.options.rtl === true) {
                    if (targetSlide[0]) {
                        targetLeft = (_.$slideTrack.width() - targetSlide[0].offsetLeft - targetSlide.width()) * -1;
                    } else {
                        targetLeft =  0;
                    }
                } else {
                    targetLeft = targetSlide[0] ? targetSlide[0].offsetLeft * -1 : 0;
                }

                targetLeft += (_.$list.width() - targetSlide.outerWidth()) / 2;
            }
        }

        return targetLeft;

    };

    Slick.prototype.getOption = Slick.prototype.slickGetOption = function(option) {

        var _ = this;

        return _.options[option];

    };

    Slick.prototype.getNavigableIndexes = function() {

        var _ = this,
            breakPoint = 0,
            counter = 0,
            indexes = [],
            max;

        if (_.options.infinite === false) {
            max = _.slideCount;
        } else {
            breakPoint = _.options.slidesToScroll * -1;
            counter = _.options.slidesToScroll * -1;
            max = _.slideCount * 2;
        }

        while (breakPoint < max) {
            indexes.push(breakPoint);
            breakPoint = counter + _.options.slidesToScroll;
            counter += _.options.slidesToScroll <= _.options.slidesToShow ? _.options.slidesToScroll : _.options.slidesToShow;
        }

        return indexes;

    };

    Slick.prototype.getSlick = function() {

        return this;

    };

    Slick.prototype.getSlideCount = function() {

        var _ = this,
            slidesTraversed, swipedSlide, centerOffset;

        centerOffset = _.options.centerMode === true ? _.slideWidth * Math.floor(_.options.slidesToShow / 2) : 0;

        if (_.options.swipeToSlide === true) {
            _.$slideTrack.find('.slick-slide').each(function(index, slide) {
                if (slide.offsetLeft - centerOffset + ($(slide).outerWidth() / 2) > (_.swipeLeft * -1)) {
                    swipedSlide = slide;
                    return false;
                }
            });

            slidesTraversed = Math.abs($(swipedSlide).attr('data-slick-index') - _.currentSlide) || 1;

            return slidesTraversed;

        } else {
            return _.options.slidesToScroll;
        }

    };

    Slick.prototype.goTo = Slick.prototype.slickGoTo = function(slide, dontAnimate) {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'index',
                index: parseInt(slide)
            }
        }, dontAnimate);

    };

    Slick.prototype.init = function(creation) {

        var _ = this;

        if (!$(_.$slider).hasClass('slick-initialized')) {

            $(_.$slider).addClass('slick-initialized');

            _.buildRows();
            _.buildOut();
            _.setProps();
            _.startLoad();
            _.loadSlider();
            _.initializeEvents();
            _.updateArrows();
            _.updateDots();
            _.checkResponsive(true);
            _.focusHandler();

        }

        if (creation) {
            _.$slider.trigger('init', [_]);
        }

        if (_.options.accessibility === true) {
            _.initADA();
        }

        if ( _.options.autoplay ) {

            _.paused = false;
            _.autoPlay();

        }

    };

    Slick.prototype.initADA = function() {
        var _ = this,
                numDotGroups = Math.ceil(_.slideCount / _.options.slidesToShow),
                tabControlIndexes = _.getNavigableIndexes().filter(function(val) {
                    return (val >= 0) && (val < _.slideCount);
                });

        _.$slides.add(_.$slideTrack.find('.slick-cloned')).attr({
            'aria-hidden': 'true',
            'tabindex': '-1'
        }).find('a, input, button, select').attr({
            'tabindex': '-1'
        });

        if (_.$dots !== null) {
            _.$slides.not(_.$slideTrack.find('.slick-cloned')).each(function(i) {
                var slideControlIndex = tabControlIndexes.indexOf(i);

                $(this).attr({
                    'role': 'tabpanel',
                    'id': 'slick-slide' + _.instanceUid + i,
                    'tabindex': -1
                });            

                if (slideControlIndex !== -1) {
                    $(this).attr({
                        'aria-describedby': 'slick-slide-control' + _.instanceUid + slideControlIndex
                    });
                }
            });

            _.$dots.attr('role', 'tablist').find('li').each(function(i) {
                var mappedSlideIndex = tabControlIndexes[i];
        
                $(this).attr({
                    'role': 'presentation'
                });

                $(this).find('button').first().attr({
                    'role': 'tab',
                    'id': 'slick-slide-control' + _.instanceUid + i,
                    'aria-controls': 'slick-slide' + _.instanceUid + mappedSlideIndex,
                    'aria-label': (i + 1) + ' of ' + numDotGroups,
                    'aria-selected': null,
                    'tabindex': '-1'
                });

            }).eq(_.currentSlide).find('button').attr({
                'aria-selected': 'true',
                'tabindex': '0'
            }).end();
        }

        for (var i=_.currentSlide, max=i+_.options.slidesToShow; i < max; i++) {
            _.$slides.eq(i).attr('tabindex', 0);
        }

        _.activateADA();

    };

    Slick.prototype.initArrowEvents = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {
            _.$prevArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'previous'
               }, _.changeSlide);
            _.$nextArrow
               .off('click.slick')
               .on('click.slick', {
                    message: 'next'
               }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$prevArrow.on('keydown.slick', _.keyHandler);
                _.$nextArrow.on('keydown.slick', _.keyHandler);
            }   
        }

    };

    Slick.prototype.initDotEvents = function() {

        var _ = this;

        if (_.options.dots === true) {
            $('li', _.$dots).on('click.slick', {
                message: 'index'
            }, _.changeSlide);

            if (_.options.accessibility === true) {
                _.$dots.on('keydown.slick', _.keyHandler);
            }
        }

        if ( _.options.dots === true && _.options.pauseOnDotsHover === true ) {

            $('li', _.$dots)
                .on('mouseenter.slick', $.proxy(_.interrupt, _, true))
                .on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initSlideEvents = function() {

        var _ = this;

        if ( _.options.pauseOnHover ) {

            _.$list.on('mouseenter.slick', $.proxy(_.interrupt, _, true));
            _.$list.on('mouseleave.slick', $.proxy(_.interrupt, _, false));

        }

    };

    Slick.prototype.initializeEvents = function() {

        var _ = this;

        _.initArrowEvents();

        _.initDotEvents();
        _.initSlideEvents();

        _.$list.on('touchstart.slick mousedown.slick', {
            action: 'start'
        }, _.swipeHandler);
        _.$list.on('touchmove.slick mousemove.slick', {
            action: 'move'
        }, _.swipeHandler);
        _.$list.on('touchend.slick mouseup.slick', {
            action: 'end'
        }, _.swipeHandler);
        _.$list.on('touchcancel.slick mouseleave.slick', {
            action: 'end'
        }, _.swipeHandler);

        _.$list.on('click.slick', _.clickHandler);

        $(document).on(_.visibilityChange, $.proxy(_.visibility, _));

        if (_.options.accessibility === true) {
            _.$list.on('keydown.slick', _.keyHandler);
        }

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        $(window).on('orientationchange.slick.slick-' + _.instanceUid, $.proxy(_.orientationChange, _));

        $(window).on('resize.slick.slick-' + _.instanceUid, $.proxy(_.resize, _));

        $('[draggable!=true]', _.$slideTrack).on('dragstart', _.preventDefault);

        $(window).on('load.slick.slick-' + _.instanceUid, _.setPosition);
        $(_.setPosition);

    };

    Slick.prototype.initUI = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.show();
            _.$nextArrow.show();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.show();

        }

    };

    Slick.prototype.keyHandler = function(event) {

        var _ = this;
         //Dont slide if the cursor is inside the form fields and arrow keys are pressed
        if(!event.target.tagName.match('TEXTAREA|INPUT|SELECT')) {
            if (event.keyCode === 37 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'next' :  'previous'
                    }
                });
            } else if (event.keyCode === 39 && _.options.accessibility === true) {
                _.changeSlide({
                    data: {
                        message: _.options.rtl === true ? 'previous' : 'next'
                    }
                });
            }
        }

    };

    Slick.prototype.lazyLoad = function() {

        var _ = this,
            loadRange, cloneRange, rangeStart, rangeEnd;

        function loadImages(imagesScope) {

            $('img[data-lazy]', imagesScope).each(function() {

                var image = $(this),
                    imageSource = $(this).attr('data-lazy'),
                    imageSrcSet = $(this).attr('data-srcset'),
                    imageSizes  = $(this).attr('data-sizes') || _.$slider.attr('data-sizes'),
                    imageToLoad = document.createElement('img');

                imageToLoad.onload = function() {

                    image
                        .animate({ opacity: 0 }, 100, function() {

                            if (imageSrcSet) {
                                image
                                    .attr('srcset', imageSrcSet );

                                if (imageSizes) {
                                    image
                                        .attr('sizes', imageSizes );
                                }
                            }

                            image
                                .attr('src', imageSource)
                                .animate({ opacity: 1 }, 200, function() {
                                    image
                                        .removeAttr('data-lazy data-srcset data-sizes')
                                        .removeClass('slick-loading');
                                });
                            _.$slider.trigger('lazyLoaded', [_, image, imageSource]);
                        });

                };

                imageToLoad.onerror = function() {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                };

                imageToLoad.src = imageSource;

            });

        }

        if (_.options.centerMode === true) {
            if (_.options.infinite === true) {
                rangeStart = _.currentSlide + (_.options.slidesToShow / 2 + 1);
                rangeEnd = rangeStart + _.options.slidesToShow + 2;
            } else {
                rangeStart = Math.max(0, _.currentSlide - (_.options.slidesToShow / 2 + 1));
                rangeEnd = 2 + (_.options.slidesToShow / 2 + 1) + _.currentSlide;
            }
        } else {
            rangeStart = _.options.infinite ? _.options.slidesToShow + _.currentSlide : _.currentSlide;
            rangeEnd = Math.ceil(rangeStart + _.options.slidesToShow);
            if (_.options.fade === true) {
                if (rangeStart > 0) rangeStart--;
                if (rangeEnd <= _.slideCount) rangeEnd++;
            }
        }

        loadRange = _.$slider.find('.slick-slide').slice(rangeStart, rangeEnd);

        if (_.options.lazyLoad === 'anticipated') {
            var prevSlide = rangeStart - 1,
                nextSlide = rangeEnd,
                $slides = _.$slider.find('.slick-slide');

            for (var i = 0; i < _.options.slidesToScroll; i++) {
                if (prevSlide < 0) prevSlide = _.slideCount - 1;
                loadRange = loadRange.add($slides.eq(prevSlide));
                loadRange = loadRange.add($slides.eq(nextSlide));
                prevSlide--;
                nextSlide++;
            }
        }

        loadImages(loadRange);

        if (_.slideCount <= _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-slide');
            loadImages(cloneRange);
        } else
        if (_.currentSlide >= _.slideCount - _.options.slidesToShow) {
            cloneRange = _.$slider.find('.slick-cloned').slice(0, _.options.slidesToShow);
            loadImages(cloneRange);
        } else if (_.currentSlide === 0) {
            cloneRange = _.$slider.find('.slick-cloned').slice(_.options.slidesToShow * -1);
            loadImages(cloneRange);
        }

    };

    Slick.prototype.loadSlider = function() {

        var _ = this;

        _.setPosition();

        _.$slideTrack.css({
            opacity: 1
        });

        _.$slider.removeClass('slick-loading');

        _.initUI();

        if (_.options.lazyLoad === 'progressive') {
            _.progressiveLazyLoad();
        }

    };

    Slick.prototype.next = Slick.prototype.slickNext = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'next'
            }
        });

    };

    Slick.prototype.orientationChange = function() {

        var _ = this;

        _.checkResponsive();
        _.setPosition();

    };

    Slick.prototype.pause = Slick.prototype.slickPause = function() {

        var _ = this;

        _.autoPlayClear();
        _.paused = true;

    };

    Slick.prototype.play = Slick.prototype.slickPlay = function() {

        var _ = this;

        _.autoPlay();
        _.options.autoplay = true;
        _.paused = false;
        _.focussed = false;
        _.interrupted = false;

    };

    Slick.prototype.postSlide = function(index) {

        var _ = this;

        if( !_.unslicked ) {

            _.$slider.trigger('afterChange', [_, index]);

            _.animating = false;

            if (_.slideCount > _.options.slidesToShow) {
                _.setPosition();
            }

            _.swipeLeft = null;

            if ( _.options.autoplay ) {
                _.autoPlay();
            }

            if (_.options.accessibility === true) {
                _.initADA();
                // for non-autoplay: once active slide (group) has updated, set focus on first newly showing slide 
                if (!_.options.autoplay) {
                    var $currentSlide = $(_.$slides.get(_.currentSlide));
                    $currentSlide.attr('tabindex', 0).focus();
                }
            }

        }

    };

    Slick.prototype.prev = Slick.prototype.slickPrev = function() {

        var _ = this;

        _.changeSlide({
            data: {
                message: 'previous'
            }
        });

    };

    Slick.prototype.preventDefault = function(event) {

        event.preventDefault();

    };

    Slick.prototype.progressiveLazyLoad = function( tryCount ) {

        tryCount = tryCount || 1;

        var _ = this,
            $imgsToLoad = $( 'img[data-lazy]', _.$slider ),
            image,
            imageSource,
            imageSrcSet,
            imageSizes,
            imageToLoad;

        if ( $imgsToLoad.length ) {

            image = $imgsToLoad.first();
            imageSource = image.attr('data-lazy');
            imageSrcSet = image.attr('data-srcset');
            imageSizes  = image.attr('data-sizes') || _.$slider.attr('data-sizes');
            imageToLoad = document.createElement('img');

            imageToLoad.onload = function() {

                if (imageSrcSet) {
                    image
                        .attr('srcset', imageSrcSet );

                    if (imageSizes) {
                        image
                            .attr('sizes', imageSizes );
                    }
                }

                image
                    .attr( 'src', imageSource )
                    .removeAttr('data-lazy data-srcset data-sizes')
                    .removeClass('slick-loading');

                if ( _.options.adaptiveHeight === true ) {
                    _.setPosition();
                }

                _.$slider.trigger('lazyLoaded', [ _, image, imageSource ]);
                _.progressiveLazyLoad();

            };

            imageToLoad.onerror = function() {

                if ( tryCount < 3 ) {

                    /**
                     * try to load the image 3 times,
                     * leave a slight delay so we don't get
                     * servers blocking the request.
                     */
                    setTimeout( function() {
                        _.progressiveLazyLoad( tryCount + 1 );
                    }, 500 );

                } else {

                    image
                        .removeAttr( 'data-lazy' )
                        .removeClass( 'slick-loading' )
                        .addClass( 'slick-lazyload-error' );

                    _.$slider.trigger('lazyLoadError', [ _, image, imageSource ]);

                    _.progressiveLazyLoad();

                }

            };

            imageToLoad.src = imageSource;

        } else {

            _.$slider.trigger('allImagesLoaded', [ _ ]);

        }

    };

    Slick.prototype.refresh = function( initializing ) {

        var _ = this, currentSlide, lastVisibleIndex;

        lastVisibleIndex = _.slideCount - _.options.slidesToShow;

        // in non-infinite sliders, we don't want to go past the
        // last visible index.
        if( !_.options.infinite && ( _.currentSlide > lastVisibleIndex )) {
            _.currentSlide = lastVisibleIndex;
        }

        // if less slides than to show, go to start.
        if ( _.slideCount <= _.options.slidesToShow ) {
            _.currentSlide = 0;

        }

        currentSlide = _.currentSlide;

        _.destroy(true);

        $.extend(_, _.initials, { currentSlide: currentSlide });

        _.init();

        if( !initializing ) {

            _.changeSlide({
                data: {
                    message: 'index',
                    index: currentSlide
                }
            }, false);

        }

    };

    Slick.prototype.registerBreakpoints = function() {

        var _ = this, breakpoint, currentBreakpoint, l,
            responsiveSettings = _.options.responsive || null;

        if ( $.type(responsiveSettings) === 'array' && responsiveSettings.length ) {

            _.respondTo = _.options.respondTo || 'window';

            for ( breakpoint in responsiveSettings ) {

                l = _.breakpoints.length-1;

                if (responsiveSettings.hasOwnProperty(breakpoint)) {
                    currentBreakpoint = responsiveSettings[breakpoint].breakpoint;

                    // loop through the breakpoints and cut out any existing
                    // ones with the same breakpoint number, we don't want dupes.
                    while( l >= 0 ) {
                        if( _.breakpoints[l] && _.breakpoints[l] === currentBreakpoint ) {
                            _.breakpoints.splice(l,1);
                        }
                        l--;
                    }

                    _.breakpoints.push(currentBreakpoint);
                    _.breakpointSettings[currentBreakpoint] = responsiveSettings[breakpoint].settings;

                }

            }

            _.breakpoints.sort(function(a, b) {
                return ( _.options.mobileFirst ) ? a-b : b-a;
            });

        }

    };

    Slick.prototype.reinit = function() {

        var _ = this;

        _.$slides =
            _.$slideTrack
                .children(_.options.slide)
                .addClass('slick-slide');

        _.slideCount = _.$slides.length;

        if (_.currentSlide >= _.slideCount && _.currentSlide !== 0) {
            _.currentSlide = _.currentSlide - _.options.slidesToScroll;
        }

        if (_.slideCount <= _.options.slidesToShow) {
            _.currentSlide = 0;
        }

        _.registerBreakpoints();

        _.setProps();
        _.setupInfinite();
        _.buildArrows();
        _.updateArrows();
        _.initArrowEvents();
        _.buildDots();
        _.updateDots();
        _.initDotEvents();
        _.cleanUpSlideEvents();
        _.initSlideEvents();

        _.checkResponsive(false, true);

        if (_.options.focusOnSelect === true) {
            $(_.$slideTrack).children().on('click.slick', _.selectHandler);
        }

        _.setSlideClasses(typeof _.currentSlide === 'number' ? _.currentSlide : 0);

        _.setPosition();
        _.focusHandler();

        _.paused = !_.options.autoplay;
        _.autoPlay();

        _.$slider.trigger('reInit', [_]);

    };

    Slick.prototype.resize = function() {

        var _ = this;

        if ($(window).width() !== _.windowWidth) {
            clearTimeout(_.windowDelay);
            _.windowDelay = window.setTimeout(function() {
                _.windowWidth = $(window).width();
                _.checkResponsive();
                if( !_.unslicked ) { _.setPosition(); }
            }, 50);
        }
    };

    Slick.prototype.removeSlide = Slick.prototype.slickRemove = function(index, removeBefore, removeAll) {

        var _ = this;

        if (typeof(index) === 'boolean') {
            removeBefore = index;
            index = removeBefore === true ? 0 : _.slideCount - 1;
        } else {
            index = removeBefore === true ? --index : index;
        }

        if (_.slideCount < 1 || index < 0 || index > _.slideCount - 1) {
            return false;
        }

        _.unload();

        if (removeAll === true) {
            _.$slideTrack.children().remove();
        } else {
            _.$slideTrack.children(this.options.slide).eq(index).remove();
        }

        _.$slides = _.$slideTrack.children(this.options.slide);

        _.$slideTrack.children(this.options.slide).detach();

        _.$slideTrack.append(_.$slides);

        _.$slidesCache = _.$slides;

        _.reinit();

    };

    Slick.prototype.setCSS = function(position) {

        var _ = this,
            positionProps = {},
            x, y;

        if (_.options.rtl === true) {
            position = -position;
        }
        x = _.positionProp == 'left' ? Math.ceil(position) + 'px' : '0px';
        y = _.positionProp == 'top' ? Math.ceil(position) + 'px' : '0px';

        positionProps[_.positionProp] = position;

        if (_.transformsEnabled === false) {
            _.$slideTrack.css(positionProps);
        } else {
            positionProps = {};
            if (_.cssTransitions === false) {
                positionProps[_.animType] = 'translate(' + x + ', ' + y + ')';
                _.$slideTrack.css(positionProps);
            } else {
                positionProps[_.animType] = 'translate3d(' + x + ', ' + y + ', 0px)';
                _.$slideTrack.css(positionProps);
            }
        }

    };

    Slick.prototype.setDimensions = function() {

        var _ = this;

        if (_.options.vertical === false) {
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: ('0px ' + _.options.centerPadding)
                });
            }
        } else {
            _.$list.height(_.$slides.first().outerHeight(true) * _.options.slidesToShow);
            if (_.options.centerMode === true) {
                _.$list.css({
                    padding: (_.options.centerPadding + ' 0px')
                });
            }
        }

        _.listWidth = _.$list.width();
        _.listHeight = _.$list.height();


        if (_.options.vertical === false && _.options.variableWidth === false) {
            _.slideWidth = Math.ceil(_.listWidth / _.options.slidesToShow);
            _.$slideTrack.width(Math.ceil((_.slideWidth * _.$slideTrack.children('.slick-slide').length)));

        } else if (_.options.variableWidth === true) {
            _.$slideTrack.width(5000 * _.slideCount);
        } else {
            _.slideWidth = Math.ceil(_.listWidth);
            _.$slideTrack.height(Math.ceil((_.$slides.first().outerHeight(true) * _.$slideTrack.children('.slick-slide').length)));
        }

        var offset = _.$slides.first().outerWidth(true) - _.$slides.first().width();
        if (_.options.variableWidth === false) _.$slideTrack.children('.slick-slide').width(_.slideWidth - offset);

    };

    Slick.prototype.setFade = function() {

        var _ = this,
            targetLeft;

        _.$slides.each(function(index, element) {
            targetLeft = (_.slideWidth * index) * -1;
            if (_.options.rtl === true) {
                $(element).css({
                    position: 'relative',
                    right: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            } else {
                $(element).css({
                    position: 'relative',
                    left: targetLeft,
                    top: 0,
                    zIndex: _.options.zIndex - 2,
                    opacity: 0
                });
            }
        });

        _.$slides.eq(_.currentSlide).css({
            zIndex: _.options.zIndex - 1,
            opacity: 1
        });

    };

    Slick.prototype.setHeight = function() {

        var _ = this;

        if (_.options.slidesToShow === 1 && _.options.adaptiveHeight === true && _.options.vertical === false) {
            var targetHeight = _.$slides.eq(_.currentSlide).outerHeight(true);
            _.$list.css('height', targetHeight);
        }

    };

    Slick.prototype.setOption =
    Slick.prototype.slickSetOption = function() {

        /**
         * accepts arguments in format of:
         *
         *  - for changing a single option's value:
         *     .slick("setOption", option, value, refresh )
         *
         *  - for changing a set of responsive options:
         *     .slick("setOption", 'responsive', [{}, ...], refresh )
         *
         *  - for updating multiple values at once (not responsive)
         *     .slick("setOption", { 'option': value, ... }, refresh )
         */

        var _ = this, l, item, option, value, refresh = false, type;

        if( $.type( arguments[0] ) === 'object' ) {

            option =  arguments[0];
            refresh = arguments[1];
            type = 'multiple';

        } else if ( $.type( arguments[0] ) === 'string' ) {

            option =  arguments[0];
            value = arguments[1];
            refresh = arguments[2];

            if ( arguments[0] === 'responsive' && $.type( arguments[1] ) === 'array' ) {

                type = 'responsive';

            } else if ( typeof arguments[1] !== 'undefined' ) {

                type = 'single';

            }

        }

        if ( type === 'single' ) {

            _.options[option] = value;


        } else if ( type === 'multiple' ) {

            $.each( option , function( opt, val ) {

                _.options[opt] = val;

            });


        } else if ( type === 'responsive' ) {

            for ( item in value ) {

                if( $.type( _.options.responsive ) !== 'array' ) {

                    _.options.responsive = [ value[item] ];

                } else {

                    l = _.options.responsive.length-1;

                    // loop through the responsive object and splice out duplicates.
                    while( l >= 0 ) {

                        if( _.options.responsive[l].breakpoint === value[item].breakpoint ) {

                            _.options.responsive.splice(l,1);

                        }

                        l--;

                    }

                    _.options.responsive.push( value[item] );

                }

            }

        }

        if ( refresh ) {

            _.unload();
            _.reinit();

        }

    };

    Slick.prototype.setPosition = function() {

        var _ = this;

        _.setDimensions();

        _.setHeight();

        if (_.options.fade === false) {
            _.setCSS(_.getLeft(_.currentSlide));
        } else {
            _.setFade();
        }

        _.$slider.trigger('setPosition', [_]);

    };

    Slick.prototype.setProps = function() {

        var _ = this,
            bodyStyle = document.body.style;

        _.positionProp = _.options.vertical === true ? 'top' : 'left';

        if (_.positionProp === 'top') {
            _.$slider.addClass('slick-vertical');
        } else {
            _.$slider.removeClass('slick-vertical');
        }

        if (bodyStyle.WebkitTransition !== undefined ||
            bodyStyle.MozTransition !== undefined ||
            bodyStyle.msTransition !== undefined) {
            if (_.options.useCSS === true) {
                _.cssTransitions = true;
            }
        }

        if ( _.options.fade ) {
            if ( typeof _.options.zIndex === 'number' ) {
                if( _.options.zIndex < 3 ) {
                    _.options.zIndex = 3;
                }
            } else {
                _.options.zIndex = _.defaults.zIndex;
            }
        }

        if (bodyStyle.OTransform !== undefined) {
            _.animType = 'OTransform';
            _.transformType = '-o-transform';
            _.transitionType = 'OTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.MozTransform !== undefined) {
            _.animType = 'MozTransform';
            _.transformType = '-moz-transform';
            _.transitionType = 'MozTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.MozPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.webkitTransform !== undefined) {
            _.animType = 'webkitTransform';
            _.transformType = '-webkit-transform';
            _.transitionType = 'webkitTransition';
            if (bodyStyle.perspectiveProperty === undefined && bodyStyle.webkitPerspective === undefined) _.animType = false;
        }
        if (bodyStyle.msTransform !== undefined) {
            _.animType = 'msTransform';
            _.transformType = '-ms-transform';
            _.transitionType = 'msTransition';
            if (bodyStyle.msTransform === undefined) _.animType = false;
        }
        if (bodyStyle.transform !== undefined && _.animType !== false) {
            _.animType = 'transform';
            _.transformType = 'transform';
            _.transitionType = 'transition';
        }
        _.transformsEnabled = _.options.useTransform && (_.animType !== null && _.animType !== false);
    };


    Slick.prototype.setSlideClasses = function(index) {

        var _ = this,
            centerOffset, allSlides, indexOffset, remainder;

        allSlides = _.$slider
            .find('.slick-slide')
            .removeClass('slick-active slick-center slick-current')
            .attr('aria-hidden', 'true');

        _.$slides
            .eq(index)
            .addClass('slick-current');

        if (_.options.centerMode === true) {

            centerOffset = Math.floor(_.options.slidesToShow / 2);

            if (_.options.infinite === true) {

                if (index >= centerOffset && index <= (_.slideCount - 1) - centerOffset) {

                    _.$slides
                        .slice(index - centerOffset, index + centerOffset + 1)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    indexOffset = _.options.slidesToShow + index;
                    allSlides
                        .slice(indexOffset - centerOffset + 1, indexOffset + centerOffset + 2)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

                if (index === 0) {

                    allSlides
                        .eq(allSlides.length - 1 - _.options.slidesToShow)
                        .addClass('slick-center');

                } else if (index === _.slideCount - 1) {

                    allSlides
                        .eq(_.options.slidesToShow)
                        .addClass('slick-center');

                }

            }

            _.$slides
                .eq(index)
                .addClass('slick-center');

        } else {

            if (index >= 0 && index <= (_.slideCount - _.options.slidesToShow)) {

                _.$slides
                    .slice(index, index + _.options.slidesToShow)
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else if (allSlides.length <= _.options.slidesToShow) {

                allSlides
                    .addClass('slick-active')
                    .attr('aria-hidden', 'false');

            } else {

                remainder = _.slideCount % _.options.slidesToShow;
                indexOffset = _.options.infinite === true ? _.options.slidesToShow + index : index;

                if (_.options.slidesToShow == _.options.slidesToScroll && (_.slideCount - index) < _.options.slidesToShow) {

                    allSlides
                        .slice(indexOffset - (_.options.slidesToShow - remainder), indexOffset + remainder)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                } else {

                    allSlides
                        .slice(indexOffset, indexOffset + _.options.slidesToShow)
                        .addClass('slick-active')
                        .attr('aria-hidden', 'false');

                }

            }

        }

        if (_.options.lazyLoad === 'ondemand' || _.options.lazyLoad === 'anticipated') {
            _.lazyLoad();
        }
    };

    Slick.prototype.setupInfinite = function() {

        var _ = this,
            i, slideIndex, infiniteCount;

        if (_.options.fade === true) {
            _.options.centerMode = false;
        }

        if (_.options.infinite === true && _.options.fade === false) {

            slideIndex = null;

            if (_.slideCount > _.options.slidesToShow) {

                if (_.options.centerMode === true) {
                    infiniteCount = _.options.slidesToShow + 1;
                } else {
                    infiniteCount = _.options.slidesToShow;
                }

                for (i = _.slideCount; i > (_.slideCount -
                        infiniteCount); i -= 1) {
                    slideIndex = i - 1;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex - _.slideCount)
                        .prependTo(_.$slideTrack).addClass('slick-cloned');
                }
                for (i = 0; i < infiniteCount  + _.slideCount; i += 1) {
                    slideIndex = i;
                    $(_.$slides[slideIndex]).clone(true).attr('id', '')
                        .attr('data-slick-index', slideIndex + _.slideCount)
                        .appendTo(_.$slideTrack).addClass('slick-cloned');
                }
                _.$slideTrack.find('.slick-cloned').find('[id]').each(function() {
                    $(this).attr('id', '');
                });

            }

        }

    };

    Slick.prototype.interrupt = function( toggle ) {

        var _ = this;

        if( !toggle ) {
            _.autoPlay();
        }
        _.interrupted = toggle;

    };

    Slick.prototype.selectHandler = function(event) {

        var _ = this;

        var targetElement =
            $(event.target).is('.slick-slide') ?
                $(event.target) :
                $(event.target).parents('.slick-slide');

        var index = parseInt(targetElement.attr('data-slick-index'));

        if (!index) index = 0;

        if (_.slideCount <= _.options.slidesToShow) {

            _.slideHandler(index, false, true);
            return;

        }

        _.slideHandler(index);

    };

    Slick.prototype.slideHandler = function(index, sync, dontAnimate) {

        var targetSlide, animSlide, oldSlide, slideLeft, targetLeft = null,
            _ = this, navTarget;

        sync = sync || false;

        if (_.animating === true && _.options.waitForAnimate === true) {
            return;
        }

        if (_.options.fade === true && _.currentSlide === index) {
            return;
        }

        if (sync === false) {
            _.asNavFor(index);
        }

        targetSlide = index;
        targetLeft = _.getLeft(targetSlide);
        slideLeft = _.getLeft(_.currentSlide);

        _.currentLeft = _.swipeLeft === null ? slideLeft : _.swipeLeft;

        if (_.options.infinite === false && _.options.centerMode === false && (index < 0 || index > _.getDotCount() * _.options.slidesToScroll)) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        } else if (_.options.infinite === false && _.options.centerMode === true && (index < 0 || index > (_.slideCount - _.options.slidesToScroll))) {
            if (_.options.fade === false) {
                targetSlide = _.currentSlide;
                if (dontAnimate !== true) {
                    _.animateSlide(slideLeft, function() {
                        _.postSlide(targetSlide);
                    });
                } else {
                    _.postSlide(targetSlide);
                }
            }
            return;
        }

        if ( _.options.autoplay ) {
            clearInterval(_.autoPlayTimer);
        }

        if (targetSlide < 0) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = _.slideCount - (_.slideCount % _.options.slidesToScroll);
            } else {
                animSlide = _.slideCount + targetSlide;
            }
        } else if (targetSlide >= _.slideCount) {
            if (_.slideCount % _.options.slidesToScroll !== 0) {
                animSlide = 0;
            } else {
                animSlide = targetSlide - _.slideCount;
            }
        } else {
            animSlide = targetSlide;
        }

        _.animating = true;

        _.$slider.trigger('beforeChange', [_, _.currentSlide, animSlide]);

        oldSlide = _.currentSlide;
        _.currentSlide = animSlide;

        _.setSlideClasses(_.currentSlide);

        if ( _.options.asNavFor ) {

            navTarget = _.getNavTarget();
            navTarget = navTarget.slick('getSlick');

            if ( navTarget.slideCount <= navTarget.options.slidesToShow ) {
                navTarget.setSlideClasses(_.currentSlide);
            }

        }

        _.updateDots();
        _.updateArrows();

        if (_.options.fade === true) {
            if (dontAnimate !== true) {

                _.fadeSlideOut(oldSlide);

                _.fadeSlide(animSlide, function() {
                    _.postSlide(animSlide);
                });

            } else {
                _.postSlide(animSlide);
            }
            _.animateHeight();
            return;
        }

        if (dontAnimate !== true) {
            _.animateSlide(targetLeft, function() {
                _.postSlide(animSlide);
            });
        } else {
            _.postSlide(animSlide);
        }

    };

    Slick.prototype.startLoad = function() {

        var _ = this;

        if (_.options.arrows === true && _.slideCount > _.options.slidesToShow) {

            _.$prevArrow.hide();
            _.$nextArrow.hide();

        }

        if (_.options.dots === true && _.slideCount > _.options.slidesToShow) {

            _.$dots.hide();

        }

        _.$slider.addClass('slick-loading');

    };

    Slick.prototype.swipeDirection = function() {

        var xDist, yDist, r, swipeAngle, _ = this;

        xDist = _.touchObject.startX - _.touchObject.curX;
        yDist = _.touchObject.startY - _.touchObject.curY;
        r = Math.atan2(yDist, xDist);

        swipeAngle = Math.round(r * 180 / Math.PI);
        if (swipeAngle < 0) {
            swipeAngle = 360 - Math.abs(swipeAngle);
        }

        if ((swipeAngle <= 45) && (swipeAngle >= 0)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle <= 360) && (swipeAngle >= 315)) {
            return (_.options.rtl === false ? 'left' : 'right');
        }
        if ((swipeAngle >= 135) && (swipeAngle <= 225)) {
            return (_.options.rtl === false ? 'right' : 'left');
        }
        if (_.options.verticalSwiping === true) {
            if ((swipeAngle >= 35) && (swipeAngle <= 135)) {
                return 'down';
            } else {
                return 'up';
            }
        }

        return 'vertical';

    };

    Slick.prototype.swipeEnd = function(event) {

        var _ = this,
            slideCount,
            direction;

        _.dragging = false;
        _.swiping = false;

        if (_.scrolling) {
            _.scrolling = false;
            return false;
        }

        _.interrupted = false;
        _.shouldClick = ( _.touchObject.swipeLength > 10 ) ? false : true;

        if ( _.touchObject.curX === undefined ) {
            return false;
        }

        if ( _.touchObject.edgeHit === true ) {
            _.$slider.trigger('edge', [_, _.swipeDirection() ]);
        }

        if ( _.touchObject.swipeLength >= _.touchObject.minSwipe ) {

            direction = _.swipeDirection();

            switch ( direction ) {

                case 'left':
                case 'down':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide + _.getSlideCount() ) :
                            _.currentSlide + _.getSlideCount();

                    _.currentDirection = 0;

                    break;

                case 'right':
                case 'up':

                    slideCount =
                        _.options.swipeToSlide ?
                            _.checkNavigable( _.currentSlide - _.getSlideCount() ) :
                            _.currentSlide - _.getSlideCount();

                    _.currentDirection = 1;

                    break;

                default:


            }

            if( direction != 'vertical' ) {

                _.slideHandler( slideCount );
                _.touchObject = {};
                _.$slider.trigger('swipe', [_, direction ]);

            }

        } else {

            if ( _.touchObject.startX !== _.touchObject.curX ) {

                _.slideHandler( _.currentSlide );
                _.touchObject = {};

            }

        }

    };

    Slick.prototype.swipeHandler = function(event) {

        var _ = this;

        if ((_.options.swipe === false) || ('ontouchend' in document && _.options.swipe === false)) {
            return;
        } else if (_.options.draggable === false && event.type.indexOf('mouse') !== -1) {
            return;
        }

        _.touchObject.fingerCount = event.originalEvent && event.originalEvent.touches !== undefined ?
            event.originalEvent.touches.length : 1;

        _.touchObject.minSwipe = _.listWidth / _.options
            .touchThreshold;

        if (_.options.verticalSwiping === true) {
            _.touchObject.minSwipe = _.listHeight / _.options
                .touchThreshold;
        }

        switch (event.data.action) {

            case 'start':
                _.swipeStart(event);
                break;

            case 'move':
                _.swipeMove(event);
                break;

            case 'end':
                _.swipeEnd(event);
                break;

        }

    };

    Slick.prototype.swipeMove = function(event) {

        var _ = this,
            edgeWasHit = false,
            curLeft, swipeDirection, swipeLength, positionOffset, touches, verticalSwipeLength;

        touches = event.originalEvent !== undefined ? event.originalEvent.touches : null;

        if (!_.dragging || _.scrolling || touches && touches.length !== 1) {
            return false;
        }

        curLeft = _.getLeft(_.currentSlide);

        _.touchObject.curX = touches !== undefined ? touches[0].pageX : event.clientX;
        _.touchObject.curY = touches !== undefined ? touches[0].pageY : event.clientY;

        _.touchObject.swipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curX - _.touchObject.startX, 2)));

        verticalSwipeLength = Math.round(Math.sqrt(
            Math.pow(_.touchObject.curY - _.touchObject.startY, 2)));

        if (!_.options.verticalSwiping && !_.swiping && verticalSwipeLength > 4) {
            _.scrolling = true;
            return false;
        }

        if (_.options.verticalSwiping === true) {
            _.touchObject.swipeLength = verticalSwipeLength;
        }

        swipeDirection = _.swipeDirection();

        if (event.originalEvent !== undefined && _.touchObject.swipeLength > 4) {
            _.swiping = true;
            event.preventDefault();
        }

        positionOffset = (_.options.rtl === false ? 1 : -1) * (_.touchObject.curX > _.touchObject.startX ? 1 : -1);
        if (_.options.verticalSwiping === true) {
            positionOffset = _.touchObject.curY > _.touchObject.startY ? 1 : -1;
        }


        swipeLength = _.touchObject.swipeLength;

        _.touchObject.edgeHit = false;

        if (_.options.infinite === false) {
            if ((_.currentSlide === 0 && swipeDirection === 'right') || (_.currentSlide >= _.getDotCount() && swipeDirection === 'left')) {
                swipeLength = _.touchObject.swipeLength * _.options.edgeFriction;
                _.touchObject.edgeHit = true;
            }
        }

        if (_.options.vertical === false) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        } else {
            _.swipeLeft = curLeft + (swipeLength * (_.$list.height() / _.listWidth)) * positionOffset;
        }
        if (_.options.verticalSwiping === true) {
            _.swipeLeft = curLeft + swipeLength * positionOffset;
        }

        if (_.options.fade === true || _.options.touchMove === false) {
            return false;
        }

        if (_.animating === true) {
            _.swipeLeft = null;
            return false;
        }

        _.setCSS(_.swipeLeft);

    };

    Slick.prototype.swipeStart = function(event) {

        var _ = this,
            touches;

        _.interrupted = true;

        if (_.touchObject.fingerCount !== 1 || _.slideCount <= _.options.slidesToShow) {
            _.touchObject = {};
            return false;
        }

        if (event.originalEvent !== undefined && event.originalEvent.touches !== undefined) {
            touches = event.originalEvent.touches[0];
        }

        _.touchObject.startX = _.touchObject.curX = touches !== undefined ? touches.pageX : event.clientX;
        _.touchObject.startY = _.touchObject.curY = touches !== undefined ? touches.pageY : event.clientY;

        _.dragging = true;

    };

    Slick.prototype.unfilterSlides = Slick.prototype.slickUnfilter = function() {

        var _ = this;

        if (_.$slidesCache !== null) {

            _.unload();

            _.$slideTrack.children(this.options.slide).detach();

            _.$slidesCache.appendTo(_.$slideTrack);

            _.reinit();

        }

    };

    Slick.prototype.unload = function() {

        var _ = this;

        $('.slick-cloned', _.$slider).remove();

        if (_.$dots) {
            _.$dots.remove();
        }

        if (_.$prevArrow && _.htmlExpr.test(_.options.prevArrow)) {
            _.$prevArrow.remove();
        }

        if (_.$nextArrow && _.htmlExpr.test(_.options.nextArrow)) {
            _.$nextArrow.remove();
        }

        _.$slides
            .removeClass('slick-slide slick-active slick-visible slick-current')
            .attr('aria-hidden', 'true')
            .css('width', '');

    };

    Slick.prototype.unslick = function(fromBreakpoint) {

        var _ = this;
        _.$slider.trigger('unslick', [_, fromBreakpoint]);
        _.destroy();

    };

    Slick.prototype.updateArrows = function() {

        var _ = this,
            centerOffset;

        centerOffset = Math.floor(_.options.slidesToShow / 2);

        if ( _.options.arrows === true &&
            _.slideCount > _.options.slidesToShow &&
            !_.options.infinite ) {

            _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');
            _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            if (_.currentSlide === 0) {

                _.$prevArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$nextArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - _.options.slidesToShow && _.options.centerMode === false) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            } else if (_.currentSlide >= _.slideCount - 1 && _.options.centerMode === true) {

                _.$nextArrow.addClass('slick-disabled').attr('aria-disabled', 'true');
                _.$prevArrow.removeClass('slick-disabled').attr('aria-disabled', 'false');

            }

        }

    };

    Slick.prototype.updateDots = function() {

        var _ = this;

        if (_.$dots !== null) {

            _.$dots
                .find('li')
                    .removeClass('slick-active')
                    .end();

            _.$dots
                .find('li')
                .eq(Math.floor(_.currentSlide / _.options.slidesToScroll))
                .addClass('slick-active');

        }

    };

    Slick.prototype.visibility = function() {

        var _ = this;

        if ( _.options.autoplay ) {

            if ( document[_.hidden] ) {

                _.interrupted = true;

            } else {

                _.interrupted = false;

            }

        }

    };

    $.fn.slick = function() {
        var _ = this,
            opt = arguments[0],
            args = Array.prototype.slice.call(arguments, 1),
            l = _.length,
            i,
            ret;
        for (i = 0; i < l; i++) {
            if (typeof opt == 'object' || typeof opt == 'undefined')
                _[i].slick = new Slick(_[i], opt);
            else
                ret = _[i].slick[opt].apply(_[i].slick, args);
            if (typeof ret != 'undefined') return ret;
        }
        return _;
    };

}));


/***/ }),

/***/ "./src/arquivos/js/app/components/ProductImages/ProductImagesTemplates.js":
/*!********************************************************************************!*\
  !*** ./src/arquivos/js/app/components/ProductImages/ProductImagesTemplates.js ***!
  \********************************************************************************/
/*! exports provided: buildThumbs, buildHighlight, videoContent, template */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildThumbs", function() { return buildThumbs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "buildHighlight", function() { return buildHighlight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "videoContent", function() { return videoContent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "template", function() { return template; });
/* harmony import */ var Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Helpers/vtexUtils */ "./src/arquivos/js/helpers/vtexUtils.js");
/* harmony import */ var _helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../helpers/MediasMatch */ "./src/arquivos/js/helpers/MediasMatch.js");


function buildThumbs(resizedImgs) {
  var videoID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var opts = arguments.length > 2 ? arguments[2] : undefined;
  var videoHTML = "";

  var _tumbSize = opts.isSmallerThen991Dinamic ? opts.imgThumb.mobile : opts.imgThumb;

  if (videoID !== null) {
    if (!opts.isSmallerThen991Dinamic) {
      videoHTML = "\n\t\t\t\t<li class=\"images__item images__item--video\">\n\t\t\t\t\t<img src=\"https://img.youtube.com/vi/".concat(videoID, "/default.jpg\" data-video=\"true\"/>\n\t\t\t\t</li>");
    } else {
      videoHTML = "\n\t\t\t<li class=\"images__item\">\n\t\t\t\t".concat(videoContent(), "\n\t\t\t</li>\n\t\t\t");
    }
  }

  return "\n\t\t<ul class=\"images__list\">\n\t\t\t".concat(resizedImgs.map(function (src) {
    return "<li class=\"images__item\">\n\t\t\t\t\t\t<img src=\"".concat(src, "\" style=\"height:").concat(_tumbSize.height, "px;width:").concat(_tumbSize.width, "px\"/>\n\t\t\t\t\t</li>");
  }).join(""), "\n\n\t\t\t").concat(videoHTML, "\n\t\t</ul>\n\t");
}
function buildHighlight(highlightImgSrc) {
  return "\n\t\t<figure class=\"images__figure\">\n\t\t\t<img itemprop=\"image\" src=\"".concat(highlightImgSrc, "\"\n\t\t\tdata-zoom-image=\"").concat(Object(Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__["alterarTamanhoImagemSrcVtex"])(highlightImgSrc, 1000, 1000), "\" />\n\t\t</figure>\n\t\t<figcaption class=\"images__caption\">Passe o mouse para ampliar a imagem</figcaption>\n\t");
}
function videoContent() {
  return "\n\t\t<div class=\"video-container\">\n\t\t\t<div id=\"video-player\"></div>\n\t\t</div>\n\t";
}
function template(_ref) {
  var videoID = _ref.videoID,
      opts = _ref.opts,
      resizedImgs = _ref.resizedImgs,
      highlightImgSrc = _ref.highlightImgSrc;
  return "\n\t<div class=\"images\" id=\"product-images\">\n\t\t<div class=\"images__list-wrapper\">\n\t\t\t".concat(buildThumbs(resizedImgs, videoID ? videoID : null, opts), "\n\t\t</div>\n\t\t<div class=\"images__highlight-container\" id=\"highlight-container\">\n\t\t\t<div class=\"images__highlight\" id=\"highlight-img\" >\n\t\t\t\t").concat(opts.imgHighlight.active && !opts.isSmallerThen991Dinamic ? buildHighlight(highlightImgSrc) : "", "\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t");
}

/***/ }),

/***/ "./src/arquivos/js/app/components/ProductImages/index.js":
/*!***************************************************************!*\
  !*** ./src/arquivos/js/app/components/ProductImages/index.js ***!
  \***************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ProductImages; });
/* harmony import */ var Lib_elevateZoom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Lib/elevateZoom */ "./src/arquivos/js/lib/elevateZoom.js");
/* harmony import */ var Lib_elevateZoom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(Lib_elevateZoom__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../helpers/vtexUtils */ "./src/arquivos/js/helpers/vtexUtils.js");
/* harmony import */ var _helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../helpers/MediasMatch */ "./src/arquivos/js/helpers/MediasMatch.js");
/* harmony import */ var _ProductImagesTemplates__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./ProductImagesTemplates */ "./src/arquivos/js/app/components/ProductImages/ProductImagesTemplates.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* eslint-disable indent */





var ProductImages = /*#__PURE__*/function () {
  function ProductImages(opts) {
    _classCallCheck(this, ProductImages);

    this.opts = {
      noScriptSelector: "#product-images-vtex",
      containerSelector: ".product__images",
      imgThumb: {
        width: 50,
        height: 50,
        mobile: {
          width: 560,
          height: 560
        }
      },
      imgHighlight: {
        active: true,
        width: 575,
        height: 575,
        mobile: {
          width: 580,
          height: 580
        }
      },
      hasVideo: true,
      isSmallerThen991Dinamic: _helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_2__["isSmallerThen991"],
      slickConfig: {
        arrows: true,
        slidesToShow: 6,
        slidesToScroll: 6,
        autoplay: true,
        autoplaySpeed: 6000,
        vertical: true,
        verticalSwiping: true,
        responsive: [{
          breakpoint: 992,
          settings: {
            slidesToShow: 1,
            slidesToScroll: 1,
            infinite: true,
            dots: true,
            vertical: false,
            verticalSwiping: false,
            arrows: false
          }
        }]
      }
    };
    Object.assign(this.opts, opts);
    if (this.opts.hasVideo) this.loadIFrameApi();
    this.container = $(this.opts.containerSelector);
    this.imgSrcs = this.getImagesSrc();
    this.render();
    this.events();
  }

  _createClass(ProductImages, [{
    key: "events",
    value: function events() {
      var _this = this;

      $(document).on("change-highlight-img", this.changeHighlightImg.bind(this)); // $(document).on("add-thumb-img", this.addImgToThumb.bind(this));

      $(document).on("change-all-imgs", this.changeAllImages.bind(this));
      var lastSizeState = _helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_2__["isSmallerThen991"];

      window.onresize = function () {
        _this.opts.isSmallerThen991Dinamic = window.matchMedia("(max-width:991px)").matches;

        if (lastSizeState !== _this.opts.isSmallerThen991Dinamic) {
          lastSizeState = _this.opts.isSmallerThen991Dinamic;

          _this.render();
        }
      };
    }
  }, {
    key: "loadIFrameApi",
    value: function loadIFrameApi() {
      var videoEL = $(".value-field.Video");

      if (videoEL.length !== 0) {
        this.videoID = videoEL.text();
        var tag = document.createElement("script");
        tag.src = "https://www.youtube.com/iframe_api";
        var firstScriptTag = document.getElementsByTagName("script")[0];
        firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);
        this.player;
      }
    }
  }, {
    key: "getImagesSrc",
    value: function getImagesSrc() {
      var imgsSrc = [];
      $($(this.opts.noScriptSelector).text()).find(".thumbs img").each(function (i, el) {
        imgsSrc.push(el.src);
      });
      return imgsSrc;
    }
  }, {
    key: "render",
    value: function render() {
      var html, highlightImgSrc;

      var _tumbSize = this.opts.isSmallerThen991Dinamic ? this.opts.imgThumb.mobile : this.opts.imgThumb;

      this.resizedImgs = this.imgSrcs.map(function (src) {
        return Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["alterarTamanhoImagemSrcVtex"])(src, _tumbSize.width, _tumbSize.height);
      });

      if (this.opts.imgHighlight.active) {
        var _imgHighlightSize = this.opts.isSmallerThen991Dinamic ? this.opts.imgHighlight.mobile : this.opts.imgHighlight;

        if (!this.opts.isSmallerThen991Dinamic) {
          highlightImgSrc = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["alterarTamanhoImagemSrcVtex"])(this.imgSrcs[0], _imgHighlightSize.width, _imgHighlightSize.height);
        }
      }

      html = Object(_ProductImagesTemplates__WEBPACK_IMPORTED_MODULE_3__["template"])({
        videoID: this.videoID,
        opts: this.opts,
        resizedImgs: this.resizedImgs,
        highlightImgSrc: highlightImgSrc
      });
      this.container.html(html);
      this.afterRender(this.container);
    }
  }, {
    key: "addZoom",
    value: function addZoom() {
      if (!this.opts.isSmallerThen991Dinamic) {
        this.container.find("#highlight-img img").elevateZoom({
          zoomType: "inner"
        });
      }
    }
  }, {
    key: "afterRender",
    value: function afterRender(container) {
      container.find(".images__list").slick(this.opts.slickConfig);

      if (this.opts.imgHighlight.active) {
        this.addZoom();
        container.find(".images__list img").click(function (e) {
          $(document).trigger("change-highlight-img", e.target);
        });
      }

      if (this.opts.isSmallerThen991Dinamic) {
        this.loadVideo();
      }
    }
  }, {
    key: "changeHighlightImg",
    value: function changeHighlightImg(e, target) {
      var $target = $(target);

      if ($target.data("video")) {
        this.videoHighlight();
      } else {
        this.imgHighlight($target);
      }
    }
  }, {
    key: "changeAllImages",
    value: function changeAllImages(e, _ref) {
      var imagesUrl = _ref.imagesUrl;
      this.imgSrcs = _toConsumableArray(imagesUrl);
      this.removeZoom();
      this.render();
    }
  }, {
    key: "imgHighlight",
    value: function () {
      var _imgHighlight = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee($target) {
        var src, img;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                src = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["alterarTamanhoImagemSrcVtex"])($target.attr("src"), this.opts.imgHighlight.width, this.opts.imgHighlight.height);
                $("#highlight-img").html(Object(_ProductImagesTemplates__WEBPACK_IMPORTED_MODULE_3__["buildHighlight"])(src));
                img = $("#highlight-img img");
                this.removeZoom();
                img.data("zoom-image", Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["alterarTamanhoImagemSrcVtex"])(src, 1000, 1000));
                this.addZoom();

              case 6:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function imgHighlight(_x) {
        return _imgHighlight.apply(this, arguments);
      }

      return imgHighlight;
    }()
  }, {
    key: "videoHighlight",
    value: function () {
      var _videoHighlight = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.removeZoom();
                $("#highlight-img").html(Object(_ProductImagesTemplates__WEBPACK_IMPORTED_MODULE_3__["videoContent"])());
                this.loadVideo();

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function videoHighlight() {
        return _videoHighlight.apply(this, arguments);
      }

      return videoHighlight;
    }()
  }, {
    key: "loadVideo",
    value: function loadVideo() {
      var _this2 = this;

      if (typeof YT === "undefined") {
        setTimeout(this.loadVideo.bind(this), 100);
      } else if (typeof YT.Player === "undefined") {
        setTimeout(this.loadVideo.bind(this), 100);
      } else {
        this.player = new YT.Player("video-player", {
          height: "480",
          width: "480",
          videoId: this.videoID,
          events: {
            onReady: function onReady(event) {
              if (!_this2.opts.isSmallerThen991Dinamic) event.target.playVideo();
            }
          }
        });
      }
    }
  }, {
    key: "removeZoom",
    value: function removeZoom(img) {
      this.container.find("#highlight-img img").removeData("elevateZoom");
      $(".zoomContainer").remove();
    }
  }, {
    key: "addImgToThumb",
    value: function addImgToThumb(e, target) {
      var _this3 = this;

      if (this.opts.isSmallerThen991Dinamic) {
        var src = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["alterarTamanhoImagemSrcVtex"])($(target).attr("src"), this.opts.imgThumb.mobile.Width, this.opts.imgThumb.mobile.Height);
        $("#product-images .images__list").remove();

        var _resizedImgs = this.resizedImgs.map(function (src) {
          return Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["alterarTamanhoImagemSrcVtex"])(src, _this3.opts.imgThumb.mobile.Width, _this3.opts.imgThumb.mobile.Height);
        });

        _resizedImgs.push(src);

        var newthumbs = Object(_ProductImagesTemplates__WEBPACK_IMPORTED_MODULE_3__["buildThumbs"])(_resizedImgs);
        $(".images__list-wrapper").append(newthumbs);
        $("#product-images .images__list").slick(this.opts.slickConfig).slick("slickGoTo", _resizedImgs.length - 1);
        $(".images__list img").click(function (e) {
          $(document).trigger("change-highlight-img", e.target);
        });
      }
    }
  }]);

  return ProductImages;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/components/ProductModules.js":
/*!**********************************************************!*\
  !*** ./src/arquivos/js/app/components/ProductModules.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ProductModules; });
/* harmony import */ var Lib_ComponentesProduto_index__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Lib/ComponentesProduto/index */ "./src/arquivos/js/lib/ComponentesProduto/index.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var ProductModules = /*#__PURE__*/function () {
  function ProductModules(opts) {
    _classCallCheck(this, ProductModules);

    this.opts = {
      priceSelector: (opts === null || opts === void 0 ? void 0 : opts.priceSelector) || '.product__price',
      qtdSelector: (opts === null || opts === void 0 ? void 0 : opts.qtdSelector) || '.product__qtd',
      buyBtnSelector: (opts === null || opts === void 0 ? void 0 : opts.buyBtnSelector) || '.product__buy-btn',
      skuSelector: (opts === null || opts === void 0 ? void 0 : opts.skuSelector) || '.product__skus',
      alertMeSelector: (opts === null || opts === void 0 ? void 0 : opts.alertMeSelector) || '.product__alert-me',
      skuJson: (opts === null || opts === void 0 ? void 0 : opts.skuJson) || window.skuJson,
      store: (opts === null || opts === void 0 ? void 0 : opts.store) || new Lib_ComponentesProduto_index__WEBPACK_IMPORTED_MODULE_0__["default"].ComponentStore()
    };
    this.store = this.opts.store;
    this.mapearSkus(this.opts.skuJson);
    this.preco(this.opts.priceSelector);
    this.quantidade(this.opts.qtdSelector);
    this.botaoDeCompra(this.opts.buyBtnSelector);
    this.selecaoSkus(this.opts.skuSelector, this.skuJson);
    this.aviseme(this.opts.alertMeSelector);
  }

  _createClass(ProductModules, [{
    key: "mapearSkus",
    value: function mapearSkus(skuJson) {
      this.skuJson = _mapearSkus(skuJson);
    }
  }, {
    key: "preco",
    value: function preco(elemento) {
      var moduloPreco = new Lib_ComponentesProduto_index__WEBPACK_IMPORTED_MODULE_0__["default"].ModuloPreco(elemento, this.store).configurar({
        precoDe: {
          ativo: true
        },
        precoPor: {
          ativo: true
        },
        parcelado: {
          ativo: true,
          auto: true
        },
        boleto: {
          ativo: false
        }
      });
      moduloPreco.desenhar();
    }
  }, {
    key: "selecaoSkus",
    value: function selecaoSkus(elemento, skuJsonAdultered) {
      var ModuloSkus = new Lib_ComponentesProduto_index__WEBPACK_IMPORTED_MODULE_0__["default"].ModuloSkusPorEspecificacoes(skuJsonAdultered, elemento, this.store); // ModuloSkus.elemento();

      ModuloSkus.desenhar().configurar();
      return ModuloSkus.setDefauls(true); // this.opcaoSkuIndisponivel();
    }
  }, {
    key: "quantidade",
    value: function quantidade(elemento) {
      var moduloSelect = new Lib_ComponentesProduto_index__WEBPACK_IMPORTED_MODULE_0__["default"].ModuloSelect(this.store);
      moduloSelect.configurar({});
      var moduloQuantidade = new Lib_ComponentesProduto_index__WEBPACK_IMPORTED_MODULE_0__["default"].ModuloQuantidade(elemento, this.store);
      moduloQuantidade.configurar({
        maxEstoque: 50
      });
      moduloQuantidade.moduloExibicao(moduloSelect);
      moduloQuantidade.desenhar();
    }
  }, {
    key: "botaoDeCompra",
    value: function botaoDeCompra(elemento) {
      var moduloBotaoDeCompra = new Lib_ComponentesProduto_index__WEBPACK_IMPORTED_MODULE_0__["default"].ModuloBotaoDeCompra(elemento, this.store);
      moduloBotaoDeCompra.configurar({
        botaoCompra: '<i class="sprite sprite-shopping-cart"></i>Adicionar ao carrinho',
        botaoSkuIndisponivel: 'Indisponível',
        msgAddCarrinhoSucesso: "\n\t\t\t<span>Adicionado ao <strong>Carrinho</strong></span>\n\t\t\t<a id=\"show-minicart\">Ver Carrinho</a>"
      });
      moduloBotaoDeCompra.desenhar();
    }
  }, {
    key: "aviseme",
    value: function aviseme(elemento) {
      var opcoes = {
        titulo: "\n\t\t\t<p class=\"alert-me__title\">Produto indispon\xEDvel</p>\n\t\t\t<p class=\"alert-me__text\">Avise-me quando chegar</p>",
        placeholderNome: 'Digite seu nome',
        placeholderEmail: 'Digite seu e-mail',
        btnSubmit: 'Enviar'
      };
      var moduloAviseMe = new Lib_ComponentesProduto_index__WEBPACK_IMPORTED_MODULE_0__["default"].ModuloAviseMe(elemento, this.store);
      moduloAviseMe.configurar(opcoes);
      moduloAviseMe.desenhar();
    }
  }]);

  return ProductModules;
}();
/**
 * Função para mapear skus sem especificações no skuJson
 * esse script usa o nome de cada sku como variação "cadastrada" para o funcionameto correto dos modulos de produto
 * @param {object} skuJson
 */




function _mapearSkus(skuJson) {
  var skuJsonAdultered = _objectSpread({}, skuJson);

  if (skuJson.dimensions.length == 0) {
    var variationName = 'variacao';
    var nameSkus = [];

    for (var i in skuJsonAdultered.skus) {
      if (skuJsonAdultered.skus.hasOwnProperty(i)) {
        var sku = skuJsonAdultered.skus[i];
        nameSkus.push(sku.skuname);
        sku.dimensions[variationName] = sku.skuname;
      }
    }

    skuJsonAdultered.dimensions.push(variationName);
    skuJsonAdultered.dimensionsInputType[variationName] = 'Combo';
    skuJsonAdultered.dimensionsMap[variationName] = nameSkus;
    skuJsonAdultered._scriptMapVariations = true;
  }

  return skuJsonAdultered;
}

/***/ }),

/***/ "./src/arquivos/js/app/components/ShippingCalc.js":
/*!********************************************************!*\
  !*** ./src/arquivos/js/app/components/ShippingCalc.js ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return ShippingCalc; });
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var ShippingCalc = /*#__PURE__*/function () {
  function ShippingCalc(opts) {
    _classCallCheck(this, ShippingCalc);

    this.opts = _objectSpread({
      cepInputId: "cep-form-input",
      resultContainerId: "cep-result",
      formId: "freight-form",
      isModal: true,
      container: $("#info-freight")
    }, opts);
    this.componentsState = this.opts.store.state;
    this.render();
  }

  _createClass(ShippingCalc, [{
    key: "render",
    value: function render() {
      var html = "\n\t\t\t<form class=\"freight\"id=\"".concat(this.opts.formId, "\">\n\t\t\t\t<input class=\"freight__input\" type=\"text\"id=\"").concat(this.opts.cepInputId, "\" placeholder=\"Digite seu CEP\" />\n\t\t\t\t<input class=\"freight__submit\" value=\"ok\" type=\"submit\" />\n\t\t\t</form>\n\t\t\t<div id=\"cep-notification\" class=\"cep__notification\"></div>\n\t\t\t<div class=\"cep__result\" id=\"").concat(this.opts.resultContainerId, "\"></div>\n\t\t");
      this.opts.container.html(html);
      this.afterRender();
    }
  }, {
    key: "afterRender",
    value: function afterRender() {
      $("#".concat(this.opts.formId)).submit(this.consultar.bind(this));
      $("#".concat(this.opts.cepInputId)).on("keypress", this.cepMask.bind(this));
      $("#".concat(this.opts.cepInputId)).on("change", this.cepMask.bind(this));
    }
  }, {
    key: "renderResult",
    value: function renderResult(res) {
      var data = this.parseResponseData(res);
      console.log(res);
      var itemsHtml = data.map(function (data) {
        return "\n\t\t\t<div class=\"cep-result__line\">\n\t\t\t\t<span class=\"cep-result__content\">\n\t\t\t\t\t".concat(data.servico, "\n\t\t\t\t</span>\n\t\t\t\t<span class=\"cep-result__content\">\n\t\t\t\t\t").concat(data.prazo, "\n\t\t\t\t</span>\n\t\t\t\t<span class=\"cep-result__content\">\n\t\t\t\t\t").concat(data.valor, "\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t");
      }).join("");
      var html = "\n\t\t\t<div class=\"cep-result\">\n\t\t\t\t<div class=\"cep-result__line\">\n\t\t\t\t\t<span class=\"cep-result__title\" >Servi\xE7o</span>\n\t\t\t\t\t<span class=\"cep-result__title\" >Prazo</span>\n\t\t\t\t\t<span class=\"cep-result__title\" >Valor</span>\n\t\t\t\t</div>\n\t\t\t\t".concat(itemsHtml, "\n\t\t\t</div>\n\t\t");
      $("#".concat(this.opts.resultContainerId)).html(html);
    }
  }, {
    key: "mascara",
    value: function mascara(t, mask) {
      var i = t.value.length;
      var saida = mask.substring(1, 0);
      var texto = mask.substring(i);

      if (texto.substring(0, 1) != saida) {
        t.value += texto.substring(0, 1);
      }
    }
  }, {
    key: "cepMask",
    value: function cepMask(e) {
      this.mascara(e.target, "#####-###");
    }
  }, {
    key: "parseResponseData",
    value: function parseResponseData(res) {
      var responseData = [];
      $(res).find("tbody tr").each(function (i, tr) {
        responseData.push({
          valor: $(tr).find("td").eq(0).text(),
          servico: $(tr).find("td").eq(1).text().split(",")[0],
          prazo: $(tr).find("td").eq(1).text().split("em")[1].split("para")[0]
        });
      });
      return responseData;
    }
  }, {
    key: "consultar",
    value: function consultar(e) {
      var _this = this;

      e.preventDefault();
      var sku = this.componentsState.selectedSku.sku;
      var qtd = this.componentsState.qtd;
      var cep = $("#".concat(this.opts.cepInputId)).val().replace(/[^a-zA-Z0-9]/g, "");
      var valid = this.validar(sku, qtd, cep);

      if (valid) {
        window.localStorage.setItem("cep-user", cep);
        var url = "/frete/calcula/".concat(sku, "?shippinCep=").concat(cep, "&quantity=").concat(qtd);
        $.ajax({
          method: "GET",
          url: url
        }).done(function (data) {
          _this.renderResult(data);
        }).fail(function (data) {
          console.log("Não encontramos frete correspondente");

          _this.notificar("Falha ao buscar cep", "erro");
        });
      } else {
        this.opts.container.find("#".concat(this.opts.cepInputId)).focus();
      }
    }
  }, {
    key: "validar",
    value: function validar(sku, qtd, cep) {
      var regexCEP = /^\d{2}.\d{3}-?\d{3}?$|^\d{5}-?\d{3}?$/;

      if (sku.length === 0) {
        this.notificar("Escolha um produto.", "erro");
        return false;
      }

      if (qtd.length === 0) {
        this.notificar("Escolha a quantidade.", "erro");
        return false;
      }

      if (cep.length === 0) {
        this.notificar("Informe um CEP.", "erro");
        return false;
      } else if (!regexCEP.test(cep)) {
        this.notificar("Informe um CEP valido.", "erro");
        return false;
      }

      return true;
    }
  }, {
    key: "notificar",
    value: function notificar(text, type) {
      var notificationContainer = $("#cep-notification");
      var html = "<p class=\"cep__notification cep__notification--".concat(type, "\">").concat(text, "</p>");
      notificationContainer.html(html);
      notificationContainer.show("slow");
      setTimeout(function () {
        notificationContainer.hide("slow");
      }, 4000);
    }
  }]);

  return ShippingCalc;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/functions/fale-conosco.js":
/*!*******************************************************!*\
  !*** ./src/arquivos/js/app/functions/fale-conosco.js ***!
  \*******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return FaleConosco; });
/* harmony import */ var _config_loja__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/loja */ "./src/arquivos/js/config/loja.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var FaleConosco = /*#__PURE__*/function () {
  function FaleConosco() {
    _classCallCheck(this, FaleConosco);

    this.events();
  }

  _createClass(FaleConosco, [{
    key: "events",
    value: function events() {
      var _this2 = this;

      this.submit = $('.fale-conosco__button');
      this.submit.on('click', function (e) {
        _this2.submit.attr("disabled", true);

        e.preventDefault();

        _this2.selectors();
      });
      $('.fale-conosco__tel').keydown(function (e) {
        _this2.maskTelephone(e);
      });
    }
  }, {
    key: "maskTelephone",
    value: function maskTelephone(event) {
      if (event.keyCode != 46 && event.keyCode != 8) {
        var telephoneValue = $('.fale-conosco__tel').val();

        if (telephoneValue.length == 4) {
          telephoneValue = telephoneValue + "-";
        }

        if (telephoneValue.length > 9) {
          telephoneValue = telephoneValue.replace('-', '');
          telephoneValue = telephoneValue.substring(0, 5) + '-' + telephoneValue.substring(5);
        }

        $('.fale-conosco__tel').val(telephoneValue);
      }
    }
  }, {
    key: "selectors",
    value: function selectors() {
      var _this3 = this;

      this.container = $('.fale-conosco');
      this.containerField = this.container.find('.fale-conosco__field');
      this.name = this.containerField.find('.fale-conosco__name');
      this.lastName = this.containerField.find('.fale-conosco__lastName');
      this.email = this.containerField.find('.fale-conosco__email');
      this.telephone = this.containerField.find('.fale-conosco__tel');
      this.ddd = this.containerField.find('.fale-conosco__ddd');
      this.subject = this.containerField.find('.fale-conosco__subject');
      this.message = this.containerField.find('#mensagem');

      if (this.validate()) {
        this.send();
      } else {
        setTimeout(function () {
          _this3.submit.attr("disabled", false);
        }, 3100);
      }
    }
  }, {
    key: "send",
    value: function send() {
      var _this4 = this;

      this.content = {
        'assunto': this.subject.val().trim(),
        'email': this.email.val().trim(),
        'mensagem': this.message.val(),
        'nome': this.name.val(),
        'sobrenome': this.lastName.val(),
        'telefone': '(' + this.ddd.val() + ') ' + this.telephone.val().trim()
      };
      $.ajax({
        headers: {
          'Accept': 'application/vnd.vtex.masterdata.v10+json',
          "Content-Type": "application/json"
        },
        type: "POST",
        data: JSON.stringify(this.content),
        url: "/api/dataentities/" + _config_loja__WEBPACK_IMPORTED_MODULE_0__["default"].faleConosco + "/documents/",
        beforeSend: function beforeSend(data, status, jqXHR) {
          _this4.submit.attr("disabled", true);
        }
      }).done(function (data, status, jqXHR) {
        _this4.throwSucess();

        _this4.submit.attr("disabled", false);
      }).fail(function (data, status, jqXHR) {
        _this4.throwSendFail();

        _this4.submit.attr("disabled", false);

        console.log(data, status);
      });
    }
  }, {
    key: "validate",
    value: function validate() {
      this.requiredValidate();

      if (this.containerField.find('.error').length > 0) {
        return false;
      } else {
        if (this.telephoneValidate() && this.emailValidate()) {
          return true;
        }
      }
    }
  }, {
    key: "requiredValidate",
    value: function requiredValidate() {
      var _this = this;

      this.containerField.find('input, textarea').each(function (i, el) {
        var element = $(el);

        if (element.val().length < 2) {
          element.addClass('error');

          _this.throwError(element);
        }
      });

      if (!this.telephoneValidate() && !this.telephone.hasClass('error')) {
        this.throwTelephoneError();
      }

      if (!this.emailValidate() && !this.email.hasClass('error')) {
        this.throwEmailError();
      }
    }
  }, {
    key: "telephoneValidate",
    value: function telephoneValidate() {
      var result = false;

      if (this.telephone.val().length < 12 && this.ddd.val().length < 4) {
        result = true;
      }

      if (result) {
        var regex = /\9?\d{4}-\d{4}/g;

        if (regex.exec(this.telephone.val()) !== null) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }, {
    key: "emailValidate",
    value: function emailValidate() {
      var regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      var result = regex.test(this.email.val());

      if (!result) {
        return false;
      }

      return true;
    }
  }, {
    key: "throwSucess",
    value: function throwSucess() {
      var sucessText = "\n\t\t<div class=\"fale-conosco__message__sucess\">\n\t\t\t<p>Obrigado!</p>\n\t\t\t<p>A sua mensagem foi enviada com sucesso.</p>\n\t\t </div>\n\t\t ";
      this.container.find('.fale-conosco__message').empty().append(sucessText);
    }
  }, {
    key: "throwSendFail",
    value: function throwSendFail() {
      var failText = "\n\t\t<div class=\"fale-conosco__message__fail\">\n\t\t\t<p>Devido a algum erro a sua mensagem n\xE3o pode ser enviada, por favor, tente novamente mais tarde.</p>\n\t\t </div>\n\t\t ";
      this.container.find('.fale-conosco__message').empty().append(failText);
    }
  }, {
    key: "throwError",
    value: function throwError(element) {
      var elementName = element.attr('name');

      var _this = this;

      var failText = "<span class=\"fale-conosco__message__error\">Preencha o ".concat(elementName, " </span>");
      element.parent('.fale-conosco__field').append(failText);
      setTimeout(function () {
        element.parent('.fale-conosco__field').find('.fale-conosco__message__error').fadeOut('slow', function () {
          this.remove();
          element.removeClass('error');
        });
      }, 3000);
    }
  }, {
    key: "throwEmailError",
    value: function throwEmailError() {
      var _this5 = this;

      var _this = this;

      var failText = "<span class=\"fale-conosco__message__error\">E-mail inv\xE1lido</span>";
      this.email.parent('.fale-conosco__field').append(failText);
      this.email.addClass('error');
      setTimeout(function () {
        _this5.email.parent('.fale-conosco__field').find('.fale-conosco__message__error').fadeOut('slow', function () {
          this.remove();

          _this.email.removeClass('error');
        });
      }, 3000);
    }
  }, {
    key: "throwTelephoneError",
    value: function throwTelephoneError() {
      var _this6 = this;

      var _this = this;

      var failText = "<span class=\"fale-conosco__message__error\">Telefone inv\xE1lido</span>";
      this.telephone.parent('.fale-conosco__field').append(failText);
      this.telephone.addClass('error');
      setTimeout(function () {
        _this6.telephone.parent('.fale-conosco__field').find('.fale-conosco__message__error').fadeOut('slow', function () {
          this.remove();

          _this.telephone.removeClass('error');
        });
      }, 3000);
    }
  }]);

  return FaleConosco;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/functions/prateleira.js":
/*!*****************************************************!*\
  !*** ./src/arquivos/js/app/functions/prateleira.js ***!
  \*****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _config_loja__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/loja */ "./src/arquivos/js/config/loja.js");
/* harmony import */ var _helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../helpers/vtexUtils */ "./src/arquivos/js/helpers/vtexUtils.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }



/* harmony default export */ __webpack_exports__["default"] = ({
  flagDeDesconto: function flagDeDesconto(elementos) {
    var $elementos = $(elementos);

    if ($elementos.length == 0) {
      $elementos = $(".produto-na-prateleira");
    }

    $elementos.not(".flagDeDesconto").each(function (index, el) {
      var percentualDeDesconto = calcularValorDeDesconto($(this));

      if (percentualDeDesconto >= _config_loja__WEBPACK_IMPORTED_MODULE_0__["default"].percentualDeDecontoMinimoParaFlag) {
        createFlagDesconto($(this), percentualDeDesconto);
      }

      $(this).addClass("flagDeDesconto");
    });
  },
  precoParcelado: function precoParcelado() {
    $(".produto-na-prateleira").not(".calc").each(function (i, el) {
      var execucao = new window.Promise(function (resolve, reject) {
        try {
          var $price = $(el).find(".price"),
              nParcelas = _config_loja__WEBPACK_IMPORTED_MODULE_0__["default"].price.numeroDeParcelas;
          var valorTotal = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["getPrice"])($price.find(".principal .value").text());
          var valorParcelado = valorTotal / nParcelas; //limpa o parcelamento atual

          $(el).find(".price .parcelado").remove();
          var htmlPrecoParcelado = criarHtmlPrecoParcelado(valorParcelado, nParcelas);
          $price.append(htmlPrecoParcelado);
          resolve();
        } catch (error) {
          reject();
        }
      });
      execucao.then(function () {
        $(el).addClass("calc");
      })["catch"](function () {
        $(el).find(".price .parcelado").remove();
      });
    });
  },
  precoBoleto: function precoBoleto() {
    $(".produto-na-prateleira").not(".boleto").each(function (i, el) {
      var execucao = new window.Promise(function (resolve, reject) {
        try {
          var $price = $(el).find(".price"),
              percentualBoleto = _config_loja__WEBPACK_IMPORTED_MODULE_0__["default"].price.percentualBoleto;
          var valorTotal = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["getPrice"])($price.find(".principal .value").text());
          var valorBoleto = valorTotal - valorTotal * percentualBoleto / 100; //limpa o parcelamento atual

          $(el).find(".price .boleto").remove();
          var htmlPrecoBoleto = criarHtmlPrecoBoleto(valorBoleto);
          $price.append(htmlPrecoBoleto);
          resolve();
        } catch (error) {
          reject();
        }
      });
      execucao.then(function () {
        $(el).addClass("boleto");
      })["catch"](function () {
        $(el).find(".price .boleto").remove();
      });
    });
  },
  atualziar: function () {
    var _atualziar = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              this.flagDeDesconto(); // this.precoParcelado();

              this.precoBoleto();

            case 2:
            case "end":
              return _context.stop();
          }
        }
      }, _callee, this);
    }));

    function atualziar() {
      return _atualziar.apply(this, arguments);
    }

    return atualziar;
  }()
});

function criarHtmlPrecoParcelado(valor, numeroDeParcelas) {
  var html,
      strValue = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["getPrice"])(valor);
  html = '<div class="parcelado">';
  html += '<span class="desconto-parcelado">';
  html += "<strong>";
  html += '<span class="numero-de-parcelas" > ' + numeroDeParcelas + "</span>X";
  html += '<span class="value"> R$ ' + strValue + "</span>";
  html += "</strong> sem juros";
  html += "</span>";
  html += "</div>";
  return html;
}

function criarHtmlPrecoBoleto(valor) {
  var html,
      strValue = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["getPrice"])(valor);
  html = '<div class="boleto">';
  html += '<span class="value"> R$ ' + strValue + "</span>";
  html += "<span> &#224; vista no boleto</span>";
  html += "</div>";
  return html;
}

function calcularValorDeDesconto($produto) {
  var precoAntigo = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["getPrice"])($produto.find(".antigo .value").text());
  var precoPromocao = Object(_helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_1__["getPrice"])($produto.find(".principal .value").text());
  if (!precoAntigo || !precoPromocao) return null;
  var floatDesconto = 100 - precoPromocao / precoAntigo * 100;
  return Math.ceil(floatDesconto);
}

function createFlagDesconto($elemento, percentualDeDesconto) {
  var $flag = $("<p />").addClass("flag produto-off").text("-".concat(percentualDeDesconto, "%"));
  $elemento.find(".flags-product .DiscountHightLight").append($flag);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/functions/slide.js":
/*!************************************************!*\
  !*** ./src/arquivos/js/app/functions/slide.js ***!
  \************************************************/
/*! exports provided: slideResponsivo, bannerHomeDesk, bannerHomeMobile, naveguePorCategorias, barraDeVantagens, produtoThumbs, navegacaoInstitucional, DepartamentSlider */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "slideResponsivo", function() { return slideResponsivo; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bannerHomeDesk", function() { return bannerHomeDesk; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bannerHomeMobile", function() { return bannerHomeMobile; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "naveguePorCategorias", function() { return naveguePorCategorias; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "barraDeVantagens", function() { return barraDeVantagens; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "produtoThumbs", function() { return produtoThumbs; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "navegacaoInstitucional", function() { return navegacaoInstitucional; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DepartamentSlider", function() { return DepartamentSlider; });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/*
 * 'slideResponsivo': Adiciona o passador (slider) na prateleira (shelf)
 *
 * @help http://kenwheeler.github.io/slick/
 */
function slideResponsivo(_x, _x2, _x3, _x4, _x5, _x6, _x7) {
  return _slideResponsivo.apply(this, arguments);
}

function _slideResponsivo() {
  _slideResponsivo = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(elementoPaiDaListaDeProdutos, slidesToShowDesktop, slidesToShow992, slidesToShow768, slidesToShow576, dots, arrows) {
    var mobileArrow,
        mobileDots,
        _args = arguments;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            mobileArrow = _args.length > 7 && _args[7] !== undefined ? _args[7] : false;
            mobileDots = _args.length > 8 && _args[8] !== undefined ? _args[8] : false;
            slidesToShowDesktop = typeof slidesToShowDesktop !== "undefined" ? slidesToShowDesktop : 4;
            slidesToShow992 = typeof slidesToShow992 !== "undefined" ? slidesToShow992 : 3;
            slidesToShow768 = typeof slidesToShow768 !== "undefined" ? slidesToShow768 : 2;
            slidesToShow576 = typeof slidesToShow576 !== "undefined" ? slidesToShow576 : 1;
            dots = typeof dots !== "undefined" ? dots : false;
            arrows = typeof arrows !== "undefined" ? arrows : true;
            $(".helperComplement").remove();
            $(elementoPaiDaListaDeProdutos).each(function (i) {
              $(this).find("ul").eq(0).slick({
                lazyLoad: "ondemand",
                dots: dots,
                arrows: arrows,
                infinite: true,
                slidesToShow: slidesToShowDesktop,
                slidesToScroll: slidesToShowDesktop,
                speed: 500,
                responsive: [{
                  breakpoint: 992,
                  settings: {
                    lazyLoad: "ondemand",
                    slidesToShow: slidesToShow992,
                    slidesToScroll: slidesToShow992,
                    infinite: true
                  }
                }, {
                  breakpoint: 768,
                  settings: {
                    dots: mobileDots,
                    lazyLoad: "ondemand",
                    slidesToShow: slidesToShow768,
                    slidesToScroll: slidesToShow768,
                    arrows: mobileArrow
                  }
                }, {
                  breakpoint: 576,
                  settings: {
                    dots: mobileDots,
                    lazyLoad: "ondemand",
                    slidesToShow: slidesToShow576,
                    slidesToScroll: slidesToShow576,
                    arrows: mobileArrow
                  }
                }]
              });
            });

          case 10:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _slideResponsivo.apply(this, arguments);
}

function bannerHomeDesk(elementoPaiDoBanners) {
  var $elemento = typeof elementoPaiDoBanners !== "undefined" ? $(elementoPaiDoBanners) : $(".main-gallery");
  var configDesktop = {
    dots: true,
    arrows: true,
    pauseOnHover: false,
    autoplay: true,
    autoplaySpeed: 6000
  };
  $elemento.find(".banner-desktop").slick(configDesktop);
}
function bannerHomeMobile(elementoPaiDoBanners) {
  var $elemento = typeof elementoPaiDoBanners !== "undefined" ? $(elementoPaiDoBanners) : $(".main-gallery");
  var configMobile = {
    dots: true,
    arrows: true,
    pauseOnHover: false,
    autoplay: true,
    autoplaySpeed: 6000
  };
  $elemento.find(".banner-mobile").slick(configMobile);
}
function naveguePorCategorias(elementoPaiDoBanners) {
  var $elemento = typeof elementoPaiDoBanners !== "undefined" ? $(elementoPaiDoBanners) : $(".main-gallery");
  $elemento.slick({
    dots: false,
    arrows: false,
    infinite: true,
    slidesToShow: 4,
    slidesToScroll: 4,
    speed: 500,
    responsive: [{
      breakpoint: 992,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3,
        infinite: false
      }
    }, {
      breakpoint: 768,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 2,
        infinite: false,
        autoplay: false,
        autoplaySpeed: 2000
      }
    }]
  });
}
function barraDeVantagens(barraDeVantagens) {
  var $elemento = typeof barraDeVantagens !== "undefined" ? $(barraDeVantagens) : $(".main-gallery");
  $elemento.slick({
    autoplay: false,
    autoplaySpeed: 3000,
    dots: false,
    arrows: false,
    infinite: false,
    slidesToShow: 3,
    slidesToScroll: 3,
    speed: 500,
    variableWidth: true,
    responsive: [{
      breakpoint: 992,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3
      }
    }, {
      breakpoint: 768,
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1
      }
    }]
  });
}
function produtoThumbs(thumbs) {
  var $elemento = typeof thumbs !== "undefined" ? $(thumbs) : $(".main-gallery");
  $elemento.slick({
    autoplay: false,
    lazyLoad: "ondemand",
    dots: false,
    arrows: false,
    infinite: true,
    slidesToShow: 5,
    slidesToScroll: 5,
    speed: 500,
    responsive: [{
      breakpoint: 992,
      settings: {
        slidesToShow: 4,
        slidesToScroll: 4
      }
    }, {
      breakpoint: 768,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3
      }
    }]
  });
}
function navegacaoInstitucional(elemento) {
  var $elemento = typeof elemento !== "undefined" ? $(elemento) : $(".navegacao-institucional");
  $elemento.slick({
    autoplay: false,
    autoplaySpeed: 3000,
    dots: false,
    arrows: false,
    infinite: false,
    slidesToShow: 6,
    slidesToScroll: 6,
    speed: 500,
    variableWidth: true,
    responsive: [{
      breakpoint: 992,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3
      }
    }, {
      breakpoint: 768,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 2
      }
    }]
  });
}
function DepartamentSlider(elementoPaiDoBanners, arrows) {
  var $elemento = typeof elementoPaiDoBanners !== "undefined" ? $(elementoPaiDoBanners) : $(".departament_slider");
  $elemento.slick({
    dots: false,
    arrows: true,
    infinite: true,
    slidesToShow: 7,
    slidesToScroll: 1,
    speed: 500,
    responsive: [{
      breakpoint: 1200,
      settings: {
        slidesToShow: 6,
        slidesToScroll: 6,
        autoplay: true,
        autoplaySpeed: 2000
      }
    }, {
      breakpoint: 991,
      settings: {
        slidesToShow: 5,
        slidesToScroll: 5
      }
    }, {
      breakpoint: 768,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 2
      }
    }]
  });
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/functions/socialMedia.js":
/*!******************************************************!*\
  !*** ./src/arquivos/js/app/functions/socialMedia.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return socialMeidia; });
function socialMeidia(url, productName) {
  $("#facebook-link").click(function (e) {
    e.preventDefault();
    window.open("https://www.facebook.com/sharer/sharer.php?u=" + url);
    return false;
  });
  $("#twitter-link").click(function () {
    window.open("https://twitter.com/intent/tweet?text=%20Gostei%20desse%20produto " + productName + ":%20 " + url);
    return false;
  });
  $("#pinterest-link").click(function () {
    window.open("https://pinterest.com/pin/create/button/?url=" + url + "/&media=&description=");
    return false;
  });
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/index.js":
/*!**************************************!*\
  !*** ./src/arquivos/js/app/index.js ***!
  \**************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_Container__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/Container */ "./src/arquivos/js/core/Container.js");
/* harmony import */ var _config_cart__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../config/cart */ "./src/arquivos/js/config/cart.js");
/* harmony import */ var _partials_MainMenu__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./partials/MainMenu */ "./src/arquivos/js/app/partials/MainMenu.js");
/* harmony import */ var _partials_MenuContents__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./partials/MenuContents */ "./src/arquivos/js/app/partials/MenuContents.js");
/* harmony import */ var _partials_SideMenu__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./partials/SideMenu */ "./src/arquivos/js/app/partials/SideMenu.js");
/* harmony import */ var _partials_Cart__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./partials/Cart */ "./src/arquivos/js/app/partials/Cart.js");
/* harmony import */ var _partials_FreightBar__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./partials/FreightBar */ "./src/arquivos/js/app/partials/FreightBar.js");
/* harmony import */ var _partials_Login__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./partials/Login */ "./src/arquivos/js/app/partials/Login.js");
/* harmony import */ var _partials_Promocao__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./partials/Promocao */ "./src/arquivos/js/app/partials/Promocao.js");
/* harmony import */ var _partials_Newsletter__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./partials/Newsletter */ "./src/arquivos/js/app/partials/Newsletter.js");
/* harmony import */ var _partials_Footer__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./partials/Footer */ "./src/arquivos/js/app/partials/Footer.js");
/* harmony import */ var _partials_NetReviewsPrateleira__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./partials/NetReviewsPrateleira */ "./src/arquivos/js/app/partials/NetReviewsPrateleira.js");
/* harmony import */ var _partials_HomeDepartamentSlide__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./partials/HomeDepartamentSlide */ "./src/arquivos/js/app/partials/HomeDepartamentSlide.js");
/* harmony import */ var _partials_DepartamentSlide__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./partials/DepartamentSlide */ "./src/arquivos/js/app/partials/DepartamentSlide.js");
/* harmony import */ var _partials_infoDepartament__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./partials/infoDepartament */ "./src/arquivos/js/app/partials/infoDepartament.js");
/* harmony import */ var _pages_Geral__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./pages/Geral */ "./src/arquivos/js/app/pages/Geral.js");
/* harmony import */ var _pages_Home__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./pages/Home */ "./src/arquivos/js/app/pages/Home.js");
/* harmony import */ var _pages_Categoria__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./pages/Categoria */ "./src/arquivos/js/app/pages/Categoria.js");
/* harmony import */ var _pages_Produto__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./pages/Produto */ "./src/arquivos/js/app/pages/Produto/index.js");
/* harmony import */ var _pages_Institucional__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! ./pages/Institucional */ "./src/arquivos/js/app/pages/Institucional.js");
/* harmony import */ var _pages_Erro__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! ./pages/Erro */ "./src/arquivos/js/app/pages/Erro.js");
/* harmony import */ var _pages_Login__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! ./pages/Login */ "./src/arquivos/js/app/pages/Login.js");
/* harmony import */ var _functions_fale_conosco__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! ./functions/fale-conosco */ "./src/arquivos/js/app/functions/fale-conosco.js");
/* harmony import */ var _components_ProductImages__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! ./components/ProductImages */ "./src/arquivos/js/app/components/ProductImages/index.js");
























var app = new _core_Container__WEBPACK_IMPORTED_MODULE_0__["default"]({
  appName: "template",
  components: [_pages_Geral__WEBPACK_IMPORTED_MODULE_15__["default"], _partials_MainMenu__WEBPACK_IMPORTED_MODULE_2__["default"], _partials_MenuContents__WEBPACK_IMPORTED_MODULE_3__["default"], _partials_SideMenu__WEBPACK_IMPORTED_MODULE_4__["default"], _partials_Cart__WEBPACK_IMPORTED_MODULE_5__["default"], _partials_FreightBar__WEBPACK_IMPORTED_MODULE_6__["default"], _partials_Login__WEBPACK_IMPORTED_MODULE_7__["default"], _partials_Promocao__WEBPACK_IMPORTED_MODULE_8__["default"], _partials_Newsletter__WEBPACK_IMPORTED_MODULE_9__["default"], _partials_Footer__WEBPACK_IMPORTED_MODULE_10__["default"]],
  pages: [{
    bodyClass: "home",
    components: [_pages_Home__WEBPACK_IMPORTED_MODULE_16__["default"], _partials_NetReviewsPrateleira__WEBPACK_IMPORTED_MODULE_11__["default"], _partials_HomeDepartamentSlide__WEBPACK_IMPORTED_MODULE_12__["default"]]
  }, {
    bodyClass: "categoria",
    components: [_pages_Categoria__WEBPACK_IMPORTED_MODULE_17__["default"], _partials_NetReviewsPrateleira__WEBPACK_IMPORTED_MODULE_11__["default"], _partials_DepartamentSlide__WEBPACK_IMPORTED_MODULE_13__["default"], _partials_infoDepartament__WEBPACK_IMPORTED_MODULE_14__["default"]]
  }, {
    bodyClass: "produto",
    components: [_pages_Produto__WEBPACK_IMPORTED_MODULE_18__["default"], _components_ProductImages__WEBPACK_IMPORTED_MODULE_23__["default"], _partials_NetReviewsPrateleira__WEBPACK_IMPORTED_MODULE_11__["default"]]
  }, {
    bodyClass: "erro",
    components: [_pages_Erro__WEBPACK_IMPORTED_MODULE_20__["default"]]
  }, {
    bodyClass: "login",
    components: [_pages_Login__WEBPACK_IMPORTED_MODULE_21__["default"]]
  }, {
    bodyClass: "institucional",
    components: [_pages_Institucional__WEBPACK_IMPORTED_MODULE_19__["default"]]
  }, {
    bodyClass: "fale-conosco",
    components: [_functions_fale_conosco__WEBPACK_IMPORTED_MODULE_22__["default"]]
  }]
});
app.bind(_partials_Cart__WEBPACK_IMPORTED_MODULE_5__["default"].name, _config_cart__WEBPACK_IMPORTED_MODULE_1__["default"]);
app.bind(_partials_Newsletter__WEBPACK_IMPORTED_MODULE_9__["default"].name, {
  elemento: ".news-form",
  textButtom: "Enviar"
});
/* harmony default export */ __webpack_exports__["default"] = (app);

/***/ }),

/***/ "./src/arquivos/js/app/pages/Categoria.js":
/*!************************************************!*\
  !*** ./src/arquivos/js/app/pages/Categoria.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Categoria; });
/* harmony import */ var _lib_smartResearch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/smartResearch */ "./src/arquivos/js/lib/smartResearch.js");
/* harmony import */ var _lib_smartResearch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_smartResearch__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _functions_prateleira__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../functions/prateleira */ "./src/arquivos/js/app/functions/prateleira.js");
/* harmony import */ var _helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../helpers/MediasMatch */ "./src/arquivos/js/helpers/MediasMatch.js");
/* harmony import */ var _partials_Overlay__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../partials/Overlay */ "./src/arquivos/js/app/partials/Overlay.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }





/*
 * paginaDeCategoria
 * Página 'utilizadas': categoria, derpartamento e resultado de resultado-busca.
 */

var Categoria = /*#__PURE__*/function () {
  function Categoria() {
    _classCallCheck(this, Categoria);

    this.overlay = new _partials_Overlay__WEBPACK_IMPORTED_MODULE_3__["default"]();
    this.selectors();
    this.events();
    this.reposicionarSelectDeOrdenacao();

    if (_helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_2__["isSmallerThen768"]) {
      this.filterMobileExtraInfo();
    }

    this.smartResearch();
  }

  _createClass(Categoria, [{
    key: "selectors",
    value: function selectors() {
      this.filter = $(".filtrosCategoria");
      this.openFilterButton = $("#open-filter-button");
      this.closeFilterButton = $("#close-filter-button, .aply-filter-btn");
    }
  }, {
    key: "events",
    value: function events() {
      this.openFilterButton.click(this.openMobileFilter.bind(this));
      this.closeFilterButton.click(this.closeMobileFilter.bind(this));
      this.overlay.addClickHandle(this.closeMobileFilter.bind(this));
    }
  }, {
    key: "openMobileFilter",
    value: function openMobileFilter() {
      this.filter.addClass("mobile-open");
      this.overlay.show();
    }
  }, {
    key: "closeMobileFilter",
    value: function closeMobileFilter() {
      this.filter.removeClass("mobile-open");
      this.overlay.hide();
    }
  }, {
    key: "filterMobileExtraInfo",
    value: function filterMobileExtraInfo() {
      var atualizarContagemDeFiltrosAtivos = function atualizarContagemDeFiltrosAtivos() {
        var opcoesFiltro = $(".search-multiple-navigator .multi-search-checkbox");
        var qtd = 0;

        for (var i in opcoesFiltro) {
          var opcao = opcoesFiltro[i];

          if (opcao.checked) {
            qtd++;
          }
        }

        var button = $("#open-filter-button");

        if (qtd > 0) {
          button.find("span").remove();
          $("<span/>", {
            text: "(" + qtd + ")"
          }).appendTo(button);
          $(".categoria__topoResultado .clear-filter-btn").addClass("active");
        } else {
          button.find("span").remove();
          $(".categoria__topoResultado .clear-filter-btn").removeClass("active");
        }
      }; //Para browsers que mantém os checkboxes selecionados ao atualizar a página


      atualizarContagemDeFiltrosAtivos();
      $(".aply-filter-btn").on("click", function () {
        atualizarContagemDeFiltrosAtivos();
      });
      $(".categoria__topoResultado .clear-filter-btn").on("click", function () {
        $("#open-filter-button").find("span").remove();
        $(".multi-search-checkbox").each(function () {
          if ($(this).is(":checked")) {
            $(this).attr("checked", false).trigger("change");
          }
        });
        $(this).removeClass("active");
      });
    }
  }, {
    key: "reposicionarSelectDeOrdenacao",
    value: function reposicionarSelectDeOrdenacao() {
      $(".orderBy").eq(0).appendTo(".categoria__topoResultado .opcoes-resultado");
    }
  }, {
    key: "smartResearch",
    value: function smartResearch() {
      if (_helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_2__["isSmallerThen768"]) {
        $(".navigation-tabs input[type='checkbox']").vtexSmartResearch({
          menuDepartament: ".menu-departamento",
          loadContent: ".categoria__produtosCategoria [id^=ResultItems]",
          shelfClass: "[class$=colunas]",
          mergeMenu: false,
          authorizeScroll: function authorizeScroll() {
            return false;
          },
          authorizeUpdate: function authorizeUpdate() {
            return true;
          },
          emptySearchMsg: "<h3>Não encontramos nenhum resultado para seu filtro!</h3>",
          clearButtonClass: ".clear-filter-btn",
          infinitScroll: false,
          loadMoreText: "Ver mais",
          filterOnChange: false,
          filterButtonClass: ".aply-filter-btn"
        });
      } else {
        $(".navigation-tabs input[type='checkbox']").vtexSmartResearch({
          menuDepartament: ".menu-departamento",
          loadContent: ".categoria__produtosCategoria [id^=ResultItems]",
          shelfClass: "[class$=colunas]",
          mergeMenu: false,
          authorizeScroll: function authorizeScroll() {
            return false;
          },
          authorizeUpdate: function authorizeUpdate() {
            return true;
          },
          emptySearchMsg: "<h3>Não encontramos nenhum resultado para seu filtro!</h3>",
          clearButtonClass: ".clear-filter-btn",
          infinitScroll: false,
          loadMoreText: "Ver mais"
        });
      }

      $(document).on("vsr-request-end", _functions_prateleira__WEBPACK_IMPORTED_MODULE_1__["default"].atualziar.bind(_functions_prateleira__WEBPACK_IMPORTED_MODULE_1__["default"]));
      $(window).on("finished-upadte-filter", _functions_prateleira__WEBPACK_IMPORTED_MODULE_1__["default"].atualziar.bind(_functions_prateleira__WEBPACK_IMPORTED_MODULE_1__["default"])); // desabilita o scroll automático

      history.scrollRestoration = "manual";
    }
  }]);

  return Categoria;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Erro.js":
/*!*******************************************!*\
  !*** ./src/arquivos/js/app/pages/Erro.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Erro; });
/* harmony import */ var _functions_slide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/slide */ "./src/arquivos/js/app/functions/slide.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var Erro = /*#__PURE__*/function () {
  function Erro() {
    _classCallCheck(this, Erro);

    this.init();
  }

  _createClass(Erro, [{
    key: "buscaVazia",
    value: function buscaVazia() {
      try {
        var word = decodeURI(window.location.search);
        word = word.replace('?ft=', '');
        word = word.split('&')[0];
        $('.busca-vazia .search-term').text("\"".concat(word, "\""));
      } catch (error) {
        console.log(error);
      }
    }
  }, {
    key: "createStructure",
    value: function createStructure() {
      $('.departament_slider .box-banner').each(function (index, element) {
        var title = $(this).find('img').attr('alt');
        $(this).append("<h3>".concat(title, "</h3>"));
      });
      Object(_functions_slide__WEBPACK_IMPORTED_MODULE_0__["DepartamentSlider"])('.departament_slider');
    }
  }, {
    key: "slickCarousel",
    value: function slickCarousel() {
      var $wrapper = $('.home__shelfProducts .prateleira').not('.slick-initialized');
      var $title = $wrapper.find('> h2');
      $title.insertBefore($wrapper);
      $wrapper.slick({
        prevArrow: '<button class="slick-prev"><img src="/arquivos/arrow-mz.png" alt="arrow"></button>',
        nextArrow: '<button class="slick-next"><img src="/arquivos/arrow-mz.png" alt="arrow"></button>',
        slidesToShow: 5,
        slidesToScroll: 1,
        infinite: true,
        draggable: false,
        arrows: true,
        dots: false,
        responsive: [{
          breakpoint: 601,
          settings: {
            slidesToShow: 2,
            dots: false,
            arrows: false
          }
        }]
      });
    }
  }, {
    key: "init",
    value: function init() {
      this.createStructure();
      this.buscaVazia();
      this.slickCarousel();
    }
  }]);

  return Erro;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Geral.js":
/*!********************************************!*\
  !*** ./src/arquivos/js/app/pages/Geral.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Geral; });
/* harmony import */ var _helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helpers/MediasMatch */ "./src/arquivos/js/helpers/MediasMatch.js");
/* harmony import */ var _functions_prateleira__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../functions/prateleira */ "./src/arquivos/js/app/functions/prateleira.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }


 // @TODO: Ratorar essa classe, dividar em classes menores para cada funcionalidade

var Geral = /*#__PURE__*/function () {
  function Geral() {
    _classCallCheck(this, Geral);

    this.init();
  }

  _createClass(Geral, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                this.checkLogin();
                this.scrollEvents();
                _context.next = 4;
                return this.selectors();

              case 4:
                if (_helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_0__["isSmallerThen768"]) {
                  this.bottomOptions();
                } else {
                  this.fixedHeader();
                }

                this.returnToTop();
                this.scrollTop();
                this.correcaoAutocomplete();
                _functions_prateleira__WEBPACK_IMPORTED_MODULE_1__["default"].atualziar();

              case 9:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "selectors",
    value: function () {
      var _selectors = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                this.header = $('header.header');
                this.mainMenu = $('.mainMenu');
                this.freightbar = $('.freightBar');
                this.mobileBottomBar = $('.mobileBottomBar');
                this.body = $(document.body);
                this.scrollToTop = $('.scroll-to-top');

              case 6:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function selectors() {
        return _selectors.apply(this, arguments);
      }

      return selectors;
    }()
  }, {
    key: "checkLogin",
    value: function checkLogin() {
      var $wrapper = $('.mz-welcome-message-mobile');
      if ($wrapper.is('.ready')) return;

      function capitalize(str) {
        return str.charAt(0).toUpperCase() + str.substr(1);
      }

      $.ajax({
        url: '/no-cache/profileSystem/getProfile',
        dataType: 'json',
        success: function success(data) {
          try {
            if (data.IsUserDefined) {
              var emailReceived = data.Email;
              var nameUser = emailReceived.match(/([^{0-9}|.|@|-]+)/).pop();
              $('.login-conta .entrar').text('Bem vindo,');
              $('.login-conta .minha-conta').text(capitalize(nameUser));
              $('.welcome .bem-vindo').text('Bem vindo, ' + capitalize(nameUser));
              $('.welcome .cadastro').html("<a class='logout' href='/logout'>Sair</a>");
            } else {
              $(document.body).addClass('not-logged-user');
            }

            $wrapper.addClass('ready');
          } catch (e) {
            if (typeof console !== 'undefined' && typeof console.info === 'function') console.info('Ops, algo saiu errado com o login.', e.message);
          }
        }
      });
    }
  }, {
    key: "bottomOptions",
    value: function bottomOptions() {
      var _this = this;

      var offset = this.header.outerHeight();
      var bottomBarHeight = this.mobileBottomBar.outerHeight();
      $(window).scroll(function (event) {
        if ($(event.target).scrollTop() > offset) {
          _this.mobileBottomBar.addClass('mobileBottomBar--active');

          _this.body.css('padding-bottom', bottomBarHeight);
        } else {
          _this.mobileBottomBar.removeClass('mobileBottomBar--active');
        }
      });
    }
  }, {
    key: "fixedHeader",
    value: function fixedHeader() {
      var _this2 = this;

      var timer, scrollTop, selfScrollChangeCall;
      var headerHeight = this.header.outerHeight();
      var totalHeight = headerHeight + this.mainMenu.outerHeight() + (this.freightbar.outerHeight() || 51);

      var scrollChange = function scrollChange() {
        scrollTop = $(document).scrollTop();

        if (scrollTop > totalHeight) {
          _this2.header.addClass('fixed');

          $('.freightBar').addClass('fixed');

          _this2.body.css('padding-top', headerHeight);

          if (timer) {
            window.clearTimeout(timer);
          }

          timer = window.setTimeout(function () {
            $('.freightBar').addClass('fixed--shown');
            this.header.addClass('fixed--shown');

            if (!selfScrollChangeCall) {
              selfScrollChangeCall = true;
              window.setTimeout(scrollChange, 150);
            } else {
              selfScrollChangeCall = false;
            }
          }.bind(_this2), 50);
        } else {
          _this2.header.removeClass('fixed--shown');

          $('.freightBar').removeClass('fixed--shown');

          if (scrollTop <= headerHeight) {
            _this2.header.removeClass('fixed');

            $('.freightBar').removeClass('fixed');

            _this2.body.css('padding-top', 0);
          }
        }
      };

      $(document).scroll(scrollChange);
    }
  }, {
    key: "scrollTop",
    value: function scrollTop() {
      var _this3 = this;

      var offset = 200;
      var duration = 500;
      $(window).scroll(function () {
        if ($(_this3).scrollTop() > offset) {
          _this3.scrollToTop.fadeIn(duration);
        } else {
          _this3.scrollToTop.fadeOut(duration);
        }
      });
      this.scrollToTop.click(function (event) {
        event.preventDefault();
        $('html, body').animate({
          scrollTop: 0
        }, duration);
        return false;
      });
    }
  }, {
    key: "correcaoAutocomplete",
    value: function correcaoAutocomplete() {
      $('.fulltext-search-box').on('autocompleteopen', function (event, ui) {
        $('.ui-autocomplete.ui-menu').addClass('autocompleteopen');
      });
      $('.selector').on('autocompleteclose', function (event, ui) {
        $('.ui-autocomplete.ui-menu').removeClass('autocompleteopen');
      });
    }
  }, {
    key: "scrollEvents",
    value: function scrollEvents() {
      var scrolling;
      $(document).on('scroll', function () {
        scrolling = true;
      }); // Throttle Scroll

      setInterval(function () {
        if (scrolling) {
          scrolling = false;
          $(window).trigger('MZ.scrollEvent', []);
        }
      }, 100); //triggando para iniciar posicionamento do menu

      $(document).trigger('scroll');
    }
  }, {
    key: "returnToTop",
    value: function returnToTop() {
      var $returnToTopBtn = $('.btn-voltar-topo');
      $(window).on('MZ.scrollEvent', function () {
        var windscrollTop = $(window).scrollTop();
        windscrollTop >= 1400 ? $returnToTopBtn.addClass('active') : $returnToTopBtn.removeClass('active');
      });
      $returnToTopBtn.find('button').on('click', function () {
        $('html, body').animate({
          scrollTop: 0
        }, 'fast');
      });
    }
  }]);

  return Geral;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Home.js":
/*!*******************************************!*\
  !*** ./src/arquivos/js/app/pages/Home.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _functions_slide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/slide */ "./src/arquivos/js/app/functions/slide.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var Home = /*#__PURE__*/function () {
  function Home() {
    _classCallCheck(this, Home);

    this.selectors();
    this.moveFirstShelfBanner();
    document.addEventListener("lazyloaded", function (e) {
      var classList = Array.from(e.target.classList);
      if (classList.includes("banner-desktop")) Object(_functions_slide__WEBPACK_IMPORTED_MODULE_0__["bannerHomeDesk"])(".home__mainGallery");
      if (classList.includes("banner-mobile")) Object(_functions_slide__WEBPACK_IMPORTED_MODULE_0__["bannerHomeMobile"])(".home__mainGallery");
    });
    Object(_functions_slide__WEBPACK_IMPORTED_MODULE_0__["slideResponsivo"])(".home__shelfProducts--full", 5, 3, 3, 2, false, false);
    Object(_functions_slide__WEBPACK_IMPORTED_MODULE_0__["slideResponsivo"])(".home__shelfProducts--half", 3, 3, 3, 2, false, false);
  }

  _createClass(Home, [{
    key: "selectors",
    value: function selectors() {
      this.firstShelfBanner = $(".home__firstShelfBanner");
      this.firstShelf = $(".home__firstShelf ul");
    }
  }, {
    key: "moveFirstShelfBanner",
    value: function moveFirstShelfBanner() {
      this.firstShelf.prepend(this.firstShelfBanner);
    }
  }]);

  return Home;
}();

/* harmony default export */ __webpack_exports__["default"] = (Home);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Institucional.js":
/*!****************************************************!*\
  !*** ./src/arquivos/js/app/pages/Institucional.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Institucional; });
/* harmony import */ var _lib_indique_a_loja__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/indique-a-loja */ "./src/arquivos/js/lib/indique-a-loja.js");
/* harmony import */ var _lib_indique_a_loja__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_indique_a_loja__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _lib_jquery_validate_min_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../lib/jquery.validate.min.js */ "./src/arquivos/js/lib/jquery.validate.min.js");
/* harmony import */ var _lib_jquery_validate_min_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_lib_jquery_validate_min_js__WEBPACK_IMPORTED_MODULE_1__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Institucional = /*#__PURE__*/function () {
  function Institucional() {
    _classCallCheck(this, Institucional);

    this.selectors();
    this.configureForm();
  }

  _createClass(Institucional, [{
    key: "selectors",
    value: function selectors() {
      this.form = $("#il-indique-a-loja");
    }
  }, {
    key: "configureForm",
    value: function configureForm() {
      this.form.vtexIndiqueALoja({
        nomeDoCliente: "Aramado",
        siglaDaEntidade: "IL",
        vtex_api_appKey: "",
        vtex_api_appToken: ""
      });
    }
  }]);

  return Institucional;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Login.js":
/*!********************************************!*\
  !*** ./src/arquivos/js/app/pages/Login.js ***!
  \********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return LoginPage; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var LoginPage = /*#__PURE__*/function () {
  function LoginPage() {
    _classCallCheck(this, LoginPage);

    this.selectors();
    this.createInterval();
  }

  _createClass(LoginPage, [{
    key: "selectors",
    value: function selectors() {
      this.closeButton = $(".login #vtexIdUI-auth-selector .modal-header .close");
    }
  }, {
    key: "createInterval",
    value: function createInterval() {
      var _this = this;

      this.interval = setInterval(function () {
        if (_this.closeButton.length) {
          clearInterval(_this.interval);

          _this.events();
        } else {
          _this.selectors();
        }
      }, 500);
    }
  }, {
    key: "events",
    value: function events() {
      this.closeButton.click(function () {
        window.history.back();
      });
    }
  }]);

  return LoginPage;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Produto/customDescription.js":
/*!****************************************************************!*\
  !*** ./src/arquivos/js/app/pages/Produto/customDescription.js ***!
  \****************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return customDescription; });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function customDescription(_ref) {
  var specData = _ref.specData,
      technicalDetailsContainer = _ref.technicalDetailsContainer,
      additionalInfoContainer = _ref.additionalInfoContainer;
  shortDescription(specData);
  department();
  productSpecs(specData, technicalDetailsContainer, additionalInfoContainer);
}

function shortDescription(specData) {
  var shortDescriptionText = specData.find(".value-field.Descricao-Curta").html();
  $(".product__short-description").html(shortDescriptionText);
}

function department() {
  return _department.apply(this, arguments);
}

function _department() {
  _department = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var depLink, depName, src;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            depLink = $(".bread-crumb a:eq(1)");
            depName = depLink.text();
            src = depLink.attr("href");
            $(".department__text span").text(depName);
            $("a.department__link").attr("href", src);

          case 5:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _department.apply(this, arguments);
}

function productSpecs(_x, _x2, _x3) {
  return _productSpecs.apply(this, arguments);
}

function _productSpecs() {
  _productSpecs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(specData, technicalDetailsContainer, additionalInfoContainer) {
    var technicalDetailsTable, aditionalInfoTable, breadCrumbLinks, refCode, categoryLinks, categoryHtml, codeHtml, linkContent, link;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            technicalDetailsTable = specData.find("table.Especificacoes-Tecnicas").clone();
            aditionalInfoTable = specData.find("table.Informacoes-Adicionais").clone(); //ignore o link da home

            breadCrumbLinks = $(".bread-crumb a:gt(0)");
            refCode = $(".product__title .productReference").text();
            categoryLinks = [];
            breadCrumbLinks.each(function (i, el) {
              categoryLinks.push(el.outerHTML);
            });
            categoryHtml = "\n\t\t\t<tr>\n\t\t\t\t<th class=\"category-field Category\">\n\t\t\t\t\tCategoria\n\t\t\t\t</th>\n\t\t\t\t<td class=\"value-field Category\">\n\t\t\t\t\t".concat(categoryLinks.map(function (a) {
              return a;
            }).join(""), "\n\t\t\t\t</td>\n\t\t\t</tr>\n\t\t");
            aditionalInfoTable.find("tbody").append(categoryHtml);
            codeHtml = "\n\t\t<tr>\n\t\t\t<th class=\"code-field Code\">\n\t\t\t\tC\xF3digo\n\t\t\t</th>\n\t\t\t<td class=\"value-field Code\">\n\t\t\t\t".concat(refCode, "\n\t\t\t</td>\n\t\t</tr>\t\t\n\t\t");
            technicalDetailsTable.find("tbody").append(codeHtml);
            technicalDetailsContainer.append(technicalDetailsTable);
            additionalInfoContainer.append(aditionalInfoTable);
            linkContent = $('.specification__table td.Instrucoes-de-montagem').text();
            link = "<a href='".concat(linkContent, "'> Download do PDF </a>");
            $('.specification__table td.Instrucoes-de-montagem').empty().append(link);

          case 15:
          case "end":
            return _context2.stop();
        }
      }
    }, _callee2);
  }));
  return _productSpecs.apply(this, arguments);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Produto/customPrice.js":
/*!**********************************************************!*\
  !*** ./src/arquivos/js/app/pages/Produto/customPrice.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return customPrice; });
/* harmony import */ var Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Helpers/vtexUtils */ "./src/arquivos/js/helpers/vtexUtils.js");
/* harmony import */ var Config_freeShipping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Config/freeShipping */ "./src/arquivos/js/config/freeShipping.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }



function customPrice() {
  return _customPrice.apply(this, arguments);
}

function _customPrice() {
  _customPrice = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
    var state, payments, freeShippingHtml, simplePrice, completePrice;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            state = this.store.state;
            payments = $(".product__payments").remove();
            freeShippingHtml = "\n\t\t\t<span class=\"by__msg\">\n\t\t\t\t<strong> Frete GR\xC1TIS</strong> em pedidos superiores a R$".concat(Config_freeShipping__WEBPACK_IMPORTED_MODULE_1__["default"].price.southAndSoutheast, ".\n\t\t\t\t<span class=\"freeShipping\">\n\t\t\t\t\tDetalhes\n\t\t\t\t\t").concat(Config_freeShipping__WEBPACK_IMPORTED_MODULE_1__["default"].conditionsHtml(), "\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t");
            simplePrice = "\n\t\t\t<strong class=\"by__value\">R$".concat(Object(Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__["getPrice"])(state.priceBy), "</strong>\n\t\t\t").concat(freeShippingHtml, "\n\t\t");
            completePrice = "\n\t\t\t<div class=\"price__of\">\n\t\t\t\t<span class=\"of__value\">\n\t\t\t\tR$ ".concat(Object(Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__["getPrice"])(state.priceOf), "\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<div class=\"price__by\">\n\t\t\t\t<span class=\"by__wrapper\">\n\t\t\t\t\t<strong class=\"by__value\">\n\t\t\t\t\t\tR$ ").concat(Object(Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__["getPrice"])(state.priceBy), "\n\t\t\t\t\t</strong>\n\t\t\t\t</span>\n\t\t\t</div>\n      <div class=\"price__divided\">\n        <span>\n          ou em at\xE9 ").concat(state.installments, "x de R$ ").concat(state.priceDivided, " sem juros\n        </span>\n      </div>\n\t\t\t<div class=\"d-block\">\n\t\t\t\t").concat(freeShippingHtml, "\n\t\t\t</div>\n\t\t");

            if (!state.selectedSku.available) {
              this.priceComplete.addClass("hidden");
              this.priceSimple.addClass("hidden");
            } else {
              this.priceComplete.removeClass("hidden");
              this.priceSimple.removeClass("hidden");
              this.priceComplete.html(completePrice);
              this.priceSimple.html(simplePrice);
            }

            $(".price__divided").append(payments);

          case 7:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, this);
  }));
  return _customPrice.apply(this, arguments);
}
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Produto/index.js":
/*!****************************************************!*\
  !*** ./src/arquivos/js/app/pages/Produto/index.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Produto; });
/* harmony import */ var Lib_elevateZoom__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Lib/elevateZoom */ "./src/arquivos/js/lib/elevateZoom.js");
/* harmony import */ var Lib_elevateZoom__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(Lib_elevateZoom__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var App_components_ShippingCalc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! App/components/ShippingCalc */ "./src/arquivos/js/app/components/ShippingCalc.js");
/* harmony import */ var App_components_ProductModules__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! App/components/ProductModules */ "./src/arquivos/js/app/components/ProductModules.js");
/* harmony import */ var Lib_ComponentesProduto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! Lib/ComponentesProduto */ "./src/arquivos/js/lib/ComponentesProduto/index.js");
/* harmony import */ var Config_freeShipping__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! Config/freeShipping */ "./src/arquivos/js/config/freeShipping.js");
/* harmony import */ var App_functions_slide__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! App/functions/slide */ "./src/arquivos/js/app/functions/slide.js");
/* harmony import */ var App_functions_socialMedia__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! App/functions/socialMedia */ "./src/arquivos/js/app/functions/socialMedia.js");
/* harmony import */ var _customPrice__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./customPrice */ "./src/arquivos/js/app/pages/Produto/customPrice.js");
/* harmony import */ var _customDescription__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./customDescription */ "./src/arquivos/js/app/pages/Produto/customDescription.js");
/* harmony import */ var _installmentCalc__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./installmentCalc */ "./src/arquivos/js/app/pages/Produto/installmentCalc.js");
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }












var Produto = /*#__PURE__*/function () {
  function Produto() {
    _classCallCheck(this, Produto);

    Object(App_functions_slide__WEBPACK_IMPORTED_MODULE_5__["slideResponsivo"])('.prateleira-de-produtos', 5, 3, 2, 2, false, true, true, true);
    this.selectedSkuCache = new Map();
    this.selectors();
    this.initProductComponents();
    this.events();
    this.createBestSellersShelfTitle();
    this.createQuickBuyBar();
    this.fixQuickBuyBar();
    this.fixQuickBuyBarMobile();
    this.movesImageInformation();
    this.movesDescriptionShort();
    this.quantitySelector();
    this.scrollEvents();
    this.menuSpecs();
    this.menuSpecsMobile();
    this.tipBar();
    this.buttonShareClick();
    this.buttonShare();
    Object(App_functions_socialMedia__WEBPACK_IMPORTED_MODULE_6__["default"])(encodeURIComponent(document.URL), document.title);
  }

  _createClass(Produto, [{
    key: "selectors",
    value: function selectors() {
      this.priceComplete = $('.product__price');
      this.priceSimple = $('.product-checkout__price');
      this.specData = $('#caracteristicas');
      this.technicalDetailsContainer = $('#spec-details');
      this.additionalInfoContainer = $('#spec-info');
      this.bestSellersShelf = $('.bestSellers');
    }
  }, {
    key: "events",
    value: function events() {
      this.store.events.subscribe('selectedSku:stateChange', _customPrice__WEBPACK_IMPORTED_MODULE_7__["default"].bind(this));
      this.store.events.subscribe('selectedSku:stateChange', this.changeImgs.bind(this));
    }
  }, {
    key: "initProductComponents",
    value: function initProductComponents() {
      this.store = new Lib_ComponentesProduto__WEBPACK_IMPORTED_MODULE_3__["default"].ComponentStore();
      this.modules = new App_components_ProductModules__WEBPACK_IMPORTED_MODULE_2__["default"]({
        store: this.store,
        priceSelector: '.nada'
      });
      this.freightCalc = new App_components_ShippingCalc__WEBPACK_IMPORTED_MODULE_1__["default"]({
        store: this.store
      });
      this.installmentCalc = new _installmentCalc__WEBPACK_IMPORTED_MODULE_9__["default"](this.store, '#other-payments');
      _customPrice__WEBPACK_IMPORTED_MODULE_7__["default"].call(this);
      Object(_customDescription__WEBPACK_IMPORTED_MODULE_8__["default"])({
        specData: this.specData,
        additionalInfoContainer: this.additionalInfoContainer,
        technicalDetailsContainer: this.technicalDetailsContainer
      });
      this.addFreeShippingFlag();
      this.changeShelfTitle();
      this.changeImgs('', this.store.state);
    }
  }, {
    key: "setDescriptionMeasures",
    value: function setDescriptionMeasures(e, state) {
      var _state$selectedSku$me = state.selectedSku.measures,
          weight = _state$selectedSku$me.weight,
          width = _state$selectedSku$me.width,
          height = _state$selectedSku$me.height,
          length = _state$selectedSku$me.length;
      var formattedMeasures = [weight, width, height, length].map(function (measure) {
        return measure.toFixed(1).replace('.', ',');
      });
      this.technicalDetailsContainer.find('.weight').text("".concat(formattedMeasures[0], " Kg"));
      this.technicalDetailsContainer.find('.dimensions').text("".concat(formattedMeasures[1], " x ").concat(formattedMeasures[2], " x ").concat(formattedMeasures[3], " cm"));
    }
  }, {
    key: "createBestSellersShelfTitle",
    value: function createBestSellersShelfTitle() {
      var productCategory = window.dataLayer[0].pageDepartment;
      var title = $('<h2/>', {
        text: "Mais vendidos em ".concat(productCategory)
      });
      this.bestSellersShelf.find('ul').before(title);
    }
  }, {
    key: "changeImgs",
    value: function () {
      var _changeImgs = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(e, state) {
        var _this = this;

        var selectedSku;
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                selectedSku = state.selectedSku;

                if (this.selectedSkuCache.has(selectedSku.sku)) {
                  $(document).trigger('change-all-imgs', this.selectedSkuCache.get(selectedSku.sku));
                } else {
                  $.ajax({
                    method: 'GET',
                    url: '/produto/sku/' + selectedSku.sku,
                    success: function success(res) {
                      var imagesUrl = res[0].Images.map(function (imgArr) {
                        return imgArr[0].Path;
                      });
                      $(document).trigger('change-all-imgs', {
                        imagesUrl: imagesUrl
                      });

                      _this.selectedSkuCache.set(selectedSku.sku, {
                        imagesUrl: imagesUrl
                      });
                    }
                  });
                }

              case 2:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function changeImgs(_x, _x2) {
        return _changeImgs.apply(this, arguments);
      }

      return changeImgs;
    }()
  }, {
    key: "addFreeShippingFlag",
    value: function addFreeShippingFlag() {
      if (this.store.state.priceBy > Config_freeShipping__WEBPACK_IMPORTED_MODULE_4__["default"].price.southAndSoutheast) {
        $('.product__flag .sprite').removeClass('d-none');
      }
    }
  }, {
    key: "changeShelfTitle",
    value: function changeShelfTitle() {
      $('.prateleira h2').each(function (index, element) {
        var prodName = $('.productName').html();
        var title = $(this).html();
        title = title.replace('este item', prodName);
        $(this).html(title);
      });
    }
  }, {
    key: "quantitySelector",
    value: function quantitySelector() {
      setTimeout(function () {
        $('.product__qtd').prepend('<div class="quantitySelector"><span class="minus">-</span><input type="text" value="1"/><span class="plus">+</span></div>');
        $('.minus').on('click', function () {
          var getQnty = Number($('.quantitySelector input').val());

          if (getQnty > 1) {
            $('.quantitySelector input').val(--getQnty);
            $('.qtd-selector .quantidade').val(getQnty);
            $('.quantidade').trigger('change');
          }
        });
        $('.plus').on('click', function () {
          var getQnty = Number($('.quantitySelector input').val());

          if (getQnty < 49) {
            $('.quantitySelector input').val(++getQnty);
            $('.qtd-selector .quantidade').val(getQnty);
            $('.quantidade').trigger('change');
          }
        });
        $('.quantitySelector input').on('input', function () {
          if (!$(this).val()) return;
          var getVal = $(this).val().replace(/[^0-9]/g, '').replace(/^0+/, '');
          var getMax = 49;

          if (getVal == '') {
            $(this).val(1);
            $('.qtd-selector .quantidade').val(1);
            $('.quantidade').trigger('change');
          } else {
            var getQnty = Number(getVal) > Number(getMax) ? getMax : getVal;
            $(this).val(getQnty);
            $('.qtd-selector .quantidade').val(getQnty);
            $('.quantidade').trigger('change');
          }
        });
      }, 250);
    }
  }, {
    key: "createQuickBuyBar",
    value: function createQuickBuyBar() {
      var getImage = "<img class=\"image\" src=\"".concat($('.images__figure img').attr('src'), "\" width=\"67px\" height=\"67px\"/>");
      var getName = $('.productName').html();
      var getPrice = $('.by__value').html();
      var getInstallment = $('.price__divided span').html();
      var displayQnt = '<div class="quantitySelector"><span class="minus">-</span><input type="text" value="1"/><span class="plus">+</span></div>';
      var buttonBuy = '<span class="buttonBuyQuick"><i class="sprite sprite-shopping-cart"></i>Adicionar ao carrinho</span>';
      var content = "\n      <div class=\"quickBuyBar\">\n        <div class=\"container\">\n          <div class=\"row\">\n            <div class=\"infos\">\n              ".concat(getImage, "\n              <p class=\"name\"><span>").concat(getName, "</span></p>\n            </div>\n            <div class=\"price\">\n              <p class=\"fullPrice\">").concat(getPrice, "</p>\n              <span class=\"divided\">").concat(getInstallment, "</p>\n            </div>\n            <div class=\"buttons\">\n              ").concat(displayQnt, "\n              ").concat(buttonBuy, "\n            </div>\n          </div>\n        </div>\n      </div>\n    ");
      $('body.produto .produto').prepend(content);
      setTimeout(function () {
        $('.quickBuyBar .image').attr('src', $('.images__figure img').attr('src'));
      }, 250);
      $('.buttonBuyQuick').on('click', function () {
        $('.product__qtd-btn-wrapper .btn-compra').trigger('click');
      });
    }
  }, {
    key: "scrollEvents",
    value: function scrollEvents() {
      var scrolling;
      $(document).on('scroll', function () {
        scrolling = true;
      }); // Throttle Scroll

      setInterval(function () {
        if (scrolling) {
          scrolling = false;
          $(window).trigger('MZ.scrollEvent', []);
        }
      }, 100); //triggando para iniciar posicionamento do menu

      $(document).trigger('scroll');
    }
  }, {
    key: "fixQuickBuyBar",
    value: function fixQuickBuyBar() {
      var isDesktop = $(window).width() >= 1200;
      if (!isDesktop) return;
      var $quickBuyBar = $('.quickBuyBar');
      var $nav = $('.product-content-grid');
      if (!$nav.length) return;
      var navOffset = $nav.offset().top;
      $(window).on('MZ.scrollEvent', function () {
        var windscroll = $(window).scrollTop();
        var quickBuyBarHeight = $quickBuyBar.outerHeight();

        if (windscroll >= navOffset - (quickBuyBarHeight - 44)) {
          $('body').addClass('mz-product-details-fixed');
          $nav.find('.scroll-node').each(function (index, title) {
            var $title = $(title);

            if ($title.position().top <= windscroll + (quickBuyBarHeight + 10)) {
              $('.quickBuyBar .menuInfos a.active').removeClass('active');
              $('.quickBuyBar .menuInfos a').eq(index).addClass('active');
            }
          });
        } else {
          $('body').removeClass('mz-product-details-fixed');
          $('.menuInfos a.active').removeClass('active');
          $('.product-content-grid .menuInfos a:first').addClass('active');
          $('.quickBuyBar .menuInfos a:first').addClass('active');
        }
      });
      $(document).on('click', '.menuInfos a[href^="#tab"], .menuInfos a[href="#info-review"]', function (e) {
        e.preventDefault();
        var $this = $(this);
        $('html, body').stop().animate({
          scrollTop: $($this.attr('href')).offset().top - ($quickBuyBar.outerHeight() - 2)
        }, 500);
      });
    }
  }, {
    key: "fixQuickBuyBarMobile",
    value: function fixQuickBuyBarMobile() {
      var isDesktop = $(window).width() >= 1200;
      if (isDesktop) return;
      $(window).on('MZ.scrollEvent', function () {
        var windscroll = $(window).scrollTop();

        if (windscroll >= 200) {
          $('body').addClass('mz-product-details-fixed');
        } else {
          $('body').removeClass('mz-product-details-fixed');
        }
      });
    }
  }, {
    key: "movesImageInformation",
    value: function movesImageInformation() {
      var isDesktop = $(window).width() >= 1200;
      if (isDesktop) return;
      $(window).on('load', function () {
        $('.product__grid ~ p:last').addClass('image__info').prependTo('.product__title');
      });
    }
  }, {
    key: "movesDescriptionShort",
    value: function movesDescriptionShort() {
      var $descriptionShort = $('.value-field.Descricao-Curta');
      var $descriptionShortWrapper = $('<div class="descricao-col-2"><h2>Vantagens</h2><ul id="vantagens"></ul></div>');
      var $descriptionShortText = $descriptionShort.text();
      if (!$descriptionShortText) return;
      var $descriptionShortArray = $descriptionShort.text().split('\n');
      $descriptionShortArray.forEach(function (item) {
        $descriptionShortWrapper.find('> ul').append('<li>' + item + '</li>');
      });
      $descriptionShortWrapper.insertAfter('.descricao-col-2:first');
    }
  }, {
    key: "menuSpecs",
    value: function menuSpecs() {
      var titlesToIgnore = ['Informações complementares'];
      $('h3.specification__subtitle').each(function (index, title) {
        $(title).text($(title).text().replace('» ', ''));
      });
      var isDesktop = $(window).width() >= 1200;
      if (!isDesktop) return;
      var count = 0;
      $('.product-content-grid').prepend('<div class="menuInfos container"><ul></ul></div>');
      $('.quickBuyBar').append('<div class="menuInfos row"><ul></ul></div>');
      $('.product__specification h3:visible').each(function (index, element) {
        $(element).attr('id', "tab_".concat(count)).addClass('scroll-node');
        var titles = $(element).html();
        $('.menuInfos ul').append("<li><a href='#tab_".concat(count, "'>").concat(titles, "</li>"));
        ++count;
      });
      $('.product__description__title:visible').each(function (index, element) {
        $(element).attr('id', "tab_".concat(count)).addClass('scroll-node');
        var titles = $(element).html();
        $('.menuInfos ul').append("<li><a href='#tab_".concat(count, "'>").concat(titles, "</li>"));
        ++count;
      });
      $('#info-description [class^="descricao-col"]:not(:first):not(.video-html-descricao) h2:visible').each(function (index, element) {
        var titles = $(element).html();

        if (!titles.includes(titlesToIgnore)) {
          $(element).attr('id', "tab_".concat(count)).addClass('scroll-node');
          $('.menuInfos ul').append("<li><a href='#tab_".concat(count, "'>").concat(titles, "</li>"));
        }

        ++count;
      });
      $('.quickBuyBar .menuInfos a:first').addClass('active');
      $(window).on('load', function () {
        if (!$('.NETREVIEWS_PRODUCT_REVIEWS').is(':empty')) {
          $('#info-review').addClass('scroll-node');
          $('.menuInfos ul').append('<li><a href="#info-review">Avaliações</li>');
        }
      });
    }
  }, {
    key: "menuSpecsMobile",
    value: function menuSpecsMobile() {
      var isDesktop = $(window).width() >= 1200;
      if (isDesktop) return;
      $('.productDescription h2:visible, .specification__content-wrapper > h3:visible').each(function (index, title) {
        var $title = $(title);

        if ($title.find('~ *').length > 1) {
          $title.find('~ *').wrapAll('<div>');
        }
      });
      $('.corpo-descricao > [class^="descricao-col"]:not(.video-html-descricao) h2, .specification__content-wrapper > h3').on('click', function () {
        var $this = $(this);
        $this.toggleClass('active');
        $this.nextAll().stop().slideToggle();
      });
      $('.product__description__title').on('click', function () {
        var $this = $(this);
        $this.toggleClass('active');
        $this.parent().find('.descricao-col-2').first().stop().slideToggle();
        $('#info-description').toggleClass('opened');
        $('#info-description').slideToggle();
      });
    }
  }, {
    key: "tipBar",
    value: function tipBar() {
      $('.mz-tip-bar > ul').slick({
        slidesToShow: 3,
        slidesToScroll: 3,
        infinite: true,
        autoplay: true,
        autoplaySpeed: 2000,
        dots: false,
        arrows: false,
        responsive: [{
          breakpoint: 992,
          settings: {
            dots: true,
            slidesToShow: 2,
            slidesToScroll: 2
          }
        }, {
          breakpoint: 796,
          settings: {
            dots: true,
            slidesToShow: 1,
            slidesToScroll: 1
          }
        }]
      });
    }
  }, {
    key: "buttonShareClick",
    value: function buttonShareClick() {
      // Versão mobile
      $('.mz-media-open').on('click', function () {
        $('.mz-media-container').addClass('opened');
        $('.social-media-links-overlay').toggleClass('opened');
        $('body').css('overflow', 'hidden');
      }); // Fechar clicando na overlay

      $('.social-media-links-overlay').on('click', function () {
        $('.mz-media-container').removeClass('opened');
        $('.social-media-links-overlay').removeClass('opened');
        $('body').css('overflow', 'initial');
      }); // Versão Desk

      $('.mz-media-open-desk').on('click', function () {
        $('.social-media-links-overlay').toggleClass('opened');
        $('.mz-media-open-desk .mz-media-container').toggleClass('opened');

        if ($('.mz-media-open-desk .mz-media-container').hasClass('opened')) {
          $('body').css('overflow', 'hidden');
        } else {
          $('body').css('overflow', 'initial');
        }
      });
    }
  }, {
    key: "buttonShare",
    value: function buttonShare() {
      var $urlProduct = window.location.href;
      var $urlPintirest = "https://www.pinterest.com/pin/create/button/?url='".concat($urlProduct, "'&description=[DESCRI\xC7\xC3O]");
      var $urlWhats = "https://api.whatsapp.com/send?text='".concat($urlProduct, "'&description=[DESCRI\xC7\xC3O]");
      $('.mz-media-link1 a').attr('href', $urlPintirest);
      $('.mz-media-link4 a').attr('href', $urlWhats);
    }
  }]);

  return Produto;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/pages/Produto/installmentCalc.js":
/*!**************************************************************!*\
  !*** ./src/arquivos/js/app/pages/Produto/installmentCalc.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return InstallmentCalc; });
/* harmony import */ var Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Helpers/vtexUtils */ "./src/arquivos/js/helpers/vtexUtils.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var InstallmentCalc = /*#__PURE__*/function () {
  function InstallmentCalc(store, containerSelector) {
    _classCallCheck(this, InstallmentCalc);

    this.state = store.state;
    this.container = $(containerSelector);
    this.render();
    store.events.subscribe("selectedSku:stateChange", this.render.bind(this));
  }

  _createClass(InstallmentCalc, [{
    key: "render",
    value: function render() {
      var selectedSku = this.state.selectedSku;
      var paymentList = "",
          html = "";

      for (var index = 1; index <= selectedSku.installments; index++) {
        var installmentsValue = selectedSku.bestPrice / 100 / index;
        paymentList += "\n\t\t\t\t<li>\n\t\t\t\t\t".concat(index == 1 ? "à vista" : "".concat(index, "x de "), " R$ ").concat(Object(Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__["getPrice"])(installmentsValue), "\n\t\t\t\t</li>\n\t\t\t");
      }

      html = "\n\t\t\t<div class=\"other-payment-method-content\">\n\t\t\t\t<ul class=\"other-payment-method-ul\">\n\t\t\t\t\t".concat(paymentList, "\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t");
      this.container.html(html);
    }
  }]);

  return InstallmentCalc;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/Cart.js":
/*!**********************************************!*\
  !*** ./src/arquivos/js/app/partials/Cart.js ***!
  \**********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _CepCalc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./CepCalc */ "./src/arquivos/js/app/partials/CepCalc.js");
/* harmony import */ var _Overlay__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./Overlay */ "./src/arquivos/js/app/partials/Overlay.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }





var Cart = /*#__PURE__*/function () {
  function Cart(opts) {
    _classCallCheck(this, Cart);

    this.opts = {
      baseClass: opts.baseClass || "cart",
      cartBtn: opts.cartBtn || "shopping-cart",
      cartTitle: opts.cartTitle || "Carrinho",
      counterSelector: opts.counterSelector || ".amount-items",
      hasOverlay: opts.hasOverlay || false,
      onMouseOver: opts.onMouseOver || false
    };
    this.baseClass = this.opts.baseClass;
    this.cartBtn = this.opts.cartBtn;
    this.cartTitle = this.opts.cartTitle;
    this.hasOverlay = this.opts.hasOverlay;
    this.counterSelector = this.opts.counterSelector;

    try {
      if (jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.opts.baseClass)).length === 0) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(".header").after("<div class=\"".concat(this.opts.baseClass, "\"></div>"));
      }

      this.selectors();
      this.createMiniCartStructure();
      this.events();
    } catch (error) {
      console.log(error);
    } //checagem se vtexjs existe


    if (typeof vtexjs != "undefined") {
      vtexjs.checkout.getOrderForm();
      vtexjs.checkout.getOrderForm().done(function (orderForm) {
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).trigger("orderFormUpdated.vtex", [orderForm]);
      });
    } else {
      console.log("vtexjs not found.");
    }
  }

  _createClass(Cart, [{
    key: "selectors",
    value: function selectors() {
      this.cartBtn = jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.cartBtn));
      this.element = jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass));
    }
  }, {
    key: "events",
    value: function events() {
      //custom events
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on("showMiniCart", this.showMiniCart.bind(this));
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(document).on("closeMiniCart", this.closeMiniCart.bind(this));
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on("orderFormUpdated.vtex", this.listItems.bind(this));
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).on("checkoutRequestBegin.vtex", this.loading.bind(this));
      this.cartBtn.click(this.showMiniCart.bind(this));
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__close-btn")).click(this.closeMiniCart.bind(this));

      if (typeof vtexjs != "undefined") {
        vtexjs.checkout.getOrderForm();
      } else {
        console.log("vtexjs not found.");
      }
    }
  }, {
    key: "createMiniCartStructure",
    value: function createMiniCartStructure() {
      var miniCartHtml =
      /*html*/
      "\n\t\t\t<div class=\"cart__top-wrapper\">\n\t\t\t\t<div class=\"cart__title\">\n\t\t\t\t\t".concat(this.cartTitle, " (0)\n\t\t\t\t</div>\n\t\t\t\t<div class=\"cart__close-btn\">\n\t\t\t\t\t<i class=\"sprite sprite-fechar-icon\"></i>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<div class=\"cart__wrapper\">\n\t\t\t\t<div class=\"cart__product-list\">\n\t\t\t\t\t<ul></ul>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"cart__footer\">\n\t\t\t\t\t<div class=\"cart__valor\">\n\t\t\t\t\t\t<p>Subtotal: <span class=\"cart__subtotal\">R$ 0,00</span></p>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"calculoCep\"></div>\n\n\t\t\t\t\t<a class=\"cart__buy-btn\" href=\"/checkout/#cart\">Ir para pagamento</a>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t");

      if (this.hasOverlay) {
        this.overlay = new _Overlay__WEBPACK_IMPORTED_MODULE_2__["default"]();
        this.overlay.addClickHandle(this.closeMiniCart.bind(this));
      }

      this.element.html(miniCartHtml);
      new _CepCalc__WEBPACK_IMPORTED_MODULE_1__["default"]();
      this.emptyCart();
    }
  }, {
    key: "addCartIconCount",
    value: function addCartIconCount(count) {
      if (this.cartBtn.has("span").length >= 1) {
        this.cartBtn.find(this.opts.counterSelector).text(count);
        var titleCart = ".".concat(this.baseClass, "__title");
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(titleCart).text("".concat(this.cartTitle, " (").concat(count, ")"));
      } else {
        var counterCircle = jquery__WEBPACK_IMPORTED_MODULE_0___default()("<div />").appendTo(this.cartBtn);
        var countSpan = jquery__WEBPACK_IMPORTED_MODULE_0___default()("<span />", {
          text: count
        }).appendTo(counterCircle);
      }
    }
  }, {
    key: "emptyCart",
    value: function emptyCart() {
      var emptyCartHtml =
      /*html*/
      "\n\t\t\t<li class=\"".concat(this.baseClass, "__empty\">\n\t\t\t\t<p>Seu carrinho est\xE1 vazio.</p>\n\t\t\t</li>\n\t\t");
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__product-list ul")).html(emptyCartHtml);
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__wrapper")).addClass("empty"); // Evento para fazer com que a barra de progresso de frete atualize

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).trigger("minicartUpdated.vtex");
    }
  }, {
    key: "updateCartInfo",
    value: function updateCartInfo() {
      var totalQtd = 0;
      var subTotalPrice = 0;
      var desconto = 0;

      var _this = this;

      if (typeof vtexjs != "undefined") {
        var totalizers = vtexjs.checkout.orderForm.totalizers;
        var items = vtexjs.checkout.orderForm.items;
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__product")).each(function () {
          var productId = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).attr("id");

          for (var i = 0; i < items.length; i++) {
            if (items[i].uniqueId == productId) {
              var qtd = parseInt(items[i].quantity);
              var price = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).find(".".concat(_this.baseClass, "__product__price")).text().replace("R$", " ");
              var savedMoney = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).find(".".concat(_this.baseClass, "__product__savedMoneyValue")).text();
              price = price.trim();
              price = parseFloat(price.replace(",", "."));
              totalQtd += qtd;
              subTotalPrice += qtd * price;
              savedMoney = savedMoney.trim();
              savedMoney = parseFloat(savedMoney.replace(',', '.'));
              jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).find(".".concat(_this.baseClass, "__product__quantity__value")).text(qtd);
              break;
            }
          }
        });
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(totalizers).each(function (index, element) {
          if (element.id == "Discounts") {
            desconto = element.value;
          }
        });
        subTotalPrice = parseFloat(subTotalPrice);

        _this.addCartIconCount(totalQtd);

        desconto = parseFloat(desconto / 100).toFixed(2);
        subTotalPrice = parseFloat(subTotalPrice).toFixed(2);
        jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(_this.baseClass, "__desconto")).text("R$ " + desconto.replace(".", ","));

        if (isNaN(subTotalPrice)) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(_this.baseClass, "__subtotal")).text(" ");
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(_this.baseClass, "__total")).text(" ");
        } else {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(_this.baseClass, "__subtotal")).text("R$ " + subTotalPrice.replace(".", ","));
        }
      } else {
        console.log("vtexjs not found.");
      } // Evento para fazer com que a barra de progresso de frete atualize


      jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).trigger("minicartUpdated.vtex");
    }
  }, {
    key: "addOneToCart",
    value: function addOneToCart() {
      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(_this.baseClass, "__product__quantity__plus")).click(function () {
        var qtd = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).siblings(".".concat(_this.baseClass, "__product__quantity__value"));
        var productId = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).parents(".".concat(_this.baseClass, "__product")).attr("id");

        if (jquery__WEBPACK_IMPORTED_MODULE_0___default.a.isNumeric(qtd.text())) {
          var valueQtd = parseInt(qtd.text());
          valueQtd += 1;

          _this.updateOrderForm(productId, valueQtd);
        } else {
          _this.updateOrderForm(productId, 0);
        }
      });
    }
  }, {
    key: "removeOneFromCart",
    value: function removeOneFromCart() {
      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__product__quantity__minus")).click(function () {
        var qtd = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).siblings(".".concat(_this.baseClass, "__product__quantity__value"));
        var productId = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).parents(".".concat(_this.baseClass, "__product")).attr("id");

        if (jquery__WEBPACK_IMPORTED_MODULE_0___default.a.isNumeric(qtd.text())) {
          var valueQtd = parseInt(qtd.text());

          if (valueQtd > 1) {
            valueQtd -= 1;

            _this.updateOrderForm(productId, valueQtd);
          }
        } else {
          _this.updateOrderForm(productId, 0);
        }
      });
    }
  }, {
    key: "removeFromCart",
    value: function removeFromCart() {
      var _this = this;

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(_this.baseClass, "__product__removeFromCart")).click(function () {
        var productId = jquery__WEBPACK_IMPORTED_MODULE_0___default()(this).parents(".".concat(_this.baseClass, "__product")).attr("id");

        _this.updateOrderForm(productId, 0);
      });
    }
  }, {
    key: "listItems",
    value: function listItems(evt, orderForm) {
      var items;

      if (typeof orderForm != "undefined") {
        items = orderForm.items;
      } else if (typeof vtexjs != "undefined") {
        items = vtexjs.checkout.orderForm.items;
      }

      if (typeof items != "undefined") {
        if (items != 0) {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__wrapper")).removeClass("empty");
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__product-list ul")).empty();

          for (var i = 0; i < items.length; i++) {
            var price = parseFloat(items[i].sellingPrice / 100).toFixed(2);
            var savedMoney = parseFloat((items[i].listPrice - items[i].sellingPrice) / 100).toFixed(2);
            var itemHtml =
            /*html*/
            "\n\t\t\t\t\t\t<li class=\"".concat(this.baseClass, "__product\" id=\"").concat(items[i].uniqueId, "\">\n\t\t\t\t\t\t\t<a class=\"").concat(this.baseClass, "__product__img-link\">\n\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\tclass=\"").concat(this.baseClass, "__product__img\"\n\t\t\t\t\t\t\t\tsrc=\"").concat(this.alterarTamanhoImagemSrcVtex(items[i].imageUrl, 115, 115), "\"\n\t\t\t\t\t\t\t\talt=\"").concat(items[i].name, "\"\n\t\t\t\t\t\t\t\t/>\n\n\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t<div class=\"").concat(this.baseClass, "__product__wrapper\">\n\t\t\t\t\t\t\t\t<div class=\"").concat(this.baseClass, "__product__title-wrapper\">\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t<p class=\"").concat(this.baseClass, "__product__title\">\n\t\t\t\t\t\t\t\t\t\t\t").concat(items[i].name, "\n\t\t\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t\t\t<div class=\"").concat(this.baseClass, "__product__specifications\">\n\t\t\t\t\t\t\t\t\t\t\t").concat(items[i].skuName, "\n\t\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<button class=\"").concat(this.baseClass, "__product__removeFromCart\">\n\t\t\t\t\t\t\t\t\t\t<i class=\"sprite sprite-lixeira-icon\" title=\"Remover\"></i>\n\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t<div class=\"").concat(this.baseClass, "__product__info-wrapper\">\n\t\t\t\t\t\t\t\t\t<div class=\"").concat(this.baseClass, "__product__quantity\">\n\t\t\t\t\t\t\t\t\t\t<button class=\"").concat(this.baseClass, "__product__quantity__minus\">\n\t\t\t\t\t\t\t\t\t\t\t-\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t\t<p class=\"").concat(this.baseClass, "__product__quantity__value\">\n\t\t\t\t\t\t\t\t\t\t\t").concat(items[i].quantity, "\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t\t<button class=\"").concat(this.baseClass, "__product__quantity__plus\">\n\t\t\t\t\t\t\t\t\t\t\t+\n\t\t\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t\t\t<div class=\"").concat(this.baseClass, "__product__values\">\n\t\t\t\t\t\t\t\t\t\t<p class=\"").concat(this.baseClass, "__product__price\">\n\t\t\t\t\t\t\t\t\t\t\t").concat("R$ " + price.replace(".", ","), "\n\t\t\t\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t\t\t\t<p class=\"").concat(this.baseClass, "__product__savedMoney\">\n\t\t\t\t\t\t\t\t\t\t\tVoc\xEA est\xE1 economizando <br /> R$\n\t\t\t\t\t\t\t\t\t\t\t<span class=\"").concat(this.baseClass, "__product__savedMoneyValue\">\n\t\t\t\t\t\t\t\t\t\t\t\t").concat(savedMoney.replace(".", ","), "\n\t\t\t\t\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</li>\n\t\t\t\t\t");
            document.querySelector(".".concat(this.baseClass, "__product-list ul")).insertAdjacentHTML("beforeend", itemHtml);
          }

          this.addOneToCart();
          this.removeOneFromCart();
          this.removeFromCart();
          this.updateCartInfo();
        } else {
          jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__product-list ul")).empty();
          this.emptyCart();
          this.updateCartInfo();
        }
      } else {
        console.log("orderForm not found.");
      }

      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__wrapper")).removeClass('loading');
    }
  }, {
    key: "loading",
    value: function loading() {
      jquery__WEBPACK_IMPORTED_MODULE_0___default()(".".concat(this.baseClass, "__wrapper")).addClass('loading');
    }
  }, {
    key: "alterarTamanhoImagemSrcVtex",
    value: function alterarTamanhoImagemSrcVtex(src, width, height) {
      if (typeof src == "undefined") {
        console.warn("Parametro 'src' não recebido.");
        return;
      }

      width = typeof width == "undefined" ? 1 : width;
      height = typeof height == "undefined" ? width : height;
      src = src.replace(/\/(\d+)(-(\d+-\d+)|(_\d+))\//g, "/$1-" + width + "-" + height + "/");
      return src;
    }
  }, {
    key: "showMiniCart",
    value: function showMiniCart() {
      this.element.addClass("show");

      if (this.hasOverlay) {
        this.overlay.show();
      }
    }
  }, {
    key: "closeMiniCart",
    value: function closeMiniCart() {
      this.element.removeClass("show");

      if (this.hasOverlay) {
        this.overlay.hide();
      }
    }
  }, {
    key: "updateOrderForm",
    value: function updateOrderForm(productId, qtd) {
      // $('.cart .wait-screen').addClass('active');
      var _this = this;

      vtexjs.checkout.getOrderForm().then(function (orderForm) {
        for (var i = 0; i < orderForm.items.length; i++) {
          if (orderForm.items[i].uniqueId == productId) {
            var itemIndex = i;
          }
        }

        var item = orderForm.items[itemIndex];
        var updateItem = {
          index: itemIndex,
          quantity: qtd
        };
        return vtexjs.checkout.updateItems([updateItem], null, false);
      }).done(function (orderForm) {
        _this.updateCartInfo();

        jquery__WEBPACK_IMPORTED_MODULE_0___default()(window).trigger("orderFormUpdated.vtex", [orderForm]);
      });
    }
  }]);

  return Cart;
}();

/* harmony default export */ __webpack_exports__["default"] = (Cart);

/***/ }),

/***/ "./src/arquivos/js/app/partials/CepCalc.js":
/*!*************************************************!*\
  !*** ./src/arquivos/js/app/partials/CepCalc.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var CepCalc = /*#__PURE__*/function () {
  function CepCalc() {
    _classCallCheck(this, CepCalc);

    this.createStructure();
    this.selectors();
    this.events();
  }

  _createClass(CepCalc, [{
    key: "createStructure",
    value: function createStructure() {
      var zipCode = window.localStorage.getItem('user-zipcode') || '';
      var calculaCepHtml = "\n\t\t\t<label>CEP</label>\n\t\t\t<div class=\"calculoCep__input\">\n\t\t\t\t<input type=\"text\" class=\"calculoCep__valor-cep\" placeholder=\"00000-000\" value=\"".concat(zipCode, "\" />\n\t\t\t\t<button class=\"calculoCep__submit-cep\">Calcular</button>\n\t\t\t</div>\n\t\t\t<div class=\"calculoCep__status\">\n\t\t\t\ta calcular\n\t\t\t</div> ");
      $(".calculoCep").append(calculaCepHtml);
    }
  }, {
    key: "selectors",
    value: function selectors() {
      this.inputCep = $(".calculoCep__valor-cep");
      this.submitCepButton = $(".calculoCep__submit-cep");
      this.cepStatus = $(".calculoCep__status");
    }
  }, {
    key: "events",
    value: function events() {
      this.submitCepButton.click(this.readZip.bind(this));
      $(window).on("orderFormUpdated.vtex", this.updateZip.bind(this));
    }
  }, {
    key: "updateZip",
    value: function updateZip() {
      var totalizers = window.vtexjs.checkout.orderForm.totalizers;
      var shipingCost;

      for (var i in totalizers) {
        if (totalizers.hasOwnProperty(i)) {
          var item = totalizers[i];

          if (item.id === "Shipping") {
            shipingCost = item.value;
          }
        }
      }

      if (typeof shipingCost !== 'undefined') {
        this.cepStatus.removeClass("calculoCep__status-error calculoCep__status-gratis").addClass("calculoCep__status-price");

        if (shipingCost == 0) {
          var _html = "Frete gr\xE1tis*\n\t\t\t\t\t<span class=\"asteristico\">\n\t\t\t\t\tdisponivel para algumas op\xE7\xF5es de entrega\n\t\t\t\t</span>";
          this.cepStatus.addClass("calculoCep__status-gratis").html(_html);
        } else {
          var zipPrice = parseFloat(shipingCost / 100).toFixed(2).replace(".", ",");
          zipPrice = "R$ ".concat(zipPrice);
          this.cepStatus.text("Frete: ".concat(zipPrice));
        }
      } else {
        this.cepStatus.text("a calcular");
      }
    }
  }, {
    key: "readZip",
    value: function readZip() {
      var _this = this;

      var zipCode = this.inputCep.val();
      var resultZip = this.getZip(zipCode);
      resultZip.fail(function (error) {
        _this.cepStatus.removeClass("calculoCep__status-price calculoCep__status-gratis").addClass("calculoCep__status-error").html("\n\t\t\t\t\t\t<div class=\"calculoCep__errorMessage\">Ocorreu um erro</div>\n\t\t\t\t\t\t<div class=\"calculoCep__refresh\">Tentar novamente</div>\n\t\t\t\t\t");

        _this.refreshZip();

        return console.error(error);
      });
    }
  }, {
    key: "getZip",
    value: function getZip(zipCode) {
      window.localStorage.setItem('user-zipcode', zipCode);
      var address = {
        postalCode: zipCode,
        country: "BRA"
      };
      return vtexjs.checkout.calculateShipping(address);
    }
  }, {
    key: "refreshZip",
    value: function refreshZip() {
      var _this2 = this;

      $(".calculoCep__refresh").on("click", function () {
        _this2.inputCep.val("");

        _this2.cepStatus.removeClass("calculoCep__status-error").removeClass("calculoCep__status-price").text("a calcular");
      });
    }
  }]);

  return CepCalc;
}();

/* harmony default export */ __webpack_exports__["default"] = (CepCalc);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/DepartamentSlide.js":
/*!**********************************************************!*\
  !*** ./src/arquivos/js/app/partials/DepartamentSlide.js ***!
  \**********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _functions_slide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/slide */ "./src/arquivos/js/app/functions/slide.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var DepartamentSlide = /*#__PURE__*/function () {
  function DepartamentSlide() {
    _classCallCheck(this, DepartamentSlide);

    this.createStructure();
  }

  _createClass(DepartamentSlide, [{
    key: "createStructure",
    value: function createStructure() {
      if ($('.departament_slider .slick-track .box-banner').length == 0) {
        $('.lista-categorias h2').css('display', 'none');
      }

      $('.departament_slider .box-banner').each(function (index, element) {
        var title = $(this).find('img').attr('alt').split('-')[1];
        $(this).append("<h3>".concat(title, "</h3>"));
      });
      Object(_functions_slide__WEBPACK_IMPORTED_MODULE_0__["DepartamentSlider"])('.departament_slider', true);
    }
  }]);

  return DepartamentSlide;
}();

/* harmony default export */ __webpack_exports__["default"] = (DepartamentSlide);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/Footer.js":
/*!************************************************!*\
  !*** ./src/arquivos/js/app/partials/Footer.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helpers/MediasMatch */ "./src/arquivos/js/helpers/MediasMatch.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var Footer = /*#__PURE__*/function () {
  function Footer() {
    _classCallCheck(this, Footer);

    if (_helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_0__["isSmallerThen768"]) {
      this.selectors();
      this.events();
    }
  }

  _createClass(Footer, [{
    key: "selectors",
    value: function selectors() {
      this.title = $('.footerLinks__title--toggle');
    }
  }, {
    key: "events",
    value: function events() {
      this.title.click(this.toggleItems);
    }
  }, {
    key: "toggleItems",
    value: function toggleItems() {
      $(this).toggleClass('footerLinks__title--opened').siblings('.footerLinks__items').slideToggle(300);
    }
  }]);

  return Footer;
}();

/* harmony default export */ __webpack_exports__["default"] = (Footer);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/FreightBar.js":
/*!****************************************************!*\
  !*** ./src/arquivos/js/app/partials/FreightBar.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _config_loja__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../config/loja */ "./src/arquivos/js/config/loja.js");
/* harmony import */ var _config_freeShipping__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/freeShipping */ "./src/arquivos/js/config/freeShipping.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var FreightBar = /*#__PURE__*/function () {
  function FreightBar() {
    var _window$FREE_SHIPPING;

    _classCallCheck(this, FreightBar);

    this.minimumValue = ((_window$FREE_SHIPPING = window.FREE_SHIPPING) === null || _window$FREE_SHIPPING === void 0 ? void 0 : _window$FREE_SHIPPING.SOUTH_AND_SOUTHEAST) ? window.FREE_SHIPPING.SOUTH_AND_SOUTHEAST : _config_loja__WEBPACK_IMPORTED_MODULE_0__["default"].valorMinimoFreteGratis;
    localStorage.setItem('minimumValueShip', this.minimumValue);
    this.createFreightBar();
    this.events();
    this.setFreightBarMessage();
  }

  _createClass(FreightBar, [{
    key: "createFreightBar",
    value: function createFreightBar() {
      this.freightBar = "\n\t\t\t\t<div class=\"container\">\n\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t<div class=\"freightBar__info\">\n              <img src=\"https://aramado.vteximg.com.br/arquivos/icon_freightBar.png\" alt=\"Icone Frete Gr\xE1tis\">\n              <div class=\"freightBar__display\">\n                <span class=\"freightBar__message\"></span>\n                para\n                <strong>Sul</strong> e\n                <strong>Sudeste</strong>.\n\n                <span class=\"freightBar__otherRegions\">\n                  *Confira outras regi\xF5es\n                  ".concat(_config_freeShipping__WEBPACK_IMPORTED_MODULE_1__["default"].conditionsHtml(), "\n                </span>\n              </div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t");
    }
  }, {
    key: "events",
    value: function events() {
      $(window).on("orderFormUpdated.vtex minicartUpdated.vtex", this.setFreightBarMessage.bind(this));
    }
  }, {
    key: "setFreightBarMessage",
    value: function setFreightBarMessage(event, orderForm) {
      var data;

      if (typeof orderForm != "undefined") {
        data = orderForm;
      } else if (typeof vtexjs != "undefined") {
        data = vtexjs.checkout.orderForm;
      }

      if (typeof data != "undefined") {
        if ($('.freightBar').is(':empty')) {
          $(".freightBar").html(this.freightBar);
        }

        var total = 0;

        if (data.totalizers.length > 0) {
          for (var index = 0; index < data.totalizers.length; index++) {
            var itemTotal = data.totalizers[index];

            switch (itemTotal.id) {
              case "Items":
                total += itemTotal.value;
                break;

              case "Discounts":
                total += itemTotal.value;
                break;

              default:
                break;
            }
          }
        }

        var cartValue = total / 100;
        var remainingValue = this.minimumValue - cartValue;

        if (remainingValue <= 0) {
          $(".freightBar__message").html("\n\t\t\t\t\t<span class=\"freightBar__highlightedText\">Parab\xE9ns, voc\xEA ganhou Frete Gr\xE1tis</span>\n\t\t\t\t");
        } else {
          $(".freightBar__message").html("\n\t\t\t\t\tFaltam\n\t\t\t\t\t<span class=\"freightBar__highlightedText\">\n\t\t\t\t\t\tR$".concat(remainingValue.toFixed(2).replace(".", ","), "\n\t\t\t\t\t</span>\n\t\t\t\t\tpra voc\xEA ganhar\n\t\t\t\t\t<span class=\"freightBar__highlightedText\">Frete Gr\xE1tis*</span>\n\t\t\t\t"));
        }
      }
    }
  }]);

  return FreightBar;
}();

/* harmony default export */ __webpack_exports__["default"] = (FreightBar);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/HomeDepartamentSlide.js":
/*!**************************************************************!*\
  !*** ./src/arquivos/js/app/partials/HomeDepartamentSlide.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _functions_slide__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../functions/slide */ "./src/arquivos/js/app/functions/slide.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var HomeDepartamentSlide = /*#__PURE__*/function () {
  function HomeDepartamentSlide() {
    _classCallCheck(this, HomeDepartamentSlide);

    this.createStructure();
  }

  _createClass(HomeDepartamentSlide, [{
    key: "createStructure",
    value: function createStructure() {
      $('.departament_slider .box-banner').each(function (index, element) {
        var title = $(this).find('img').attr('alt');
        $(this).append("<h3>".concat(title, "</h3>"));
      });
      Object(_functions_slide__WEBPACK_IMPORTED_MODULE_0__["DepartamentSlider"])('.departament_slider');
    }
  }]);

  return HomeDepartamentSlide;
}();

/* harmony default export */ __webpack_exports__["default"] = (HomeDepartamentSlide);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/Login.js":
/*!***********************************************!*\
  !*** ./src/arquivos/js/app/partials/Login.js ***!
  \***********************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Login; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Login = /*#__PURE__*/function () {
  function Login() {
    _classCallCheck(this, Login);

    this.linkUSerHEader();
    this.linkUserMenuMobile();
    this.getUSerData();
  }

  _createClass(Login, [{
    key: "identificacaoDoUsuario",
    value: function identificacaoDoUsuario(user) {
      var identificacao = user.Email;

      if (user.FirstName !== null) {
        identificacao = user.FirstName;

        if (user.LastName !== null) {
          identificacao += " " + user.LastName;
        }
      }

      return identificacao;
    }
  }, {
    key: "urlLogin",
    value: function urlLogin() {
      return "/login?ReturnUrl=" + encodeURIComponent(window.location.pathname);
    }
  }, {
    key: "urlLogout",
    value: function urlLogout() {
      return "/no-cache/user/logout?ReturnUrl=" + encodeURIComponent(window.location.pathname);
    }
  }, {
    key: "linkUSerHEader",
    value: function linkUSerHEader() {
      var _this = this;

      $(document).on("vtex-user-identification", function (event, data) {
        if (data.IsUserDefined) {
          $("header .links-usuario a.destaque").text("Sair").prop("href", _this.urlLogout());
        } else {
          $("header .links-usuario a.destaque").text("Entrar").prop("href", _this.urlLogin());
        }
      });
    }
  }, {
    key: "linkUserMenuMobile",
    value: function linkUserMenuMobile() {
      var _this2 = this;

      $(document).on("vtex-user-identification", function (event, data) {
        var texto;

        if (data.IsUserDefined) {
          texto = "Ola,";
          texto += "<a href='/account' title=" + data.Email + "> " + _this2.identificacaoDoUsuario(data) + " </a> ";
          texto += "<br>não é você?  <a href=" + _this2.urlLogout() + ">sair</a>";
        } else {
          texto = "Faça";
          texto += "<a href=" + _this2.urlLogin() + " > login </a> ou ";
          texto += "<a href=" + _this2.urlLogin() + ">cadastre-se</a>";
        }

        $(".menu-principal .login .area-login span").html(texto);
      });
    }
  }, {
    key: "getUSerData",
    value: function getUSerData() {
      $.getJSON("/no-cache/profileSystem/getProfile").done(function (data) {
        $(document).trigger("vtex-user-identification", data);
      });
    }
  }]);

  return Login;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/MainMenu.js":
/*!**************************************************!*\
  !*** ./src/arquivos/js/app/partials/MainMenu.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var MainMenu = /*#__PURE__*/function () {
  function MainMenu() {
    _classCallCheck(this, MainMenu);

    this.selectors();
    this.events();
  }

  _createClass(MainMenu, [{
    key: "selectors",
    value: function selectors() {
      this.menuItems = $('.menu__item');
    }
  }, {
    key: "events",
    value: function events() {
      this.menuItems.bind('mouseenter', {
        oldIcon: 'dark',
        newIcon: 'light'
      }, this.changeIcon);
      this.menuItems.bind('mouseleave', {
        oldIcon: 'light',
        newIcon: 'dark'
      }, this.changeIcon);
    }
  }, {
    key: "changeIcon",
    value: function changeIcon(event) {
      var icon = $(this).find('i');
      var oldClass = icon.attr('class');
      var newClass = oldClass.replace(event.data.oldIcon, event.data.newIcon);
      icon.removeClass(oldClass).addClass(newClass);
    }
  }]);

  return MainMenu;
}();

/* harmony default export */ __webpack_exports__["default"] = (MainMenu);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/MenuContents.js":
/*!******************************************************!*\
  !*** ./src/arquivos/js/app/partials/MenuContents.js ***!
  \******************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return MenuContents; });
/* harmony import */ var _helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../helpers/MediasMatch */ "./src/arquivos/js/helpers/MediasMatch.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var MenuContents = /*#__PURE__*/function () {
  function MenuContents() {
    _classCallCheck(this, MenuContents);

    if (!_helpers_MediasMatch__WEBPACK_IMPORTED_MODULE_0__["isSmallerThen768"]) {
      this.getContent();
    }
  }

  _createClass(MenuContents, [{
    key: "getContent",
    value: function getContent() {
      var url = "/Sistema/elementosmenu";
      $.get(url, function (data) {
        var $conteudo = $(data);
        $("<div/>", {
          "class": "elementos-menu"
        }).appendTo(".menu-principal .itens >li .container"); // this.insertProduct($conteudo);

        this.insertBanners($conteudo);
      }.bind(this));
    }
  }, {
    key: "insertProduct",
    value: function insertProduct($conteudo) {
      var wantedContent = ".produtos-menu";
      var shelfs = $conteudo.find(wantedContent)[0];

      if (shelfs) {
        var categories = $(shelfs).find("h2");

        for (var i = 0; i < categories.length; i++) {
          var categoryName = $(categories[i]).text();
          var productMenuContainer = $('.menu-principal a[title*="' + categoryName + '"]').parent().find(".elementos-menu");

          if (productMenuContainer.length) {
            $(categories[i]).next("ul").appendTo(productMenuContainer);
            $(productMenuContainer).addClass("have-product");
          }
        }
      }
    }
  }, {
    key: "insertBanners",
    value: function insertBanners($conteudo) {
      var wantedContent = ".banners-menu";
      var banners = $conteudo.find(wantedContent)[0];

      if (banners) {
        var imgs = $(banners).find("img");

        for (var i = 0; i < imgs.length; i++) {
          var categoryName = $(imgs[i]).attr("alt");
          var bannerMenuContainer = $('.menu-principal a[title*="' + categoryName + '"]').parent().find(".elementos-menu");

          if (bannerMenuContainer.length) {
            $(imgs[i]).parents(".box-banner").appendTo(bannerMenuContainer);
            $(bannerMenuContainer).addClass("have-banner");
          }
        }
      }
    }
  }]);

  return MenuContents;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/NetReviewsPrateleira.js":
/*!**************************************************************!*\
  !*** ./src/arquivos/js/app/partials/NetReviewsPrateleira.js ***!
  \**************************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return NetReviewsPratelera; });
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var NetReviewsPratelera = /*#__PURE__*/function () {
  function NetReviewsPratelera() {
    _classCallCheck(this, NetReviewsPratelera);

    this.init();
  }

  _createClass(NetReviewsPratelera, [{
    key: "init",
    value: function () {
      var _init = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
        return regeneratorRuntime.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.addProductRefCode();

              case 2:
                _context.next = 4;
                return this.refreshStarsEvent();

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function init() {
        return _init.apply(this, arguments);
      }

      return init;
    }()
  }, {
    key: "loadNetReviewScript",
    value: function () {
      var _loadNetReviewScript = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
        var tag, firstScriptTag;
        return regeneratorRuntime.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                tag = document.createElement("script");
                tag.setAttribute("charset", "utf-8");
                tag.src = "//cl.avis-verifies.com/br/cache/1/2/9/12983f38-4d34-d3d4-8daa-cf81c4868548/AWS/PRODUCT_API/tag.min.js";
                firstScriptTag = document.getElementsByTagName("script")[0];
                firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

              case 5:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2);
      }));

      function loadNetReviewScript() {
        return _loadNetReviewScript.apply(this, arguments);
      }

      return loadNetReviewScript;
    }()
  }, {
    key: "addProductRefCode",
    value: function () {
      var _addProductRefCode = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
        return regeneratorRuntime.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                window.nrSearchForStars();

              case 1:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3);
      }));

      function addProductRefCode() {
        return _addProductRefCode.apply(this, arguments);
      }

      return addProductRefCode;
    }()
  }, {
    key: "refreshStarsEvent",
    value: function refreshStarsEvent() {
      var _this = this;

      $(window).on('refresh-stars', function (event, data) {
        _this.addProductRefCode();
      });
    }
  }]);

  return NetReviewsPratelera;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/Newsletter.js":
/*!****************************************************!*\
  !*** ./src/arquivos/js/app/partials/Newsletter.js ***!
  \****************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Newsletter; });
/* harmony import */ var _lib_custom_newsletter_form__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../lib/custom-newsletter-form */ "./src/arquivos/js/lib/custom-newsletter-form.js");
/* harmony import */ var _lib_custom_newsletter_form__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_lib_custom_newsletter_form__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _config_loja__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../config/loja */ "./src/arquivos/js/config/loja.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Newsletter = /*#__PURE__*/function () {
  function Newsletter(_ref) {
    var elemento = _ref.elemento,
        textButtom = _ref.textButtom;

    _classCallCheck(this, Newsletter);

    var $elemento = typeof elemento !== "undefined" ? $(elemento) : $(".news-form");
    textButtom = typeof textButtom !== "undefined" ? textButtom : "Cadastre-se";
    $elemento.CustomNewsletter({
      shop: _config_loja__WEBPACK_IMPORTED_MODULE_1__["default"].accountName,
      acronymEntity: _config_loja__WEBPACK_IMPORTED_MODULE_1__["default"].entityNewletter,
      textButtom: textButtom
    });
    var $options = $(this.createFieldOptions());
    $options.insertAfter(".m3-cn-email-container");
  }

  _createClass(Newsletter, [{
    key: "createFieldOptions",
    value: function createFieldOptions() {
      var nome = "opcoes",
          type = "radio",
          textConfirm = "Sim, desejo receber as newsletters da loja.",
          textCancel = "Não, cancelar o recebimento.";
      var $fieldset = $("<fieldset />", {
        "class": "m3-cn-" + nome + "-container dynamic-fildset"
      });
      var idFiel = "m3-cn-" + nome,
          idConfirm = idFiel + "-confirma",
          idCancel = idFiel + "-cancela";
      var $inputConfirm = $("<input />", {
        id: idConfirm,
        name: idFiel,
        type: type,
        checked: true
      });
      var $inputCancel = $("<input />", {
        id: idCancel,
        name: idFiel,
        type: type
      });
      $("<p />", {
        text: "Deseja receber nossas novidades e promoções?"
      }).appendTo($fieldset);
      $inputConfirm.appendTo($fieldset);
      $("<label />", {
        "for": idConfirm,
        text: textConfirm
      }).appendTo($fieldset);
      $inputCancel.appendTo($fieldset);
      $("<label />", {
        "for": idCancel,
        text: textCancel
      }).appendTo($fieldset);
      return $fieldset;
    }
  }]);

  return Newsletter;
}();


/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/Overlay.js":
/*!*************************************************!*\
  !*** ./src/arquivos/js/app/partials/Overlay.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var Overlay = /*#__PURE__*/function () {
  function Overlay() {
    _classCallCheck(this, Overlay);

    this.createOverlay();
  }

  _createClass(Overlay, [{
    key: "createOverlay",
    value: function createOverlay() {
      var existentOverlay = $('.overlay');

      if (existentOverlay.length === 0) {
        this.overlay = $('<div />', {
          "class": 'overlay'
        });
        this.overlay.appendTo('body');
      } else {
        this.overlay = existentOverlay;
      }
    }
  }, {
    key: "show",
    value: function show() {
      this.overlay.fadeIn(300);
    }
  }, {
    key: "hide",
    value: function hide() {
      this.overlay.fadeOut(300);
    }
  }, {
    key: "addClickHandle",
    value: function addClickHandle(handle) {
      this.overlay.click(handle);
    }
  }]);

  return Overlay;
}();

/* harmony default export */ __webpack_exports__["default"] = (Overlay);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/Promocao.js":
/*!**************************************************!*\
  !*** ./src/arquivos/js/app/partials/Promocao.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Promocao; });
function Promocao() {
  var urlAtual = new URL(window.location.href);

  try {
    window.vtexjs.checkout.getOrderForm().then(function (orderForm) {
      var marketingData = {
        utmCampaign: urlAtual.searchParams.get("utm_campaign"),
        utmMedium: urlAtual.searchParams.get("utm_medium"),
        utmSource: urlAtual.searchParams.get("utm_source"),
        utmiCampaign: urlAtual.searchParams.get("utmi_campaign"),
        utmiPart: urlAtual.searchParams.get("utmi_part"),
        utmipage: urlAtual.searchParams.get("utmi_page")
      }; // clean data

      for (var i in marketingData) {
        if (marketingData.hasOwnProperty(i)) {
          if (marketingData[i] == null) {
            delete marketingData[i];
          }
        }
      }

      if (Object.keys(marketingData).length === 0) {
        console.info("No marketingData defined");
        return;
      }

      if (orderForm.marketingData !== null) {
        console.info("Replace marketingData :\n", orderForm.marketingData, "\nFor:\n", marketingData);
      }

      return window.vtexjs.checkout.sendAttachment("marketingData", marketingData);
    });
  } catch (error) {
    console.info(error);
  }
}

/***/ }),

/***/ "./src/arquivos/js/app/partials/SideMenu.js":
/*!**************************************************!*\
  !*** ./src/arquivos/js/app/partials/SideMenu.js ***!
  \**************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony import */ var _Overlay__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Overlay */ "./src/arquivos/js/app/partials/Overlay.js");
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }



var SideMenu = /*#__PURE__*/function () {
  function SideMenu() {
    _classCallCheck(this, SideMenu);

    this.overlay = new _Overlay__WEBPACK_IMPORTED_MODULE_0__["default"]();
    this.selectors();
    this.events();
  }

  _createClass(SideMenu, [{
    key: "selectors",
    value: function selectors() {
      this.mobileMenuButton = $('.topItems__menuMobileButton');
      this.desktopMenuButton = $('.utilLinks__menuButton');
      this.sideMenu = $('.sideMenu');
      this.closeMenuButton = $('.closeButton__close');
    }
  }, {
    key: "events",
    value: function events() {
      this.mobileMenuButton.click(this.openSideMenu.bind(this));
      this.desktopMenuButton.click(this.openSideMenu.bind(this));
      this.closeMenuButton.click(this.closeSideMenu.bind(this));
      this.overlay.addClickHandle(this.closeSideMenu.bind(this));
    }
  }, {
    key: "openSideMenu",
    value: function openSideMenu() {
      this.sideMenu.addClass('sideMenu--opened');
      this.overlay.show();
    }
  }, {
    key: "closeSideMenu",
    value: function closeSideMenu() {
      this.sideMenu.removeClass('sideMenu--opened');
      this.overlay.hide();
    }
  }]);

  return SideMenu;
}();

/* harmony default export */ __webpack_exports__["default"] = (SideMenu);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/app/partials/infoDepartament.js":
/*!*********************************************************!*\
  !*** ./src/arquivos/js/app/partials/infoDepartament.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var infoDepartament = /*#__PURE__*/function () {
  function infoDepartament() {
    _classCallCheck(this, infoDepartament);

    this.createStructure();
  }

  _createClass(infoDepartament, [{
    key: "createStructure",
    value: function createStructure() {
      var titlePage = $(".infos_page .titulo-sessao").html();
      $(".infos_page .titulo-sessao").remove();
      $(".infos_page h1").html(titlePage);
      var getId = vtxctx.departmentId == vtxctx.categoryId ? vtxctx.departmentId : vtxctx.categoryId;

      if ($('.text_description').find('p').length > 1) {
        $('.infos_page .see_more').css('display', 'block');
        $(".text_description div[data-id=\"".concat(getId, "\"]")).addClass('selected');
        $(".text_description div:not(.selected)").remove();
        $('.infos_page .see_more').click(function (e) {
          e.preventDefault();
          $(this).parents('.text_description').toggleClass('actived');

          if ($('.text_description').hasClass('actived')) {
            $('.infos_page .see_more').html('Ver menos');
          } else {
            $('.infos_page .see_more').html('Ver mais');
          }
        });
      }
    }
  }]);

  return infoDepartament;
}();

/* harmony default export */ __webpack_exports__["default"] = (infoDepartament);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/config/cart.js":
/*!****************************************!*\
  !*** ./src/arquivos/js/config/cart.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  cartTitle: "Carrinho",
  cartBtn: "utilLinks__cart",
  hasOverlay: true
});

/***/ }),

/***/ "./src/arquivos/js/config/freeShipping.js":
/*!************************************************!*\
  !*** ./src/arquivos/js/config/freeShipping.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Helpers/vtexUtils */ "./src/arquivos/js/helpers/vtexUtils.js");
var _window$FREE_SHIPPING, _window$FREE_SHIPPING2;


/* harmony default export */ __webpack_exports__["default"] = ({
  price: {
    southAndSoutheast: (_window$FREE_SHIPPING = (_window$FREE_SHIPPING2 = window.FREE_SHIPPING) === null || _window$FREE_SHIPPING2 === void 0 ? void 0 : _window$FREE_SHIPPING2.SOUTH_AND_SOUTHEAST) !== null && _window$FREE_SHIPPING !== void 0 ? _window$FREE_SHIPPING : 239
  },
  conditionsHtml: function conditionsHtml() {
    var _window$FREE_SHIPPING3, _window$FREE_SHIPPING4;

    return "\n\t\t<div class=\"conditions\">\n\t\t\t<h3>Como ganhar FRETE GR\xC1TIS?</h3>\n\t\t\t<h4>Confira as condi\xE7\xF5es:</h4>\n\n\t\t\t<ul class=\"conditions__list\">\n\t\t\t\t<li>Sul e Sudeste: Pedidos a partir de R$".concat(((_window$FREE_SHIPPING3 = window.FREE_SHIPPING) === null || _window$FREE_SHIPPING3 === void 0 ? void 0 : _window$FREE_SHIPPING3.SOUTH_AND_SOUTHEAST) ? Object(Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__["getPrice"])(window.FREE_SHIPPING.SOUTH_AND_SOUTHEAST) : "239,00", ".</li>\n\t\t\t\t<li>Centro-Oeste: Pedidos a partir de R$").concat(((_window$FREE_SHIPPING4 = window.FREE_SHIPPING) === null || _window$FREE_SHIPPING4 === void 0 ? void 0 : _window$FREE_SHIPPING4.SOUTH_AND_SOUTHEAST) ? Object(Helpers_vtexUtils__WEBPACK_IMPORTED_MODULE_0__["getPrice"])(window.FREE_SHIPPING.MIDWEST) : "589,00", ".</li>\n\t\t\t</ul>\n\t\t</div>\n\t");
  }
  /**
   * Norte e Nordeste
  <li>Norte e Nordeste: Pedidos a partir de R$${
  	window.FREE_SHIPPING?.SOUTH_AND_SOUTHEAST
  		? getPrice(window.FREE_SHIPPING.NORTH_AND_NORTHEAST)
  		: "1000,00"
  }.</li>
  */

});

/***/ }),

/***/ "./src/arquivos/js/config/loja.js":
/*!****************************************!*\
  !*** ./src/arquivos/js/config/loja.js ***!
  \****************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony default export */ __webpack_exports__["default"] = ({
  NUMERO_DE_PARCELAS: 6,
  PERCENTUAL_DE_DESCONTO: 10,
  accountName: "aramado",
  entityNewletter: "CN",
  faleConosco: "FC",
  percentualDeDecontoMinimoParaFlag: 5,
  valorMinimoFreteGratis: 194.0
});

/***/ }),

/***/ "./src/arquivos/js/core/Container.js":
/*!*******************************************!*\
  !*** ./src/arquivos/js/core/Container.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Container; });
/* harmony import */ var _helpers_isPage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../helpers/isPage */ "./src/arquivos/js/helpers/isPage.js");
/* harmony import */ var Helpers_State_Store__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! Helpers/State/Store */ "./src/arquivos/js/helpers/State/Store.js");
function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(n); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }




var Container = /*#__PURE__*/function () {
  function Container(_ref) {
    var appName = _ref.appName,
        components = _ref.components,
        pages = _ref.pages;

    _classCallCheck(this, Container);

    this.appName = appName;
    this.components = [].concat(_toConsumableArray(components), _toConsumableArray(pages));
    this.instances = {};
    this.componentsConfig = {};
    this.globalCtx = new Helpers_State_Store__WEBPACK_IMPORTED_MODULE_1__["default"]();
  }

  _createClass(Container, [{
    key: "init",
    value: function init() {
      this.buildComponents.call(this);
      window[this.appName] = this;
      this.globalCtx.events.publish("App:Started");
    }
  }, {
    key: "instantiateComponents",
    value: function instantiateComponents(Component) {
      if (true) {
        console.time(Component.name);
      }

      if (this.componentsConfig[Component.name]) {
        this.instances[Component.name] = new Component(this.componentsConfig[Component.name], this.globalCtx);
      } else {
        this.instances[Component.name] = new Component(this.globalCtx);
      }

      this.globalCtx.events.publish("Component:".concat(Component.name, ":Started"));

      if (true) {
        console.timeEnd(Component.name);
      }
    }
  }, {
    key: "buildComponents",
    value: function buildComponents() {
      var _this = this;

      this.components.forEach(function (item) {
        new Promise(function (resolve, reject) {
          try {
            if (_typeof(item) === "object") {
              if (Object(_helpers_isPage__WEBPACK_IMPORTED_MODULE_0__["default"])(item.bodyClass)) {
                for (var i in item.components) {
                  if (item.components.hasOwnProperty(i)) {
                    var Comp = item.components[i];

                    _this.instantiateComponents(Comp);
                  }
                }
              }
            } else {
              _this.instantiateComponents(item);
            }

            resolve();
          } catch (error) {
            console.log(error);
            reject();
          }
        });
      });
    }
  }, {
    key: "bind",
    value: function bind(compName, config) {
      this.componentsConfig[compName] = config;
    }
  }, {
    key: "start",
    value: function start() {
      if (document.attachEvent ? document.readyState === "complete" : document.readyState !== "loading") {
        this.init();
      } else {
        document.addEventListener("DOMContentLoaded", this.init.bind(this));
      }
    }
  }]);

  return Container;
}();



/***/ }),

/***/ "./src/arquivos/js/helpers/MediasMatch.js":
/*!************************************************!*\
  !*** ./src/arquivos/js/helpers/MediasMatch.js ***!
  \************************************************/
/*! exports provided: isSmallerThen768, isSmallerThen991 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSmallerThen768", function() { return isSmallerThen768; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isSmallerThen991", function() { return isSmallerThen991; });
var isSmallerThen768 = window.matchMedia("(max-width:768px)").matches;
var isSmallerThen991 = window.matchMedia("(max-width:991px)").matches;

/***/ }),

/***/ "./src/arquivos/js/helpers/State/PubSub.js":
/*!*************************************************!*\
  !*** ./src/arquivos/js/helpers/State/PubSub.js ***!
  \*************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return PubSub; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* eslint-disable no-prototype-builtins */
var PubSub = /*#__PURE__*/function () {
  function PubSub() {
    _classCallCheck(this, PubSub);

    this.events = {};
  }

  _createClass(PubSub, [{
    key: "subscribe",
    value: function subscribe(event, callback) {
      if (!this.events.hasOwnProperty(event)) {
        this.events[event] = [];
      }

      return this.events[event].push(callback);
    }
  }, {
    key: "publish",
    value: function publish(event) {
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      if (!this.events.hasOwnProperty(event)) {
        return [];
      }

      return this.events[event].map(function (callback) {
        return callback(event, data);
      });
    }
  }, {
    key: "unsubscribe",
    value: function unsubscribe(event, cb) {
      this.events[event].filter(function (fn) {
        return fn !== cb;
      });
    }
  }]);

  return PubSub;
}();



/***/ }),

/***/ "./src/arquivos/js/helpers/State/Store.js":
/*!************************************************!*\
  !*** ./src/arquivos/js/helpers/State/Store.js ***!
  \************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return Store; });
/* harmony import */ var _PubSub__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./PubSub */ "./src/arquivos/js/helpers/State/PubSub.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

/* eslint-disable no-prototype-builtins */


var Store = /*#__PURE__*/function () {
  function Store() {
    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    _classCallCheck(this, Store);

    var self = this;
    self.actions = _objectSpread({}, params.actions);
    self.mutations = _objectSpread({}, params.mutations);
    self.state = _objectSpread({}, params.state);
    self.module = params.moduleName || "store";
    self.status = "default state";
    self.events = new _PubSub__WEBPACK_IMPORTED_MODULE_0__["default"]();
    self.state = new Proxy(params.state || {}, {
      set: function set(state, key, value) {
        state[key] = value;
        console.log("module: ".concat(self.module, " stateChange: ").concat(key, ": ").concat(value));
        self.events.publish("".concat(key, ":stateChange"), self.state);

        if (self.status !== "mutation") {
          console.log("You should use a mutation to set ".concat(key));
        }

        self.status = "resting";
        return true;
      }
    });
  }

  _createClass(Store, [{
    key: "dispatch",
    value: function dispatch(actionKey, payload) {
      var self = this;

      if (typeof self.actions[actionKey] !== "function") {
        console.log("Action \"".concat(actionKey, " doesn't exist."));
        return false;
      }

      console.log("ACTION: ".concat(actionKey));
      self.status = "action";
      self.actions[actionKey](self, payload);
      return true;
    }
  }, {
    key: "commit",
    value: function commit(mutationKey, payload) {
      var self = this;

      if (typeof self.mutations[mutationKey] !== "function") {
        console.log("Mutation \"".concat(mutationKey, "\" doesn't exist"));
        return false;
      }

      self.status = "mutation";
      var newState = self.mutations[mutationKey](self.state, payload);
      self.state = Object.assign(self.state, newState);
      return true;
    }
  }]);

  return Store;
}();



/***/ }),

/***/ "./src/arquivos/js/helpers/isPage.js":
/*!*******************************************!*\
  !*** ./src/arquivos/js/helpers/isPage.js ***!
  \*******************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/**
 *  Função para verificar se estamos em uma das paginas
 *  que são passadas por argumento
 * @param {array} [varname] um array de strings
 * @return {Boolean} [description]
 */
function isPage() {
  var identificacaoMetaPage = $('meta[name="page"]').prop("content") || "";
  var classTagBody = $("body").attr("class") || "";
  var pageDataLayer = typeof dataLayer !== "undefined" ? window.dataLayer[0].pageCategory : "";

  for (var i in arguments) {
    // resultado-busca na tag body
    if (identificacaoMetaPage.search(arguments[i]) >= 0 || pageDataLayer === arguments[i] || classTagBody.search(arguments[i]) >= 0) return true;
  }

  return false;
}

/* harmony default export */ __webpack_exports__["default"] = (isPage);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/helpers/vtexUtils.js":
/*!**********************************************!*\
  !*** ./src/arquivos/js/helpers/vtexUtils.js ***!
  \**********************************************/
/*! exports provided: alterarTamanhoImagemSrcVtex, getPrice, formatCurrency */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alterarTamanhoImagemSrcVtex", function() { return alterarTamanhoImagemSrcVtex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPrice", function() { return getPrice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatCurrency", function() { return formatCurrency; });
/**
 * Altera as dimenções especificadas na url da img
 * @param {string} src url da imagem na VTEX
 * @param {int} width
 * @param {int} height
 * @return {string} url da imagem com o tamanho alterado
 */
function alterarTamanhoImagemSrcVtex(src, width, height) {
  if (typeof src == "undefined") {
    console.warn("Parametro 'src' não recebido.");
    return;
  }

  width = typeof width == "undefined" ? 1 : width;
  height = typeof height == "undefined" ? width : height;
  src = src.replace(/\/(\d+)(-(\d+-\d+)|(_\d+))\//g, "/$1-" + width + "-" + height + "/");
  return src;
}
/**
 * Obtem Preco
 * caso o preco recebido seja um Float ou int,
 * 	'Ex.': 10.2 ->'10,20'
 * Recebendo uma string o valor sera retornado como um float
 * 	'Ex.': 'R$1.234,30' -> 1234.3
 * @param  {FloatZstring} price preço
 * @return {[type]}       [description]
 */

function getPrice(price) {
  if (!price) {
    return 0;
  }

  if (isNaN(price)) {
    price = parseFloat(price.replace("R$", "").replace(".", "").replace(",", "."));
    return parseFloat(price);
  } else {
    var strPrice = price.toFixed(2);
    strPrice = strPrice.replace(".", ",");
    return strPrice;
  }
}
function formatCurrency() {
  return Number(value).toLocaleString("pt-BR", {
    style: "currency",
    currency: "BRL"
  });
}

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/EventType.js":
/*!*************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/EventType.js ***!
  \*************************************************************/
/*! exports provided: ADD_SKU_TO_CART_SUCESS, ADD_SKU_TO_CART_FAIL, CHANGE_QTD, CHANGE_SKU, SKU_REF */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ADD_SKU_TO_CART_SUCESS", function() { return ADD_SKU_TO_CART_SUCESS; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ADD_SKU_TO_CART_FAIL", function() { return ADD_SKU_TO_CART_FAIL; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHANGE_QTD", function() { return CHANGE_QTD; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "CHANGE_SKU", function() { return CHANGE_SKU; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SKU_REF", function() { return SKU_REF; });
var ADD_SKU_TO_CART_SUCESS = "add-skuAddCarrinho.sucess";
var ADD_SKU_TO_CART_FAIL = "add-skuAddCarrinho.fail";
var CHANGE_QTD = "change-quantidade";
var CHANGE_SKU = "change-sku";
var SKU_REF = "sku-referencial";

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js":
/*!**********************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/Modulo.js ***!
  \**********************************************************/
/*! exports provided: Modulo */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modulo", function() { return Modulo; });
/**
 * Modulo de criação de html
 * preenchendo com JSON
 * atualizado por eventos js
 */
var Modulo = function Modulo(elemento, store) {
  this.elemento(elemento);
  this.store(store);
};
/**
 * Atualiza os valores no html que foi criado
 * @return {object} this
 */

Modulo.prototype.atualizar = function () {
  return this;
};

Modulo.prototype.store = function (store) {
  this._store = store;
  return this._store;
};
/**
 * Cria e insere o html com as variações dos skus
 * @return {object} this
 */


Modulo.prototype.desenhar = function () {
  return this;
};
/**
 * Configura os eventos de atualizacao
 * @return {object} this
 */


Modulo.prototype.configurar = function (opcoes) {
  this.opcoes($.extend({}, this._opcoes, opcoes));
  return this;
};
/**
 * Get/Set elemento onde sera inserido
 * @param  {String} seletor seletor em formato css
 * @return {JqueryElement}
 */


Modulo.prototype.elemento = function (seletor) {
  if (seletor) this._elemento = typeof seletor === "string" ? $(seletor) : seletor;
  return this._elemento;
};
/**
 * Get/Set opcoes do modulo
 * @param  {JSON} opcoes seletor em formato cssopções do modulo
 * @return {JSON}
 */


Modulo.prototype.opcoes = function (opcoes) {
  if (opcoes) this._opcoes = opcoes;
  return this._opcoes;
};
/**
 * Função para ativar/exibir um modulo
 * @param {boolean} habilitar
 */


Modulo.prototype.habilitar = function (habilitar) {
  habilitar = typeof habilitar == "undefined" ? true : habilitar;

  if (habilitar == true) {
    this.elemento().removeClass("desativado");
  } else {
    this.elemento().addClass("desativado");
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/ModuloAviseMe.js":
/*!*****************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/ModuloAviseMe.js ***!
  \*****************************************************************/
/*! exports provided: ModuloAviseMe */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloAviseMe", function() { return ModuloAviseMe; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");


/**
 * Modulo de quantidade
 * Permite escolher a quantidade de um sku
 */

var ModuloAviseMe = function ModuloAviseMe() {
  var elemento = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ".avise-me-container:first-child";
  var componentStore = arguments.length > 1 ? arguments[1] : undefined;
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, elemento, componentStore);

  var _this = this;

  this._opcoes = {
    titulo: 'Avise-me quando o produto <span id="avise-me-produto-nome"></span> estiver disponível',
    subtitulo: "",
    fechar: "&#215;",
    placeholderNome: "Digite seu nome...",
    placeholderEmail: "Digite seu e-mail...",
    btnSubmit: "Enviar",
    msgSucesso: "Cadastrado com sucesso!",
    msgErro: "Ocorreu algum erro. Tente novamente mais tarde."
  };
  /**
   * Configura os eventos js que serão diparados pelo html do desenhar()
   * @return {object} this
   */

  this.configurar = function (opcoes) {
    this.opcoes($.extend({}, this._opcoes, opcoes));

    this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_1__["SKU_REF"], function (event, sku) {
      _this.atualizar(sku);
    });

    this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_1__["CHANGE_SKU"], function (event, sku) {
      _this.atualizar(sku);
    });

    return this;
  };
  /**
   * Atualiza a quantidade de acordo com o novo sku
   * @param  {Event} event evento que disparou atualização
   * @param  {Object} novoSku objeto do sku selecionado
   * @return {Object} this
   */


  this.atualizar = function (novoSku) {
    if (!novoSku) {
      novoSku = {
        available: false
      };
    }

    if (!novoSku.available) {
      this.elemento().find("#sku-avise-me").val(novoSku.sku);
      this.elemento().find("#avise-me-produto-nome").val(novoSku.skuname);
    }

    this.elemento().toggle(!novoSku.available);
    return this;
  };
  /**
   * Cria e insere o html com as variações dos skus
   * @return {object} this
   */


  this.desenhar = function () {
    if ($(".form-avise-me").length == 0) {
      var container = $("<div />").addClass("avise-me-container").appendTo(this.elemento());
      var fieldset = $("<fieldset />").addClass("form-avise-me").appendTo(container);
      $("<a />").attr({
        "class": "close",
        text: this.opcoes().fechar
      }).click(function () {
        this.elemento().hide();
      }.bind(this)).appendTo(fieldset);
      $("<h2 />", {
        html: this.opcoes().titulo
      }).appendTo(fieldset);

      if (this.opcoes().subtitulo) {
        $("<h3 />", {
          html: this.opcoes().subtitulo
        }).appendTo(fieldset);
      }

      var fieldsWrapper = $("<div/>", {
        "class": "avise-me-wrapper"
      }).appendTo(fieldset);
      $("<input />", {
        name: "notifymeClientName",
        type: "text",
        id: "nome-avise-me",
        size: "20",
        placeholder: this.opcoes().placeholderNome
      }).appendTo(fieldsWrapper);
      $("<input />", {
        name: "notifymeClientEmail",
        type: "text",
        id: "email-avise-me",
        size: "20",
        placeholder: this.opcoes().placeholderEmail
      }).appendTo(fieldsWrapper);
      $("<input />", {
        name: "notifymeIdSku",
        type: "hidden",
        id: "sku-avise-me",
        "class": "notifyme-skuid",
        value: 0
      }).appendTo(fieldset);
      $("<input />", {
        name: "notifymeButtonOK",
        type: "button",
        id: "enviar-avise-me",
        "class": "btn-enviar",
        value: this.opcoes().btnSubmit
      }).click(this.enviar.bind(this)).appendTo(fieldset);
      $("<p />", {
        "class": "status"
      }).appendTo(fieldset);
    }

    this.atualizar(this._store.state.selectedSku);
    return this;
  };
  /**
   * Funçõa que envia registra a solicitação de "avise-me"
   */


  this.enviar = function () {
    var aviseme = this.elemento().find(".form-avise-me");

    if (!this.validar(aviseme)) {
      return false;
    }

    $.ajax({
      type: "POST",
      url: "/no-cache/AviseMe.aspx",
      data: aviseme.serialize(),
      success: function () {
        aviseme.find("p.status").html(this.opcoes().msgSucesso).addClass("msgSucesso");
        aviseme.find("input").hide();
        aviseme.find("h3").hide();
      }.bind(this),
      error: function () {
        aviseme.find("p.status").html(this.opcoes().msgErro).addClass("msgErro");
      }.bind(this)
    });
  };
  /**
   * Função para validar os dados do formulário
   * @param {jQueryElement} aviseme
   */


  this.validar = function validar(aviseme) {
    var nome = aviseme.find("#nome-avise-me");
    var email = aviseme.find("#email-avise-me");
    var filter = /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i; // if( nome.val() == '' ) {
    // 	alert( 'Por favor, digite seu nome' );
    // 	nome.focus();
    // 	return false;
    // }

    if (!filter.test(email.val())) {
      alert("Por favor, digite o email corretamente");
      email.focus();
      return false;
    }

    return true;
  };
}; // subclasse extende superclasse

ModuloAviseMe.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloAviseMe.prototype.constructor = ModuloAviseMe;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/ModuloBotaoDeCompra.js":
/*!***********************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/ModuloBotaoDeCompra.js ***!
  \***********************************************************************/
/*! exports provided: ModuloBotaoDeCompra */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloBotaoDeCompra", function() { return ModuloBotaoDeCompra; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");


/**
 * Modulo de compra
 * permite adicopnar produtos ao carinho
 * fornece o formulario de avise-me para produtos indisponiveis
 * exibe popup de "porduto adicionado ao carrinho"
 *
 * usa api vtex para adicionar no carrinho
 * @link https://github.com/vtex/vtex.js/tree/master/docs/checkout#addtocartitems-expectedorderformsections-saleschannel
 */

var ModuloBotaoDeCompra = function ModuloBotaoDeCompra() {
  var elemento = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ".btnBuy";
  var componentStore = arguments.length > 1 ? arguments[1] : undefined;
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, elemento, componentStore);

  var _this = this;

  _this.produtoEscolhido = {
    sku: null,
    quantidade: 1
  };
  this._opcoes = {
    botaoCompra: "Comprar",
    botaoSkuIndisponivel: "Produto indisponível",
    msgVariacaoErro: "<p>Escolha uma variação.</p>",
    msgByEvent: false,
    msgAddCarrinhoErro: "<p>Não foi possivel adicionar ao carrinho!</p>",
    msgAddCarrinhoSucesso: "<p>Seu produto foi adicionado ao carrinho com sucesso!</p><p>O que deseja fazer agora?</p>",
    botaoContinuarComrpando: "Continuar comprando",
    botaoFinalizarCompra: "Finalizar compra",
    icone: ""
  };
  /**
   * Atualiza a quantidade de acordo com o novo sku
   * @param  {Event} event evento que disparou atualização
   * @param  {Object} value objeto do sku selecionado
   * @return {Object} this
   */

  this.atualizar = function (event, value) {
    if (event) {
      switch (event) {
        case "change-quantidade":
          _this.produtoEscolhido.quantidade = value;
          break;

        case "change-sku":
          _this.produtoEscolhido.sku = value;
          this.habilitar(value.available);
          break;

        default:
          console.warn("Evento desconhecido");
          break;
      }
    } else {
      console.warn("Essa funcao só deve ser chamada por eventos js");
    }

    return this;
  };

  this.obterCannalDeVendas = function () {
    var name = "VTEXSC=sc=";
    var ca = document.cookie.split(";");

    for (var i = 0; i < ca.length; i++) {
      var c = ca[i];

      while (c.charAt(0) == " ") {
        c = c.substring(1);
      }

      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }

    return 1;
  };
  /**
   * Configura os eventos js que serão diparados pelo html do desenhar()
   * @return {object} this
   */


  this.configurar = function (opcoes) {
    this.opcoes($.extend({}, this._opcoes, opcoes));
    this.opcoes.cannalDeVendas = this.obterCannalDeVendas();

    this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_1__["CHANGE_SKU"], this.atualizar.bind(this));

    this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_1__["CHANGE_QTD"], this.atualizar.bind(this));

    this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_1__["ADD_SKU_TO_CART_SUCESS"], this.sucessoAjax.bind(this));

    this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_1__["ADD_SKU_TO_CART_FAIL"], this.erroAjax.bind(this));

    return this;
  };
  /**
   * Cria e insere o html com as variações dos skus
   * @return {object} this
   */


  this.desenhar = function () {
    var html = "\n\t\t\t<a class=\"btn-compra\" id=\"buy-btn\">\n\t\t\t\t".concat(this.opcoes().botaoCompra, "\n\t\t\t</a>\n\t\t");
    this.elemento().append(html);
    $(".btn-compra").click(this.compra.bind(this));
    return this;
  };

  this.compra = function () {
    this.elemento().addClass('loading');

    if (_this.produtoEscolhido.sku === null) {
      mensagemErro(this.opcoes().msgVariacaoErro);
    } else if (!_this.produtoEscolhido.sku.available && _this.produtoEscolhido.quantidade < 1) {
      this._store.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["ADD_SKU_TO_CART_FAIL"], _this.produtoEscolhido);
    } else {
      try {
        window.vtexjs.checkout.addToCart([{
          id: _this.produtoEscolhido.sku.sku,
          quantity: _this.produtoEscolhido.quantidade,
          seller: _this.produtoEscolhido.sku.sellerId
        }], null, this.opcoes.cannalDeVendas).done(function (orderForm) {
          this._store.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["ADD_SKU_TO_CART_SUCESS"], {
            simpleProducts: _this.produtoEscolhido,
            orderForm: orderForm
          });

          $(window).trigger("orderFormUpdated.vtex", [orderForm]);
        }.bind(this)).fail(function () {
          this._store.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["ADD_SKU_TO_CART_FAIL"], {
            simpleProducts: _this.produtoEscolhido
          });
        }.bind(this)).always(function () {
          this.elemento().removeClass('loading');
        }.bind(this));
      } catch (error) {
        this._store.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["ADD_SKU_TO_CART_FAIL"], {
          simpleProducts: _this.produtoEscolhido
        });

        console.warn("Erro ao adicionar sku ao carrinho de compra");
        console.log(error);
      }
    }
  };

  this.sucessoAjax = function (items) {
    if (!this._opcoes.msgByEvent) {
      var fechar = function fechar() {
        var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
        if (event !== null) event.preventDefault();
        $popup.removeClass("show");
        $popup.remove();
        $overlay.remove();
      };

      var abrirMiniCart = function abrirMiniCart(e) {
        e.preventDefault();
        $(document).trigger("showMiniCart");
        fechar();
      };

      var $popup = $("<div />", {
        "class": "modal-add-cart modal"
      });
      var $popupBox = $("<div />", {
        "class": "modal-add-cart__box"
      }).appendTo($popup);
      var $overlay = $("<div />", {
        "class": "modal-add-cart__overlay modal-overlay"
      }).click(fechar);
      $("<button />", {
        html: "<i class='sprite sprite-fechar'></i>",
        "class": "close"
      }).click(fechar).appendTo($popupBox);
      var $information = $("<div />", {
        "class": "information"
      }).appendTo($popupBox);
      $("<img />", {
        src: _this.produtoEscolhido.sku.image,
        alt: _this.produtoEscolhido.sku.skuname
      }).appendTo($information);
      $("<div />", {
        "class": "descricao",
        html: _this._opcoes.msgAddCarrinhoSucesso
      }).appendTo($information);
      var $acoes = $("<div />", {
        "class": "acoes"
      }).appendTo($popupBox);
      $("<a />", {
        href: "#",
        "class": "continue",
        text: _this._opcoes.botaoContinuarComprando
      }).click(fechar).appendTo($acoes);
      $("<a />", {
        href: "/checkout/#/cart",
        "class": "cart",
        target: "_top",
        text: _this._opcoes.botaoFinalizarCompra
      }).appendTo($acoes);
      this.elemento().find(".erro-add-cart").fadeOut("slow"); // $popup.hide().appendTo(this.elemento()).fadeIn('slow');

      $popup.appendTo(this.elemento());
      $overlay.insertAfter($popup);
      $popup.addClass("show");
      $("#show-minicart").click(abrirMiniCart);
      setTimeout(function () {
        fechar();
      }, 4000);
    }
  };

  this.erroAjax = function () {
    mensagemErro(_this.opcoes().msgAddCarrinhoErro);
  };
  /**
   * Altera o texto do botão para produtos indisponiveis
   * @param {boolean} habilitar
   */


  this.habilitar = function (habilitar) {
    habilitar = typeof habilitar == "undefined" ? true : habilitar;
    this.elemento().toggleClass("desativado", !habilitar);
    var textBtn = habilitar ? this.opcoes().icone + this.opcoes().botaoCompra : this.opcoes().botaoSkuIndisponivel;
    this.elemento().find(".btn-compra").html(textBtn);
  };

  function mensagemErro(mensagemDeErro) {
    if (_this.elemento().find(".erro-add-cart").length < 1) {
      var container = $("<div />", {
        "class": "erro-add-cart"
      }).prependTo(_this.elemento()); // btn fechar

      $("<span />").attr({
        "class": "close"
      }).click(function (event) {
        event.preventDefault();
        container.fadeOut("slow");
      }).appendTo(container);
      $("<div />", {
        "class": "info",
        html: mensagemDeErro
      }).appendTo(container);
    } else {
      _this.elemento().find(".erro-add-cart").fadeIn("slow");
    }

    setTimeout(function () {
      _this.elemento().find(".erro-add-cart").fadeOut("slow");
    }.bind(this), 1000);

    _this.elemento().find(".modal-add-cart").remove();

    _this.elemento().find(".modal-add-cart__overlay").remove();
  }
}; // subclasse extende superclasse

ModuloBotaoDeCompra.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloBotaoDeCompra.prototype.constructor = ModuloBotaoDeCompra;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/ModuloCompreJunto.js":
/*!*********************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/ModuloCompreJunto.js ***!
  \*********************************************************************/
/*! exports provided: ModuloCompreJunto */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloCompreJunto", function() { return ModuloCompreJunto; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./util */ "./src/arquivos/js/lib/ComponentesProduto/util.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");



/**
 * Modulo de quantidade
 * Permite escolher a quantidade de um sku
 */

var ModuloCompreJunto = function ModuloCompreJunto() {
  var elemento = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ".compre-junto";
  var componentStore = arguments.length > 1 ? arguments[1] : undefined;
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, elemento, componentStore);
  this._opcoes = {
    titulo: "Compre junto"
  };
}; // subclasse extende superclasse

ModuloCompreJunto.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloCompreJunto.prototype.constructor = ModuloCompreJunto;
/**
 * Configura os eventos js que serão diparados pelo html do desenhar()
 * @return {object} this
 */

ModuloCompreJunto.prototype.configurar = function (opcoes) {
  this.opcoes($.extend({}, this._opcoes, opcoes));

  this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_2__["CHANGE_SKU"], this.atualizar.bind(this));

  return this;
};
/**
 * Atualiza a quantidade de acordo com o novo sku
 * @param  {Event} event evento que disparou atualização
 * @param  {Object} novoSku objeto do sku selecionado
 * @return {Object} this
 */


ModuloCompreJunto.prototype.atualizar = function (event) {
  var novoSku = JSON.parse(sessionStorage.getItem("sku-selecionado"));

  if (!novoSku) {
    novoSku = {
      available: false
    };
  }

  if (novoSku.available) {
    var tabelaAtual = this.elemento().find(".produto-" + novoSku.sku);

    if (tabelaAtual.length != 0) {
      this.habilitar(true);
      this.elemento().find(".produtos>div").slideUp(600, function () {
        tabelaAtual.slideDown(600);
        this.elemento().trigger("change-compre-junto", tabelaAtual);
      }.bind(this));
    } else {
      this.buscarCompreJunto(novoSku.sku);
    }
  } else {
    this.habilitar(false);
  }
};
/**
 * Cria e insere o html com as variações dos skus
 * @return {object} this
 */


ModuloCompreJunto.prototype.desenhar = function () {
  this.elemento().addClass("desativado");
  $("<h2 />", {
    "class": "special-title",
    text: this.opcoes().titulo
  }).appendTo(this.elemento());
  $("<div />", {
    "class": "produtos"
  }).appendTo(this.elemento());
  return this;
};
/**
 * Cria e insere o html com as variações dos skus
 * Funçõa que busca os produtos disponiveis para
 * comprar junto com o produto = skuid
 * @param  skuId
 */


ModuloCompreJunto.prototype.buscarCompreJunto = function (skuId) {
  function sucesso(htmlCJVtex, textStatus, jqXHR) {
    if (htmlCJVtex.trim().length > 1) {
      var containerCompreJunto, imagens, $produtos;
      containerCompreJunto = $("<div />", {
        "class": "produto-" + skuId,
        html: htmlCJVtex
      });
      $produtos = this.elemento().find(".produtos");
      $produtos.children().slideUp(600);
      $produtos.append(containerCompreJunto);
      this.habilitar(!0);
      imagens = $(".moduloCompreJunto .itemA img, .moduloCompreJunto .itemB img");

      for (var i = 0; i < imagens.length; i++) {
        imagens[i].setAttribute("src", Object(_util__WEBPACK_IMPORTED_MODULE_1__["alterarTamanhoImagemSrcVtex"])(imagens[i].src, 265, 403));
      }

      this.elemento().trigger("change-compre-junto", containerCompreJunto);
    }
  }

  function erro(jqXHR, textStatus, errorThrown) {
    console.warn(errorThrown);
    this.habilitar(false);
  }

  var jqXHR = $.get("/comprejuntosku/" + skuId);
  jqXHR.done(sucesso.bind(this)).fail(erro.bind(this));
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/ModuloPreco.js":
/*!***************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/ModuloPreco.js ***!
  \***************************************************************/
/*! exports provided: ModuloPreco */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloPreco", function() { return ModuloPreco; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SubModulos/ModulosTiposDePreco */ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModulosTiposDePreco.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");



/**
 * modulo preco
 * Mantem o preço de exibição atualizado
 */

var ModuloPreco = function ModuloPreco() {
  var elemento = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ".preco-produto";
  var componentStore = arguments.length > 1 ? arguments[1] : undefined;
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, elemento, componentStore);
  this.opcoes({
    precoDe: {
      ativo: true
    },
    precoPor: {
      ativo: true
    },
    parcelado: {
      auto: false,
      ativo: false,
      parcelas: 6
    },
    boleto: {
      ativo: true,
      percentual: 5
    }
  });
  this.precos = [];

  var _this = this;
  /**
   * Configura os eventos js que serão diparados pelo html do desenhar()
   * @return {object} this
   */


  this.configurar = function (opcoes) {
    this.opcoes($.extend({}, this._opcoes, opcoes));

    this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_2__["SKU_REF"], function (event, sku) {
      _this.atualizar(sku);
    });

    this._store.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_2__["CHANGE_SKU"], function (event, sku) {
      _this.atualizar(sku);
    });

    return this;
  };
  /**
   * Cria e insere o html com as formas de pagamento
   * @return {object} this
   */


  this.desenhar = function () {
    var container = $("<div />", {
      "class": "container-precos",
      css: "display:none"
    }).appendTo(this.elemento());

    if (this.opcoes().precoDe.ativo) {
      var moduloPrecoDe = new _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_1__["ModuloPrecoDe"]("", componentStore);
      moduloPrecoDe.configurar(this.opcoes().precoDe);
      this.elemento().append(moduloPrecoDe.desenhar());
      this.precos.push(moduloPrecoDe);
    }

    if (this.opcoes().precoPor.ativo) {
      var moduloPrecoPor = new _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_1__["ModuloPrecoPor"]("", componentStore);
      moduloPrecoPor.configurar(this.opcoes().precoPor);
      this.elemento().append(moduloPrecoPor.desenhar());
      this.precos.push(moduloPrecoPor);
    }

    if (this.opcoes().parcelado.ativo) {
      var moduloPrecoParcelado = new _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_1__["ModuloPrecoParcelado"]("", componentStore);
      moduloPrecoParcelado.configurar(this.opcoes().parcelado);
      this.elemento().append(moduloPrecoParcelado.desenhar());
      this.precos.push(moduloPrecoParcelado);
    }

    if (this.opcoes().boleto.ativo) {
      var moduloPrecoBoleto = new _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_1__["ModuloPrecoBoleto"]("", componentStore);
      moduloPrecoBoleto.configurar(this.opcoes().boleto);
      this.elemento().append(moduloPrecoBoleto.desenhar());
      this.precos.push(moduloPrecoBoleto);
    }

    return this;
  };
  /**
   * Atualiza os precos de acordo com o novo sku
   * @param  {Event} event evento que disparou atualização
   * @param  {Object} novoSku objeto do sku selecionado
   * @return {Object} this
   */


  this.atualizar = function (novoSku) {
    if (!novoSku) {
      novoSku = {
        available: false
      };
    }

    if (novoSku.available) {
      for (var tiposPreco in this.precos) {
        if (this.precos.hasOwnProperty(tiposPreco)) {
          this.precos[tiposPreco].atualizar(novoSku);
        }
      }

      this.elemento().css("display", "block");
    } else {// this.elemento().css('display', 'none');
    }

    return this;
  };
  /**
   * Get/Set configuraçoes de tipos de precos
   * @param  {Object} tipo um objeto contendo informações das formas de pagamento
   * @return {Object} 	objeto de configuracao
   */


  this.tiposPreco = function (tipo) {
    if (tipo) {
      this._tiposPreco = $.extend({}, this._tiposPreco, tipo);
    }

    return this._tiposPreco;
  };
}; // subclasse extende superclasse

ModuloPreco.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloPreco.prototype.constructor = ModuloPreco;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/ModuloQuantidade.js":
/*!********************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/ModuloQuantidade.js ***!
  \********************************************************************/
/*! exports provided: ModuloQuantidade */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloQuantidade", function() { return ModuloQuantidade; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");


/**
 * Modulo de quantidade
 * Permite escolher a quantidade de um sku
 */

var ModuloQuantidade = function ModuloQuantidade() {
  var elemento = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : ".qtd-selector-content:first-child";
  var componentStore = arguments.length > 1 ? arguments[1] : undefined;
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, elemento, componentStore);
  this._opcoes = {
    maxEstoque: 50
  };

  var _this = this;
  /**
   * Configura os eventos js que serão diparados pelo html do desenhar()
   * @return {object} this
   */


  this.configurar = function (opcoes) {
    this.opcoes($.extend({}, this._opcoes, opcoes));
    componentStore.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_1__["SKU_REF"], function () {
      var novoSku = JSON.parse(sessionStorage.getItem("sku-referencial"));

      _this.atualizar(novoSku);
    });
    componentStore.events.subscribe(_EventType__WEBPACK_IMPORTED_MODULE_1__["CHANGE_SKU"], function (eventName, value) {
      _this.atualizar(value);
    });
    return this;
  };
  /**
   * Atualiza a quantidade de acordo com o novo sku
   * @param  {Event} event evento que disparou atualização
   * @param  {Object} novoSku objeto do sku selecionado
   * @return {Object} this
   */


  this.atualizar = function (novoSku) {
    if (!novoSku) {
      novoSku = {
        available: false
      };
    }

    if (novoSku.available) {
      var estoque,
          skuId = novoSku.sku;

      try {
        estoque = window.dataLayer[0].skuStocks[skuId];
        estoque = estoque === undefined ? novoSku.availablequantity : estoque;
      } catch (e) {
        console.warn("Erro ao buscar estoque no dataLayer, usado o availablequantity");
        estoque = novoSku.availablequantity;
      }

      estoque = estoque > this.opcoes().maxEstoque ? this.opcoes().maxEstoque : estoque;
      this.moduloExibicao().atualizar(estoque);
    } else {
      this.moduloExibicao().atualizar(0);
      this.elemento().addClass("desativado");
    }

    return this;
  };
  /**
   * Cria e insere o html com as variações dos skus
   * @return {object} this
   */


  this.desenhar = function () {
    if (this.moduloExibicao()) {
      this.moduloExibicao().elemento(this.elemento());
      this.moduloExibicao().desenhar();
    } else {
      console.warn("Modulo de exibição não definido");
    }

    return this;
  };
  /**
   * Get/Set moduloExibicao do modulo
   * @param  {JSON} moduloExibicao seletor em formato cssopções do modulo
   * @return {JSON}
   */


  this.moduloExibicao = function (moduloExibicao) {
    if (moduloExibicao) this._moduloExibicao = moduloExibicao;
    return this._moduloExibicao;
  };
}; // subclasse extende superclasse

ModuloQuantidade.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloQuantidade.prototype.constructor = ModuloQuantidade;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/ModuloSkus.js":
/*!**************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/ModuloSkus.js ***!
  \**************************************************************/
/*! exports provided: ModuloSkus */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloSkus", function() { return ModuloSkus; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");


/**
 * modulo de seleção dos skus
 * Permite escolher o Sku desejado
 */

var ModuloSkus = function ModuloSkus(skuJson) {
  var elemento = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : ".skuSelection";
  var componentStore = arguments.length > 2 ? arguments[2] : undefined;
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, elemento, componentStore);
  sessionStorage.removeItem("sku-selecionado");
  this._skuJson = skuJson;
  var skuReferencial;
  /**
   * Atualiza os valores no html que foi criado
   * @return {object} this
   */

  this.atualizar = function () {
    this.desenhar();
    return this;
  };
  /**
   * Escolhe os primeiros skus de cada variação
   * @return {object} this
   */


  this.setDefauls = function () {
    return this;
  };
  /**
   * Cria e insere o html com as variações dos skus
   * @param  {Object} mapaEspecificacoes Mapa das especificações do produto
   * @return {object} this
   */


  this.desenhar = function () {
    return this;
  };
  /**
   * Configura os eventos de atualizacao
   * @return {object} this
   */


  this.configurar = function () {
    return this;
  };

  this.escolherSku = function (sku) {
    if (sku) {
      componentStore.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["CHANGE_SKU"], sku);
      componentStore.commit("setSelectedSku", sku);
    } else {
      console.warn("Não conseguimos identificar o sku correspondente"); // console.warn(especificacoesDoSku);
    }
  };

  this.escolherSkuReferencia = function (sku) {
    if (typeof skuReferencial === "undefined") {
      skuReferencial = sku;
      /**
       * para capturar o evento
       * $(document).on( 'change-sku' , function(event, novoSku){} );
       */

      sessionStorage.setItem("sku-referencial", JSON.stringify(sku));
      componentStore.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["SKU_REF"], sku);
      componentStore.commit("setSelectedSku", sku);
      componentStore.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["CHANGE_SKU"], sku);
    }
  };
}; // subclasse extende superclasse

ModuloSkus.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloSkus.prototype.constructor = ModuloSkus;

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloBtnQtd.js":
/*!***************************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloBtnQtd.js ***!
  \***************************************************************************/
/*! exports provided: ModuloBtnQtd */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloBtnQtd", function() { return ModuloBtnQtd; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");


var ModuloBtnQtd = function ModuloBtnQtd(componentStore) {
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, null, componentStore);
  this.elemento(".qtd-selector");
  this.store(componentStore);
  this._opcoes = {
    titulo: "Quantidade:",
    opcaoIndisponivel: "Indisponível",
    max: "1",
    min: "1",
    "default": "1",
    isSelect: false
  };

  this._store.commit("setQtd", this._opcoes["default"]);
}; // subclasse extende superclasse

ModuloBtnQtd.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloBtnQtd.prototype.constructor = ModuloBtnQtd;
/**
 * Cria html
 * @return {jQueryElement}	Elemento jquery contendo o campo para informar a quantidade
 */

ModuloBtnQtd.prototype.desenhar = function () {
  var divQtd = $("<div />", {
    "class": "quantidade"
  });
  $("<span />", {
    "class": "titulo",
    text: this.opcoes().titulo
  }).appendTo(divQtd);
  var campoQtd = $("<div />", {
    "class": "campo-qtd"
  }).appendTo(divQtd);

  if (this._opcoes.isSelect) {
    var select = $("<select/>", {
      "class": "qtd-select",
      value: this._store.state.qtd
    }).appendTo(campoQtd);

    for (var index = 1; index < this._opcoes.max; index++) {
      $("<option/>", {
        "class": "qtd-option",
        value: i,
        selected: i === 1 ? true : false
      }).appendTo(select);
    }
  } else {
    var buttonRemove = $("<button />", {
      "class": "remove-from-cart",
      "aria-label": "Remover item"
    }).on("click", this.decrementBtn.bind(this)).text("-").appendTo(campoQtd);
    var label = $("<label />", {
      "class": "container-qtd"
    }).appendTo(campoQtd);
    var inputQtd = $("<input />", {
      "class": "qtd-value",
      "aria-label": "Número de itens",
      type: "number",
      "data-min": this.opcoes().min,
      "data-max": this.opcoes().max,
      value: this._store.state.qtd
    }).appendTo(label);
    var buttonAdd = $("<button />", {
      "class": "add-to-cart",
      "aria-label": "Adicionar item"
    }).on("click", this.incrementBtn.bind(this)).text("+").appendTo(campoQtd);
    divQtd.appendTo(this.elemento());
  }

  this.inputChange();
  return this;
};

ModuloBtnQtd.prototype.onChange = function (input) {
  var $inputQuantidade = input; //obtem os valores de quantidade selecionada e quantidade maxima

  var min = parseInt($inputQuantidade.attr("data-min"));
  var max = parseInt($inputQuantidade.attr("data-max"));
  var qtd = parseInt($inputQuantidade.val());

  if (qtd < min || isNaN(qtd)) {
    this.notificarValor("Minimo: " + min);
    qtd = min;
  } else if (qtd > max) {
    this.notificarValor("Maximo: " + max);
    qtd = max;
  } //atualiza todos os skus


  $(".quantidade .qtd-value").val(qtd);
  console.log(qtd);

  this._store.commit("setQtd", qtd);

  this._store.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["CHANGE_QTD"], qtd);

  return this;
};
/**
 * Atualiza o estoque( max )
 * @param {float} novoEstoque valor para atualizacao do estoque
 */


ModuloBtnQtd.prototype.atualizar = function (novoEstoque) {
  var $inputQuantidade = $(".quantidade .qtd-value");
  $inputQuantidade.data("max", novoEstoque);

  if (novoEstoque > 0) {
    this.habilitar(true);
  } // else {
  // 	this.habilitar(false);
  // }


  return this;
};

ModuloBtnQtd.prototype.inputChange = function () {
  var _this = this;

  $("input[class='qtd-value']").on("focusout", function () {
    ModuloBtnQtd.prototype.onChange($(_this)).bind(_this);
  });
};

ModuloBtnQtd.prototype.incrementBtn = function () {
  var button = this.elemento().find(".add-to-cart");
  var qtd = this.elemento().find(".quantidade .container-qtd").find(".qtd-value");

  if ($.isNumeric(qtd.val())) {
    var valueQtd = parseInt(qtd.val());
    valueQtd += 1;
    qtd.val(valueQtd);
  } else {
    qtd.val(1);
  }

  ModuloBtnQtd.prototype.onChange.call(this, qtd);
};

ModuloBtnQtd.prototype.decrementBtn = function () {
  var button = this.elemento().find(".remove-from-cart");
  var qtd = this.elemento().find(".quantidade .container-qtd").find(".qtd-value");

  if ($.isNumeric(qtd.val())) {
    var valueQtd = parseInt(qtd.val());

    if (valueQtd > 1) {
      valueQtd -= 1;
      qtd.val(valueQtd);
    }
  } else {
    qtd.val(1);
  }

  ModuloBtnQtd.prototype.onChange.call(this, qtd);
};

ModuloBtnQtd.prototype.notificarValor = function (msg) {
  var notificacao = $(".moduloQuantidade").find(".notificacao");

  if (!notificacao.length) {
    notificacao = $("<div />", {
      "class": "notificacao"
    }).appendTo($(".moduloQuantidade").find(".container-qtd"));
  }

  notificacao.empty().text(msg).fadeIn("slow");
  var timer = setTimeout(function () {
    notificacao.fadeOut("slow");
  }.bind(this), 4000);
  return this;
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSelect.js":
/*!***************************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSelect.js ***!
  \***************************************************************************/
/*! exports provided: ModuloSelect */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloSelect", function() { return ModuloSelect; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");


var ModuloSelect = function ModuloSelect(componentStore) {
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, null, componentStore);
  this.elemento(".qtd-selector");
  this._opcoes = {
    titulo: "Quantidade",
    opcaoDefault: "Selecione",
    opcaoIndisponivel: "Indisponivel"
  };
}; // subclasse extende superclasse

ModuloSelect.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloSelect.prototype.constructor = ModuloSelect;
/**
 * Cria html
 * @return {jQueryElement}	Elemento jquery contendo o seletor de quantidade
 */

ModuloSelect.prototype.desenhar = function () {
  var $qtd = $("<div />", {
    "class": "qtd-selector"
  });
  $("<span />", {
    "class": "titulo",
    text: this.opcoes().titulo
  }).appendTo($qtd);
  $("<span />", {
    "class": "wrap-select"
  }).appendTo($qtd).append($("<select />", {
    "class": "quantidade"
  }).on("change", this.onChange.bind(this)));
  $qtd.appendTo(this.elemento());
  return this;
};

ModuloSelect.prototype.onChange = function () {
  var quantidade = this.elemento().find(".quantidade").val();

  this._store.commit("setQtd", quantidade);

  this._store.events.publish(_EventType__WEBPACK_IMPORTED_MODULE_1__["CHANGE_QTD"], quantidade);
};
/**
 * Atualiza o estoque( max )
 * @param {float} novoEstoque valor para atualizacao do estoque
 */


ModuloSelect.prototype.atualizar = function (novoEstoque) {
  var opcoes;

  if (novoEstoque > 0) {
    opcoes = '<option value="0" disabled >' + this.opcoes().opcaoDefault + "</option>";

    for (var i = 1; i < novoEstoque; i++) {
      opcoes += '<option value="' + i + '">' + i + "</option>";
    }

    this.elemento().removeClass("desabilitado");
  } else {
    opcoes = '<option value="0" disabled selected >' + this.opcoes().opcaoIndisponivel + "</option>";
    this.elemento().addClass("desabilitado");
  }

  this.elemento().find(".quantidade").html(opcoes);
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSkusPorEspecificacoes.js":
/*!******************************************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSkusPorEspecificacoes.js ***!
  \******************************************************************************************/
/*! exports provided: ModuloSkusPorEspecificacoes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloSkusPorEspecificacoes", function() { return ModuloSkusPorEspecificacoes; });
/* harmony import */ var _ModuloSkus__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../ModuloSkus */ "./src/arquivos/js/lib/ComponentesProduto/ModuloSkus.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/arquivos/js/lib/ComponentesProduto/util.js");


/**
 * modulo de seleção dos skus
 * Permite escolher o Sku desejado
 */

var ModuloSkusPorEspecificacoes = function ModuloSkusPorEspecificacoes(skuJson, elemento, componentStore) {
  _ModuloSkus__WEBPACK_IMPORTED_MODULE_0__["ModuloSkus"].call(this, skuJson, elemento, componentStore);
  sessionStorage.removeItem("sku-selecionado");

  var _this = this;

  this._opcoes = {
    especificacaoComImagem: ""
  };
  this.prefix = {
    cor: "",
    tamanho: ""
  };
  /**
   * Escolhe os primeiros skus de cada variação
   * @return {object} this
   */

  this.setDefauls = function () {
    var bestSku = getBestSku();
    this.escolherSkuReferencia(bestSku);
    componentStore.commit("setSelectedSku", bestSku); // if(_this._skuJson.skus.length === 1){
    // forçar escolha do unico sku

    for (var especificacao in bestSku.dimensions) {
      if (bestSku.dimensions.hasOwnProperty(especificacao)) {
        var valorEspecificacao = bestSku.dimensions[especificacao];
        var $especificacao = producraInputNtmlParaEspecificacao(especificacao, valorEspecificacao);

        this._elemento.find(".sku-selected.".concat(especificacao, " .result")).text(valorEspecificacao);

        $especificacao.prop("checked", true);
      }
    }

    this.escolherSku(bestSku); // }

    return this;
  };
  /* Prefixa o nome da especificação de acordo com a dimensão passada */


  this.prefixDimensionName = function (dimension) {
    var value = dimension.toLowerCase();

    if (_this.prefix[value]) {
      return "".concat(_this.prefix[value], " ").concat(value, ":");
    } else {
      return "".concat(dimension, ":");
    }
  };
  /**
   * Cria e insere o html com as variações dos skus
   * @param  {Object} mapaEspecificacoes Mapa das especificações do produto
   * @return {object} this
   */


  this.desenhar = function () {
    if (!_this._skuJson.dimensionsMap || _this._skuJson.dimensionsMap.length === 0) {
      console.warn("Erro! para de especificações não identificado.");
      return this;
    } // var $especificacao = $('<div />', {
    // 	class: 'skus-selection'
    // }).appendTo(this.elemento());


    for (var indice in _this._skuJson.dimensions) {
      if (_this._skuJson.dimensions.hasOwnProperty(indice)) {
        var nomeEspecificacao = _this._skuJson.dimensions[indice];
        var values = _this._skuJson.dimensionsMap[nomeEspecificacao];
        var $especificacao = $("<div />", {
          "class": "especificacao " + Object(_util__WEBPACK_IMPORTED_MODULE_1__["textoParaNomeCss"])(nomeEspecificacao),
          "data-especificacao": Object(_util__WEBPACK_IMPORTED_MODULE_1__["textoParaNomeCss"])(nomeEspecificacao)
        }).appendTo(_this.elemento());
        $("<div />", {
          "class": "titulo",
          text: "Selecione a " + _this.prefixDimensionName(nomeEspecificacao)
        }).appendTo($especificacao);
        var $lista = $("<ul />", {
          "class": "skus"
        }).appendTo($especificacao);
        var nameCampo = Object(_util__WEBPACK_IMPORTED_MODULE_1__["textoParaNomeCss"])(nomeEspecificacao + "_" + i);

        if (values.length < 2) {
          $($especificacao).addClass("single-option");
        }

        for (var i = 0; i < values.length; i++) {
          var item = $("<li />", {
            "class": "sku"
          }).appendTo($lista);
          var idText = Object(_util__WEBPACK_IMPORTED_MODULE_1__["textoParaNomeCss"])(nomeEspecificacao + "_" + values[i] + "_" + i);
          $("<input />", {
            "data-especificacao": values[i],
            "data-especificacao-title": nomeEspecificacao,
            val: values[i],
            id: idText,
            type: "radio",
            name: nameCampo
          }).appendTo(item);
          var $label = $("<label />", {
            "for": idText,
            "class": idText
          }).appendTo(item);

          if (nomeEspecificacao === _this._opcoes.especificacaoComImagem) {
            $label.addClass("image");
            var src = obtemImagemParaEspecificacao(nomeEspecificacao, values[i]);
            $("<img />", {
              src: Object(_util__WEBPACK_IMPORTED_MODULE_1__["alterarTamanhoImagemSrcVtex"])(src, 72, 100),
              title: nomeEspecificacao + ": " + values[i]
            }).appendTo($label);
          } else {
            $label.text(values[i]);
          }
        }

        if (nomeEspecificacao !== "variacao") {
          $("<div/>", {
            "class": "sku-selected " + nomeEspecificacao,
            html: "<span>".concat(nomeEspecificacao, ": </span><span class=\"result\"></span> ")
          }).appendTo($especificacao);
        }
      }
    }

    return this;
  };
  /**
   * Configura os eventos de atualizacao
   * @return {object} this
   */


  this.configurar = function () {
    var _this2 = this;

    $(".especificacao input").on("change", function () {
      var especificacoesDoSku = {},
          sku;
      var nomeEspecificacao = "";
      $(".especificacao input:checked").each(function () {
        nomeEspecificacao = this.getAttribute("data-especificacao-title");
        especificacoesDoSku[nomeEspecificacao] = this.getAttribute("data-especificacao");
      });
      sku = getSkuPorEspecificacoes(especificacoesDoSku);

      _this2._elemento.find(".sku-selected .result").text(especificacoesDoSku[nomeEspecificacao]);

      _this.escolherSku(sku);
    });
    return this;
  };

  function getSkuPorEspecificacoes(especificacoes) {
    return _this._skuJson.skus.find(function (sku) {
      return isEquivalent(sku.dimensions, especificacoes);
    });
  }
  /**
   * @link http://adripofjavascript.com/blog/drips/object-equality-in-javascript.html
   */


  function isEquivalent(a, b) {
    var aProps = Object.getOwnPropertyNames(a);
    var bProps = Object.getOwnPropertyNames(b);

    if (aProps.length != bProps.length) {
      return false;
    }

    for (var i = 0; i < aProps.length; i++) {
      var propName = aProps[i];

      if (a[propName] !== b[propName]) {
        return false;
      }
    }

    return true;
  }

  function getBestSku() {
    var bestSku;

    for (var i in _this._skuJson.skus) {
      if (_this._skuJson.skus.hasOwnProperty(i)) {
        var sku = _this._skuJson.skus[i];

        if (sku.available) {
          bestSku = sku;
          break;
        }
      }
    }

    if (typeof bestSku === "undefined") {
      bestSku = _this._skuJson.skus[0];
    }

    return bestSku;
  }

  function producraInputNtmlParaEspecificacao(especificacao, valor) {
    especificacao = Object(_util__WEBPACK_IMPORTED_MODULE_1__["textoParaNomeCss"])(especificacao);

    var $lista = _this.elemento().find('.especificacao[data-especificacao="' + especificacao + '"]');

    return $lista.find('li input[data-especificacao="' + valor + '"]');
  }

  function obtemImagemParaEspecificacao(especificacao, valor) {
    for (var i in _this._skuJson.skus) {
      if (_this._skuJson.skus.hasOwnProperty(i)) {
        var sku = _this._skuJson.skus[i];

        for (var tituloEspecificacao in sku.dimensions) {
          if (sku.dimensions.hasOwnProperty(tituloEspecificacao)) {
            if (tituloEspecificacao === especificacao) {
              if (sku.dimensions[tituloEspecificacao] === valor) {
                var skuData = void 0;
                var urlSku = "/produto/sku/" + sku.sku;
                var jqXHR = $.ajax({
                  url: urlSku,
                  type: "GET",
                  success: function success(value) {
                    var images = value[0].Images;
                    var thumbsCor = images[images.length - 1];
                    skuData = thumbsCor[thumbsCor.length - 1].Path;
                  },
                  async: false
                });

                if (skuData) {
                  return skuData;
                }

                return sku.image;
              }
            }
          }
        }
      }
    }

    return "";
  }
}; // subclasse extende superclasse

ModuloSkusPorEspecificacoes.prototype = Object.create(_ModuloSkus__WEBPACK_IMPORTED_MODULE_0__["ModuloSkus"].prototype);
ModuloSkusPorEspecificacoes.prototype.constructor = ModuloSkusPorEspecificacoes;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSkusPorNome.js":
/*!********************************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSkusPorNome.js ***!
  \********************************************************************************/
/*! exports provided: ModuloSkusPorNome */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloSkusPorNome", function() { return ModuloSkusPorNome; });
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jquery */ "jquery");
/* harmony import */ var jquery__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jquery__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! path */ "./node_modules/path-browserify/index.js");
/* harmony import */ var path__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(path__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var _ModuloSkus__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../ModuloSkus */ "./src/arquivos/js/lib/ComponentesProduto/ModuloSkus.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./src/arquivos/js/lib/ComponentesProduto/util.js");




/**
 * modulo de seleção dos skus
 * Permite escolher o Sku desejado
 */

var ModuloSkusPorNome = function ModuloSkusPorNome(skuJson, elemento, componentStore) {
  _ModuloSkus__WEBPACK_IMPORTED_MODULE_2__["ModuloSkus"].call(this, skuJson, elemento, componentStore);
  sessionStorage.removeItem("sku-selecionado");

  var _this = this;

  this.dimensions = {
    Único: "U"
  };
  this.dimensionToDisplay = {
    name: "Tamanhos",
    label: "Escolha o tamanho:"
  };

  this.changeDimension = function (dimension) {
    for (var key in _this.dimensions) {
      if (key == dimension) {
        return _this.dimensions[key];
      }
    }

    return dimension;
  };
  /**
   * Escolhe os primeiros skus de cada variação
   * @return {object} this
   */


  this.setDefauls = function () {
    var bestSku;

    for (var i in this._skuJson.skus) {
      if (this._skuJson.skus.hasOwnProperty(i)) {
        var sku = this._skuJson.skus[i];

        if (sku.available) {
          bestSku = sku;
          break;
        }
      }
    }

    if (typeof bestSku === "undefined") {
      bestSku = this._skuJson.skus[0];
    }

    this.escolherSkuReferencia(bestSku); // if(_this._skuJson.skus.length === 1){

    $("input[value=\"".concat(bestSku.sku, "\"]")).prop("checked", true);
    this.escolherSku(bestSku); // }

    return this;
  };
  /**
   * Cria e insere o html com as variações dos skus
   * @param  {Object} mapaEspecificacoes Mapa das especificações do produto
   * @return {object} this
   */


  this.desenhar = function () {
    var $especificacao,
        $especificacoes = $("<div />", {
      "class": "skus-selection"
    }).appendTo(this.elemento());
    $especificacao = $("<div />", {
      "class": "skus-wrapper"
    }).appendTo($especificacoes);
    $("<div />", {
      "class": "titulo",
      text: _this._skuJson.dimensions.indexOf(_this.dimensionToDisplay.name) >= 0 ? _this.dimensionToDisplay.label : "Escolha a variação:"
    }).appendTo($especificacao);
    var $lista = $("<ul />", {
      "class": "skus"
    }).appendTo($especificacao);
    var nameCampo = Object(_util__WEBPACK_IMPORTED_MODULE_3__["textoParaNomeCss"])(_this._skuJson.name);

    for (var indice in _this._skuJson.skus) {
      if (_this._skuJson.skus.hasOwnProperty(indice)) {
        var sku = _this._skuJson.skus[indice];
        var item = $("<li />", {
          "class": "sku"
        }).appendTo($lista);
        $("<input />", {
          val: sku.sku,
          id: sku.sku,
          type: "radio",
          name: nameCampo
        }).appendTo(item);
        var label = $("<label />", {
          "for": sku.sku,
          "class": sku.available ? "" : "disable"
        }).appendTo(item); //gambiarra para cadastro errado da averara

        if (_this.dimensionToDisplay.name === "Tamanhos") {
          _this.dimensionToDisplay.name = "TAMANHO";
        }

        if (sku.dimensions[_this.dimensionToDisplay.name]) {
          label.attr("title", sku.dimensions[_this.dimensionToDisplay.name]);
          label.text(_this.changeDimension(sku.dimensions[_this.dimensionToDisplay.name]));
        } else {
          label.addClass("image");
          $("<img />", {
            src: Object(_util__WEBPACK_IMPORTED_MODULE_3__["alterarTamanhoImagemSrcVtex"])(sku.image, 45, 65),
            title: sku.skuname
          }).appendTo(label);
        }
      }
    }

    return this;
  };
  /**
   * Configura os eventos de atualizacao
   * @return {object} this
   */


  this.configurar = function () {
    $(".skus-selection input").on("change", function () {
      var id = $(".skus-selection input:checked").val();
      var sku = getSkuPorId(id);

      _this.escolherSku(sku);
    });
    return this;
  };

  function getSkuPorId(id) {
    return _this._skuJson.skus.find(function (sku) {
      return sku.sku == id;
    });
  }
}; // subclasse extende superclasse

ModuloSkusPorNome.prototype = Object.create(_ModuloSkus__WEBPACK_IMPORTED_MODULE_2__["ModuloSkus"].prototype);
ModuloSkusPorNome.prototype.constructor = ModuloSkusPorNome;
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModulosTiposDePreco.js":
/*!**********************************************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModulosTiposDePreco.js ***!
  \**********************************************************************************/
/*! exports provided: ModuloPrecoBoleto, ModuloPrecoDe, ModuloPrecoParcelado, ModuloPrecoPor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function($) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloPrecoBoleto", function() { return ModuloPrecoBoleto; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloPrecoDe", function() { return ModuloPrecoDe; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloPrecoParcelado", function() { return ModuloPrecoParcelado; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ModuloPrecoPor", function() { return ModuloPrecoPor; });
/* harmony import */ var _Modulo__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../Modulo */ "./src/arquivos/js/lib/ComponentesProduto/Modulo.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util */ "./src/arquivos/js/lib/ComponentesProduto/util.js");


var ModuloPrecoBoleto = function ModuloPrecoBoleto(elemento, componentStore) {
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, elemento, componentStore);
  this.opcoes({
    ativo: true
  });
}; // subclasse extende superclasse

ModuloPrecoBoleto.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloPrecoBoleto.prototype.constructor = ModuloPrecoBoleto;
/**
 * Cria o html
 * @return {jQueryElement}
 */

ModuloPrecoBoleto.prototype.desenhar = function () {
  var valorBoleto = $("<div />", {
    "class": "preco-boleto"
  });
  $("<strong />", {
    "class": "value"
  }).appendTo(valorBoleto);
  $("<span />", {
    html: ' no boleto <span class="container-percentual"><span class="percentual">%</span>OFF</span>'
  }).appendTo(valorBoleto);
  this.elemento(valorBoleto);
  return valorBoleto;
};
/**
 * Atualiza/preenche o html com os valores corretos
 * @param {JSON} novoSku Sku selecionado
 */


ModuloPrecoBoleto.prototype.atualizar = function (novoSku) {
  var precoPrincipal = novoSku.bestPrice / 100;
  var precoBoleto = precoPrincipal - precoPrincipal * this.percentual() / 100;
  console.log(this);

  this._store.commit("setPriceBankInvoic", precoBoleto);

  var valorBoleto = this.elemento();

  if (this.opcoes().ativo) {
    valorBoleto.find(".percentual").text(this.percentual() + "%");
    valorBoleto.find(".value").text("R$ " + Object(_util__WEBPACK_IMPORTED_MODULE_1__["getPrice"])(precoBoleto));
    valorBoleto.css("display", "block");
  } else {
    valorBoleto.css("display", "none");
  }
};

ModuloPrecoBoleto.prototype.percentual = function (percentual) {
  if (percentual) this._percentual = percentual;
  return this._percentual || 0;
};

var ModuloPrecoDe = function ModuloPrecoDe(elemento, componentStore) {
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, null, componentStore);
  this.opcoes({
    ativo: true
  });
}; // subclasse extende superclasse

ModuloPrecoDe.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloPrecoDe.prototype.constructor = ModuloPrecoDe;
/**
 * Cria o html
 * @return {jQueryElement}
 */

ModuloPrecoDe.prototype.desenhar = function () {
  var valorDe = $("<div />", {
    "class": "valor-de"
  }); // $('<span />', {
  // 	'text': 'De: '
  // }).appendTo(valorDe);

  $("<strong />", {
    "class": "value"
  }).appendTo(valorDe);
  this.elemento(valorDe);
  return valorDe;
};
/**
 * Atualiza/preenche o html com os valores corretos
 * @param {JSON} novoSku Sku selecionado
 */


ModuloPrecoDe.prototype.atualizar = function (novoSku) {
  var precoDe = novoSku.listPrice / 100,
      precoPor = novoSku.bestPrice / 100;

  this._store.commit("setPriceBy", precoPor);

  this._store.commit("setPriceOf", precoDe);

  var valorDe = this.elemento();

  if (this.opcoes().ativo) {
    if (precoDe > precoPor) {
      valorDe.find(".value").text("R$ " + Object(_util__WEBPACK_IMPORTED_MODULE_1__["getPrice"])(precoDe));
      valorDe.css("display", "block");
    } else {
      valorDe.css("display", "none");
    }
  } else {
    valorDe.css("display", "none");
  }
};

var ModuloPrecoParcelado = function ModuloPrecoParcelado(elemento, componentStore) {
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, null, componentStore);
  this.opcoes({
    auto: false,
    ativo: false,
    parcelas: 6
  });
  this.numeroParcelas(this.opcoes().parcelas);
}; // subclasse extende superclasse

ModuloPrecoParcelado.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloPrecoParcelado.prototype.constructor = ModuloPrecoParcelado;
/**
 * Cria o html
 * @return {jQueryElement}
 */

ModuloPrecoParcelado.prototype.desenhar = function () {
  var valorDividido = $("<div />", {
    "class": "valor-dividido"
  });
  $("<span />", {
    html: 'ou <strong class="numero-de-parcelas"></strong> de '
  }).appendTo(valorDividido);
  $("<strong />", {
    "class": "value"
  }).appendTo(valorDividido);
  $("<span />", {
    html: " sem juros"
  }).appendTo(valorDividido);
  this.elemento(valorDividido);
  return valorDividido;
};

ModuloPrecoParcelado.prototype.numeroParcelas = function (numeroParcelas) {
  if (numeroParcelas) {
    this.opcoes().parcelas = numeroParcelas;
  }

  return this.opcoes().parcelas;
};
/**
 * Atualiza/preenche o html com os valores corretos
 * @param {JSON} novoSku Sku selecionado
 */


ModuloPrecoParcelado.prototype.atualizar = function (novoSku) {
  if (this.opcoes().auto) {
    this.numeroParcelas(parseInt(novoSku.installments));
  }

  var precoPrincipal = novoSku.bestPrice / 100;
  var precoDivido = precoPrincipal / this.numeroParcelas();

  this._store.commit("setPriceDivided", Object(_util__WEBPACK_IMPORTED_MODULE_1__["getPrice"])(precoDivido));

  this._store.commit("setInstallments", this.numeroParcelas());

  var valorDividido = this.elemento();

  if (this.opcoes().ativo && this.numeroParcelas() > 1) {
    valorDividido.find(".numero-de-parcelas").text(this.numeroParcelas() + "x");
    valorDividido.find(".value").text("R$ " + Object(_util__WEBPACK_IMPORTED_MODULE_1__["getPrice"])(precoDivido));
    valorDividido.css("display", "block");
  } else {
    valorDividido.css("display", "none");
  }
};

var ModuloPrecoPor = function ModuloPrecoPor(elemento, componentStore) {
  _Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].call(this, null, componentStore);
  this.opcoes({
    ativo: true
  });
}; // subclasse extende superclasse

ModuloPrecoPor.prototype = Object.create(_Modulo__WEBPACK_IMPORTED_MODULE_0__["Modulo"].prototype);
ModuloPrecoPor.prototype.constructor = ModuloPrecoPor;
/**
 * Cria o html
 * @return {jQueryElement}
 */

ModuloPrecoPor.prototype.desenhar = function () {
  var valorPor = $("<div />", {
    "class": "valor-por"
  }); // $('<span />', {
  // 	'text': 'Por: '
  // }).appendTo(valorPor);

  $("<strong />", {
    "class": "value"
  }).appendTo(valorPor);
  this.elemento(valorPor);
  return valorPor;
};
/**
 * Atualiza/preenche o html com os valores corretos
 * @param {JSON} novoSku Sku selecionado
 */


ModuloPrecoPor.prototype.atualizar = function (novoSku) {
  var valorPor = this.elemento();

  if (this.opcoes().ativo) {
    var precoPor = novoSku.bestPrice / 100;

    this._store.commit("setPriceBy", precoPor);

    if (precoPor) {
      valorPor.find(".value").text("R$ " + Object(_util__WEBPACK_IMPORTED_MODULE_1__["getPrice"])(precoPor));
      valorPor.css("display", "block");
    } else {
      valorPor.css("display", "none");
    }
  } else {
    valorPor.css("display", "none");
  }
};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/index.js":
/*!*********************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/index.js ***!
  \*********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./SubModulos/ModulosTiposDePreco */ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModulosTiposDePreco.js");
/* harmony import */ var _SubModulos_ModuloBtnQtd__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./SubModulos/ModuloBtnQtd */ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloBtnQtd.js");
/* harmony import */ var _SubModulos_ModuloSelect__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./SubModulos/ModuloSelect */ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSelect.js");
/* harmony import */ var _SubModulos_ModuloSkusPorNome__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./SubModulos/ModuloSkusPorNome */ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSkusPorNome.js");
/* harmony import */ var _SubModulos_ModuloSkusPorEspecificacoes__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SubModulos/ModuloSkusPorEspecificacoes */ "./src/arquivos/js/lib/ComponentesProduto/SubModulos/ModuloSkusPorEspecificacoes.js");
/* harmony import */ var _ModuloQuantidade__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ModuloQuantidade */ "./src/arquivos/js/lib/ComponentesProduto/ModuloQuantidade.js");
/* harmony import */ var _ModuloPreco__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./ModuloPreco */ "./src/arquivos/js/lib/ComponentesProduto/ModuloPreco.js");
/* harmony import */ var _ModuloCompreJunto__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./ModuloCompreJunto */ "./src/arquivos/js/lib/ComponentesProduto/ModuloCompreJunto.js");
/* harmony import */ var _ModuloBotaoDeCompra__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./ModuloBotaoDeCompra */ "./src/arquivos/js/lib/ComponentesProduto/ModuloBotaoDeCompra.js");
/* harmony import */ var _ModuloAviseMe__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./ModuloAviseMe */ "./src/arquivos/js/lib/ComponentesProduto/ModuloAviseMe.js");
/* harmony import */ var _store__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./store */ "./src/arquivos/js/lib/ComponentesProduto/store.js");
/* harmony import */ var _EventType__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./EventType */ "./src/arquivos/js/lib/ComponentesProduto/EventType.js");












var Components = {
  ModuloAviseMe: _ModuloAviseMe__WEBPACK_IMPORTED_MODULE_9__["ModuloAviseMe"],
  ModuloBotaoDeCompra: _ModuloBotaoDeCompra__WEBPACK_IMPORTED_MODULE_8__["ModuloBotaoDeCompra"],
  ModuloCompreJunto: _ModuloCompreJunto__WEBPACK_IMPORTED_MODULE_7__["ModuloCompreJunto"],
  ModuloPreco: _ModuloPreco__WEBPACK_IMPORTED_MODULE_6__["ModuloPreco"],
  ModuloQuantidade: _ModuloQuantidade__WEBPACK_IMPORTED_MODULE_5__["ModuloQuantidade"],
  ModuloSkusPorNome: _SubModulos_ModuloSkusPorNome__WEBPACK_IMPORTED_MODULE_3__["ModuloSkusPorNome"],
  ModuloSkusPorEspecificacoes: _SubModulos_ModuloSkusPorEspecificacoes__WEBPACK_IMPORTED_MODULE_4__["ModuloSkusPorEspecificacoes"],
  ModuloBtnQtd: _SubModulos_ModuloBtnQtd__WEBPACK_IMPORTED_MODULE_1__["ModuloBtnQtd"],
  ModuloPrecoBoleto: _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_0__["ModuloPrecoBoleto"],
  ModuloPrecoDe: _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_0__["ModuloPrecoDe"],
  ModuloPrecoParcelado: _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_0__["ModuloPrecoParcelado"],
  ModuloPrecoPor: _SubModulos_ModulosTiposDePreco__WEBPACK_IMPORTED_MODULE_0__["ModuloPrecoPor"],
  ModuloSelect: _SubModulos_ModuloSelect__WEBPACK_IMPORTED_MODULE_2__["ModuloSelect"],
  ComponentStore: _store__WEBPACK_IMPORTED_MODULE_10__["ComponentStore"],
  Events: {
    CHANGE_QTD: _EventType__WEBPACK_IMPORTED_MODULE_11__["CHANGE_QTD"],
    CHANGE_SKU: _EventType__WEBPACK_IMPORTED_MODULE_11__["CHANGE_SKU"],
    ADD_SKU_TO_CART_FAIL: _EventType__WEBPACK_IMPORTED_MODULE_11__["ADD_SKU_TO_CART_FAIL"],
    ADD_SKU_TO_CART_SUCESS: _EventType__WEBPACK_IMPORTED_MODULE_11__["ADD_SKU_TO_CART_SUCESS"],
    SKU_REF: _EventType__WEBPACK_IMPORTED_MODULE_11__["SKU_REF"]
  }
};
/* harmony default export */ __webpack_exports__["default"] = (Components);

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/store.js":
/*!*********************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/store.js ***!
  \*********************************************************/
/*! exports provided: ComponentStore */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ComponentStore", function() { return ComponentStore; });
/* harmony import */ var Helpers_State_Store__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! Helpers/State/Store */ "./src/arquivos/js/helpers/State/Store.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


var ComponentStore = function ComponentStore() {
  var storeOpts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return new Helpers_State_Store__WEBPACK_IMPORTED_MODULE_0__["default"]({
    moduleName: storeOpts.moduleName || "ProductComponents",
    state: _objectSpread({
      selectedSku: {},
      qtd: 1,
      priceOf: 0,
      priceBy: 0,
      priceDivided: 0,
      installments: 0
    }, storeOpts.state),
    mutations: _objectSpread({
      setSelectedSku: function setSelectedSku(state, selectedSku) {
        state.selectedSku = selectedSku;
      },
      setQtd: function setQtd(state, qtd) {
        state.qtd = qtd;
      },
      setPriceOf: function setPriceOf(state, priceOf) {
        state.priceOf = priceOf;
      },
      setPriceBy: function setPriceBy(state, priceBy) {
        state.priceBy = priceBy;
      },
      setPriceDivided: function setPriceDivided(state, priceDivided) {
        state.priceDivided = priceDivided;
      },
      setInstallments: function setInstallments(state, installments) {
        state.installments = installments;
      }
    }, storeOpts.mutations),
    actions: _objectSpread({}, storeOpts.actions)
  });
};

/***/ }),

/***/ "./src/arquivos/js/lib/ComponentesProduto/util.js":
/*!********************************************************!*\
  !*** ./src/arquivos/js/lib/ComponentesProduto/util.js ***!
  \********************************************************/
/*! exports provided: textoParaNomeCss, getPrice, alterarTamanhoImagemSrcVtex */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "textoParaNomeCss", function() { return textoParaNomeCss; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getPrice", function() { return getPrice; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "alterarTamanhoImagemSrcVtex", function() { return alterarTamanhoImagemSrcVtex; });
/** Util */
function textoParaNomeCss(texto) {
  if (typeof texto == 'undefined') {
    return '';
  }

  texto = texto.toLowerCase().replace(/\)|\(/g, '').replace(/\./g, '').replace(/,/g, '').replace(/ /g, '-').replace(/\//g, '_').replace(/[áàâã]/g, 'a').replace(/[ìíĩî]/g, 'i').replace(/[éèê]/g, 'e').replace(/[óòôõ]/g, 'o').replace(/[úùû]/g, 'u').replace(/[ç]/g, 'c').replace(/[^A-Za-z0-9_-]/g, '');
  return texto;
}
/**
 * Obtem Preco
 * caso o preco recebido seja um Float ou int,
 * 	Ex.: 10.2 ->'10,20'
 * Recebendo uma string o valor sera retornado como um float
 * 	Ex.: 'R$1.234,30' -> 1234.3
 * @param  {FloatZstring} price preço
 * @return {[type]}       [description]
 */

function getPrice(price) {
  if (isNaN(price)) {
    price = parseFloat(price.replace('R$', '').replace('.', '').replace(',', '.'));
    return parseFloat(price);
  } else {
    price = price || 0;
    return price.toFixed(2).replace('.', ',');
  }
}

if (!Array.prototype.forEach) {
  Array.prototype.forEach = function (fn, scope) {
    for (var i = 0, len = this.length; i < len; ++i) {
      fn.call(scope, this[i], i, this);
    }
  };
}

function logEvent() {
  console.log(arguments);
}

function logWarn() {
  console.warn(arguments);
}

if (!Array.prototype.find) {
  Object.defineProperty(Array.prototype, 'find', {
    value: function value(predicate) {
      // 1. Let O be ? ToObject(this value).
      if (this == null) {
        throw new TypeError('"this" is null or not defined');
      }

      var o = Object(this); // 2. Let len be ? ToLength(? Get(O, "length")).

      var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.

      if (typeof predicate !== 'function') {
        throw new TypeError('predicate must be a function');
      } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.


      var thisArg = arguments[1]; // 5. Let k be 0.

      var k = 0; // 6. Repeat, while k < len

      while (k < len) {
        // a. Let Pk be ! ToString(k).
        // b. Let kValue be ? Get(O, Pk).
        // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).
        // d. If testResult is true, return kValue.
        var kValue = o[k];

        if (predicate.call(thisArg, kValue, k, o)) {
          return kValue;
        } // e. Increase k by 1.


        k++;
      } // 7. Return undefined.


      return undefined;
    }
  });
}
/**
 * Altera as dimenções especificadas na url da img
 * @param {string} src url da imagem na VTEX
 * @param {int} width
 * @param {int} height
 * @return {string} url da imagem com o tamanho alterado
 */


function alterarTamanhoImagemSrcVtex(src, width, height) {
  if (typeof src == "undefined") {
    console.warn("Parametro 'src' não recebido.");
    return;
  }

  width = typeof width == "undefined" ? 1 : width;
  height = typeof height == "undefined" ? width : height;
  src = src.replace(/\/(\d+)(-(\d+-\d+)|(_\d+))\//g, '/$1-' + width + '-' + height + '/');
  return src;
}

/***/ }),

/***/ "./src/arquivos/js/lib/custom-newsletter-form.js":
/*!*******************************************************!*\
  !*** ./src/arquivos/js/lib/custom-newsletter-form.js ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function($) {/**
 *  custom-form-newsletter.js
 *
 *  @author	Gabriel de O. Araujo
 *  @author Davi P. Guimarães
 */


function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

var $form;

function CustomNewsletterFormService(opts) {
  // Model
  var _this = this; // Rota no servidor


  _this.route = function route(sigla) {
    sigla = sigla == undefined ? opts.acronymEntity : sigla;
    return "/api/dataentities/" + sigla;
  };
  /**
   * Cria o objeto para ser salvo no Master Data
   * @param  {String} clientName  Nome do cliente
   * @param  {String} clientEmail Email do cliente
   * @param  {object} interest    Objeto de interrece como {musica=>['Rock','Rap','Jazz']}
   * @return {object}
   */


  _this.create = function create(clientName, clientEmail, interest, origem) {
    return {
      m3ClientEmail: clientEmail,
      m3ClientInterest: interest,
      m3ClientName: clientName || "",
      m3Origem: origem || ""
    };
  };
  /**
   * Submete o formulario
   * @param {JqXhr} Objeto jQuery de requisição
   */


  _this.add = function add(obj) {
    return $.ajax({
      type: "POST",
      url: _this.route() + "/documents",
      headers: {
        Accept: "application/vnd.vtex.masterdata.v10+json",
        "Content-Type": "application/json;charset=utf-8"
      },
      data: JSON.stringify(obj)
    });
  };

  this.search = function (condicao, campos) {
    if (condicao.length <= 0) return;
    return $.ajax({
      async: false,
      crossDomain: true,
      url: _this.route() + "/search?_where=" + condicao + "&_fields=" + campos,
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Accept: "application/vnd.vtex.ds.v10+json",
        "REST-Range": "resources=0-10"
      }
    });
  };
} // CustomNewsletterFormService


function CustomNewsletterFormController(service, opts) {
  var _this = this;

  _this.opts = opts;

  _this.createdForm = function createdForm(opts) {
    var $form = $("<form />", {
      name: "m3-custom-newsletter-form",
      "class": "m3-custom-newsletter-form"
    });
    $form.append(createInterest(opts.interest));
    $form.append(createField("name", "Seu nome: ", "text"));
    $form.append(createField("email", "Seu e-mail: ", "email"));
    $form.append(createField("button-ok", opts.textButtom, "button"));
    $form.append($("<div />", {
      "class": "m3-cn-msg"
    }));
    return $form;
  };

  var removeAccents = function removeAccents(text) {
    return text.toLowerCase().replace(/[áàâã]/g, "a").replace(/[ìíĩî]/g, "i").replace(/[éèê]/g, "e").replace(/[óòôõ]/g, "o").replace(/[úùû]/g, "u").replace(/[ç]/g, "c").replace(/[\:]/g, "");
  };

  var configureEventsCheckd = function configureEventsCheckd($form) {
    // sempre que alguma categoria for desmarcada, desmarcar checkbox 'todas' categorias
    $form.find(".m3-cn-checkbox").on("click", function (event) {
      if (!$(this).prop("checked")) {
        $(this).parents("div").eq(0).find(".m3-cn-checkbox-all-interest").prop("checked", false);
      }
    }); // sempre que checkbox todas categorias, marcar todos os outros checkbox

    $form.find(".m3-cn-checkbox-all-interest").on("click", function (event) {
      var $checkboxs = $(this).parents("div").eq(0).find(".m3-cn-checkbox");

      if ($(this).prop("checked")) {
        $checkboxs.prop("checked", true);
      } else {
        $checkboxs.prop("checked", false);
      }
    });
  };
  /**
   * Cria o Html com os campos de segmentação
   * @param  {array} interest [campos de segmentação	]
   * @return {object}        [Jquery element]
   */


  var createInterest = function createInterest(interest) {
    var identificadorRandomico = Math.floor(Math.random() * 100 + 1),
        $interest = $("<div />", {
      "class": "dynamic-fildset"
    });

    if (_typeof(interest) == "object") {
      for (var i = 0; i < interest.length; i++) {
        var $field = $("<fieldset />", {
          "class": "m3-cn-interest-container"
        }).appendTo($interest);
        createInterestTitle(interest[i]).appendTo($field);
        createInterestOpts(interest[i], identificadorRandomico).appendTo($field);
      }
    }

    return $interest;
  };

  var createField = function createField(nome, titulo, type) {
    nome = nome || "";
    nome = nome.trim();
    titulo = titulo || nome;
    titulo = titulo.trim();
    type = type || "text";
    var idFiel = "m3-cn-" + nome,
        $fieldset = $("<fieldset />", {
      "class": "m3-cn-" + nome + "-container dynamic-fildset"
    }),
        $input = $("<input />", {
      id: idFiel,
      placeholder: titulo,
      name: idFiel,
      "class": idFiel,
      type: type
    });

    if (!isInputText(type)) {
      $input.val(titulo);
    } else {
      $("<label />", {
        "for": idFiel,
        text: titulo
      }).appendTo($fieldset);
    }

    $input.appendTo($fieldset);
    return $fieldset;
  };

  var isInputText = function isInputText(type) {
    return type === "text" || type === "email" || type === "date" || type === "number" || type === "password" || type === "search" || type === "tel" || type === "url";
  };

  var createdOption = function createdOption(id, title, inputClass, type, name) {
    inputClass = inputClass || "m3-cn-checkbox";
    type = type || "checkbox";
    name = name || "m3-cn-input-radio";
    var $span = $("<span />", {
      "class": "m3-cn-option-interest"
    });
    $("<input />", {
      id: "m3-cn-" + id,
      "class": "m3-cn-checkbox " + inputClass,
      type: type,
      name: name,
      val: title
    }).appendTo($span);
    $("<label />", {
      "for": "m3-cn-" + id,
      text: title
    }).appendTo($span);
    return $span;
  };

  var createInterestOpts = function createInterestOpts(interest, index) {
    var $fields = $("<div />");
    var segmentations = interest.segmentations;

    if (_typeof(segmentations) == "object") {
      if (interest.choiceOfSegmentation != "radio") createdOption(index, "Todas", "m3-cn-checkbox-all-interest").appendTo($fields);
      var titleField = removeAccents(interest.title);

      for (var i = 0; i < segmentations.length; i++) {
        var id = removeAccents(segmentations[i]) + "-" + index;
        createdOption(id, segmentations[i], "m3-cn-checkbox-" + titleField, interest.choiceOfSegmentation, titleField).appendTo($fields);
      }
    }

    return $fields;
  };

  var createInterestTitle = function createInterestTitle(interest) {
    var titleInterest = interest.description || interest.title;
    return $("<span />", {
      "class": "m3-cn-interest-title",
      title: interest.title,
      text: titleInterest
    });
  };
  /**
   * Obtem os valores dos campos de interreses selecionados
   * @return {obj} um objeto como {musica=>['Rock','Rap','Jazz']}
   */


  var getInterestFieldsValue = function getInterestFieldsValue() {
    var interestFieldsValue = {};
    /**
     * iterando todos os fieldsets e montando o array
     * com o tipo de interesse e seu respectivo valor
     */

    $form.find(".m3-cn-interest-container").each(function () {
      var key = removeAccents($(this).find(".m3-cn-interest-title").attr("title"));
      var values = $(this).find("input:checked").not(".m3-cn-checkbox-all-interest").map(function () {
        return $(this).val();
      }).get();

      if (values.length <= 0) {
        values = $(this).find("input").not(".m3-cn-checkbox-all-interest").map(function () {
          return $(this).val();
        }).get();
      }

      interestFieldsValue[key] = values;
    });
    return interestFieldsValue;
  };
  /**
   * @return {object} [description]
   */


  _this.content = function content() {
    return service.create($form.find(".m3-cn-name").val(), $form.find(".m3-cn-email").val(), getInterestFieldsValue(), $form.parent().data("origem"));
  };

  var showCoupon = function showCoupon() {
    if (typeof opts.coupon != "undefined") {
      if (opts.coupon.length > 0) {
        var coupon = $("<div />", {
          "class": "m3-cn-coupon",
          text: opts.coupon
        });
        $form.find(".m3-cn-msg").append(coupon);
      }
    }
  };

  var resetForm = function resetForm() {
    $form.each(function () {
      this.reset();
    });
  };

  var createMensage = function createMensage(text, type) {
    type = type || "error";
    return $("<span />", {
      "class": "m3-cn-" + type,
      text: text
    });
  };

  _this.emailIsRegistered = function (email) {
    var resultado = [];
    service.search("m3ClientEmail=" + email, "m3ClientEmail").done(function (data) {
      resultado = data;
    });
    if (resultado.length > 0) return true;
    return false;
  };

  _this.validate = function validate($form) {
    var email = $form.find(".m3-cn-email").val(),
        cancel = $form.find("#m3-cn-opcoes-cancela");

    if ($(cancel).prop("checked")) {
      $form.find(".m3-cn-msg").empty().append(createMensage("Por favor, escolha a opção receber newsletters da loja!"));
      return false;
    } else if (email.length == 0) {
      $form.find(".m3-cn-msg").empty().append(createMensage("Por favor, informe o seu email!"));
      return false;
    } else {
      var regex = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      var result = regex.test(email);

      if (!result) {
        $form.find(".m3-cn-msg").empty().append(createMensage("Email inválido!"));
        return false;
      }

      if (_this.emailIsRegistered(email)) {
        $form.find(".m3-cn-msg").empty().append(createMensage("Este email já está cadastrado!"));
        return false;
      }

      return true;
    }
  };

  _this.success = function success() {
    var msg = createMensage(opts.successMsg, "success");
    $form.find(".m3-cn-msg").empty().append(msg);
    showCoupon();
    resetForm();
    $form.trigger("CN-registered-successfully");
  };

  _this.error = function error() {
    var msg = createMensage(opts.errorMsg);
    $form.trigger("CN-registered-filed");
    $form.find(".m3-cn-msg").empty().html(msg);
  };

  _this.save = function save() {
    $(this).prop("disable", true); //Define formulario que esta sendo usado

    $form = $(this).parents(".m3-custom-newsletter-form"); // limpando a div de msg

    $form.find(".m3-cn-msg").empty();

    if (_this.validate($form)) {
      var obj = _this.content();

      var jqXHR = service.add(obj);
      jqXHR.done(_this.success).fail(_this.error).always(function () {
        $(".m3-cn-button-ok").prop("disable", false);
      });
    }
  }; // Configura os eventos do formulário


  _this.configure = function configure($el) {
    var $form = _this.createdForm(_this.opts);

    configureEventsCheckd($form);
    $form.find(".m3-custom-newsletter-form").submit(false);
    $form.find(".m3-cn-button-ok").on("click", _this.save);
    $form.appendTo($el);
  };
} // CustomNewsletterFormController


$.fn.CustomNewsletter = function (options) {
  var opts = $.extend({}, $.fn.CustomNewsletter.defaults, options);
  var service = new CustomNewsletterFormService(opts);
  var controller = new CustomNewsletterFormController(service, opts);
  $(this).each(function (index, el) {
    controller.configure($(this));

    if (opts.executeCallback) {
      $(this).on("CN-registered-successfully", function () {
        var $form = $(this),
            $msgContatiner = $form.find(".m3-cn-msg"),
            $a = $("<a />", {
          text: "Voltar",
          href: "#",
          "class": "btn-voltar"
        }).click(function (event) {
          event.preventDefault();
          $form.find(".m3-cn-name-container,.m3-cn-email-container,.m3-cn-button-ok-container").show("slow");
          $msgContatiner.empty();
        });
        $msgContatiner.append($a);
        $form.find(".m3-cn-name-container,.m3-cn-email-container,.m3-cn-button-ok-container").hide("slow");
      });
    }
  });
};

$.fn.CustomNewsletter.defaults = {
  acronymEntity: "CN",
  shop: "minha-loja",
  textButtom: "Enviar",
  errorMsg: "Ocorreu algum erro, tente novamente mais tarde.",
  successMsg: "Cadastro concluído com sucesso!",
  coupon: "",
  executeCallback: true,
  interest: []
  /*
  ,"interest"		:	[
  	{
  		'title':"Titulo Segmentação",
  		'description':"Texto descrevendo segmentação",
  		'choiceOfSegmentation':'checkbox',
  		'segmentations':[
  			"Segmentação-01",
  			"Segmentação-02"
  		]
  	}
  ]*/

};
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/elevateZoom.js":
/*!********************************************!*\
  !*** ./src/arquivos/js/lib/elevateZoom.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*
 *	jQuery elevateZoom 3.0.8
 *	Demo's and documentation:
 *	www.elevateweb.co.uk/image-zoom
 *
 *	Copyright (c) 2012 Andrew Eades
 *	www.elevateweb.co.uk
 *
 *	Dual licensed under the GPL and MIT licenses.
 *	http://en.wikipedia.org/wiki/MIT_License
 *	http://en.wikipedia.org/wiki/GNU_General_Public_License
 *
/*
 *	jQuery elevateZoom 3.0.3
 *	Demo's and documentation:
 *	www.elevateweb.co.uk/image-zoom
 *
 *	Copyright (c) 2012 Andrew Eades
 *	www.elevateweb.co.uk
 *
 *	Dual licensed under the GPL and MIT licenses.
 *	http://en.wikipedia.org/wiki/MIT_License
 *	http://en.wikipedia.org/wiki/GNU_General_Public_License
 */
if (typeof Object.create !== "function") {
  Object.create = function (obj) {
    function F() {}

    F.prototype = obj;
    return new F();
  };
}

(function ($, window, document, undefined) {
  var ElevateZoom = {
    init: function init(options, elem) {
      var self = this;
      self.elem = elem;
      self.$elem = $(elem);
      self.imageSrc = self.$elem.data("zoom-image") ? self.$elem.data("zoom-image") : self.$elem.attr("src");
      self.options = $.extend({}, $.fn.elevateZoom.options, options); //TINT OVERRIDE SETTINGS

      if (self.options.tint) {
        self.options.lensColour = "none", //colour of the lens background
        self.options.lensOpacity = "1"; //opacity of the lens
      } //INNER OVERRIDE SETTINGS


      if (self.options.zoomType == "inner") {
        self.options.showLens = false;
      } //Remove alt on hover


      self.$elem.parent().removeAttr("title").removeAttr("alt");
      self.zoomImage = self.imageSrc;
      self.refresh(1); //Create the image swap from the gallery

      $("#" + self.options.gallery + " a").click(function (e) {
        //Set a class on the currently active gallery image
        if (self.options.galleryActiveClass) {
          $("#" + self.options.gallery + " a").removeClass(self.options.galleryActiveClass);
          $(this).addClass(self.options.galleryActiveClass);
        } //stop any link on the a tag from working


        e.preventDefault(); //call the swap image function

        if ($(this).data("zoom-image")) {
          self.zoomImagePre = $(this).data("zoom-image");
        } else {
          self.zoomImagePre = $(this).data("image");
        }

        self.swaptheimage($(this).data("image"), self.zoomImagePre);
        return false;
      });
    },
    refresh: function refresh(length) {
      var self = this;
      setTimeout(function () {
        self.fetch(self.imageSrc);
      }, length || self.options.refresh);
    },
    fetch: function fetch(imgsrc) {
      //get the image
      var self = this;
      var newImg = new Image();

      newImg.onload = function () {
        //set the large image dimensions - used to calculte ratio's
        self.largeWidth = newImg.width;
        self.largeHeight = newImg.height; //once image is loaded start the calls

        self.startZoom();
        self.currentImage = self.imageSrc; //let caller know image has been loaded

        self.options.onZoomedImageLoaded(self.$elem);
      };

      newImg.src = imgsrc; // this must be done AFTER setting onload

      return;
    },
    startZoom: function startZoom() {
      var self = this; //get dimensions of the non zoomed image

      self.nzWidth = self.$elem.width();
      self.nzHeight = self.$elem.height(); //activated elements

      self.isWindowActive = false;
      self.isLensActive = false;
      self.isTintActive = false;
      self.overWindow = false; //CrossFade Wrappe

      if (self.options.imageCrossfade) {
        self.zoomWrap = self.$elem.wrap('<div style="height:' + self.nzHeight + "px;width:" + self.nzWidth + 'px;" class="zoomWrapper" />');
        self.$elem.css("position", "absolute");
      }

      self.zoomLock = 1;
      self.scrollingLock = false;
      self.changeBgSize = false;
      self.currentZoomLevel = self.options.zoomLevel; //get offset of the non zoomed image

      self.nzOffset = self.$elem.offset(); //calculate the width ratio of the large/small image

      self.widthRatio = self.largeWidth / self.currentZoomLevel / self.nzWidth;
      self.heightRatio = self.largeHeight / self.currentZoomLevel / self.nzHeight; //if window zoom

      if (self.options.zoomType == "window") {
        self.zoomWindowStyle = "overflow: hidden;" + "background-position: 0px 0px;text-align:center;" + "background-color: " + String(self.options.zoomWindowBgColour) + ";width: " + String(self.options.zoomWindowWidth) + "px;" + "height: " + String(self.options.zoomWindowHeight) + "px;float: left;" + "background-size: " + self.largeWidth / self.currentZoomLevel + "px " + self.largeHeight / self.currentZoomLevel + "px;" + "display: none;z-index:100;" + "border: " + String(self.options.borderSize) + "px solid " + self.options.borderColour + ";background-repeat: no-repeat;" + "position: absolute;";
      } //if inner  zoom


      if (self.options.zoomType == "inner") {
        //has a border been put on the image? Lets cater for this
        var borderWidth = self.$elem.css("border-left-width");
        self.zoomWindowStyle = "overflow: hidden;" + "margin-left: " + String(borderWidth) + ";" + "margin-top: " + String(borderWidth) + ";" + "background-position: 0px 0px;" + "width: " + String(self.nzWidth) + "px;" + "height: " + String(self.nzHeight) + "px;" + "px;float: left;" + "display: none;" + "cursor:" + self.options.cursor + ";" + "px solid " + self.options.borderColour + ";background-repeat: no-repeat;" + "position: absolute;";
      } //lens style for window zoom


      if (self.options.zoomType == "window") {
        // adjust images less than the window height
        if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
          lensHeight = self.nzHeight;
        } else {
          lensHeight = String(self.options.zoomWindowHeight / self.heightRatio);
        }

        if (self.largeWidth < self.options.zoomWindowWidth) {
          lensWidth = self.nzWidth;
        } else {
          lensWidth = self.options.zoomWindowWidth / self.widthRatio;
        }

        self.lensStyle = "background-position: 0px 0px;width: " + String(self.options.zoomWindowWidth / self.widthRatio) + "px;height: " + String(self.options.zoomWindowHeight / self.heightRatio) + "px;float: right;display: none;" + "overflow: hidden;" + "z-index: 999;" + "-webkit-transform: translateZ(0);" + "opacity:" + self.options.lensOpacity + ";filter: alpha(opacity = " + self.options.lensOpacity * 100 + "); zoom:1;" + "width:" + lensWidth + "px;" + "height:" + lensHeight + "px;" + "background-color:" + self.options.lensColour + ";" + "cursor:" + self.options.cursor + ";" + "border: " + self.options.lensBorderSize + "px" + " solid " + self.options.lensBorderColour + ";background-repeat: no-repeat;position: absolute;";
      } //tint style


      self.tintStyle = "display: block;" + "position: absolute;" + "background-color: " + self.options.tintColour + ";" + "filter:alpha(opacity=0);" + "opacity: 0;" + "width: " + self.nzWidth + "px;" + "height: " + self.nzHeight + "px;"; //lens style for lens zoom with optional round for modern browsers

      self.lensRound = "";

      if (self.options.zoomType == "lens") {
        self.lensStyle = "background-position: 0px 0px;" + "float: left;display: none;" + "border: " + String(self.options.borderSize) + "px solid " + self.options.borderColour + ";" + "width:" + String(self.options.lensSize) + "px;" + "height:" + String(self.options.lensSize) + "px;" + "background-repeat: no-repeat;position: absolute;";
      } //does not round in all browsers


      if (self.options.lensShape == "round") {
        self.lensRound = "border-top-left-radius: " + String(self.options.lensSize / 2 + self.options.borderSize) + "px;" + "border-top-right-radius: " + String(self.options.lensSize / 2 + self.options.borderSize) + "px;" + "border-bottom-left-radius: " + String(self.options.lensSize / 2 + self.options.borderSize) + "px;" + "border-bottom-right-radius: " + String(self.options.lensSize / 2 + self.options.borderSize) + "px;";
      } //create the div's                                                + ""
      //self.zoomContainer = $('<div/>').addClass('zoomContainer').css({"position":"relative", "height":self.nzHeight, "width":self.nzWidth});


      self.zoomContainer = $('<div class="zoomContainer" style="-webkit-transform: translateZ(0);position:absolute;left:' + self.nzOffset.left + "px;top:" + self.nzOffset.top + "px;height:" + self.nzHeight + "px;width:" + self.nzWidth + 'px;"></div>');
      $("body").append(self.zoomContainer); //this will add overflow hidden and contrain the lens on lens mode

      if (self.options.containLensZoom && self.options.zoomType == "lens") {
        self.zoomContainer.css("overflow", "hidden");
      }

      if (self.options.zoomType != "inner") {
        self.zoomLens = $("<div class='zoomLens' style='" + self.lensStyle + self.lensRound + "'>&nbsp;</div>").appendTo(self.zoomContainer).click(function () {
          self.$elem.trigger("click");
        });

        if (self.options.tint) {
          self.tintContainer = $("<div/>").addClass("tintContainer");
          self.zoomTint = $("<div class='zoomTint' style='" + self.tintStyle + "'></div>");
          self.zoomLens.wrap(self.tintContainer);
          self.zoomTintcss = self.zoomLens.after(self.zoomTint); //if tint enabled - set an image to show over the tint

          self.zoomTintImage = $('<img style="position: absolute; left: 0px; top: 0px; max-width: none; width: ' + self.nzWidth + "px; height: " + self.nzHeight + 'px;" src="' + self.imageSrc + '">').appendTo(self.zoomLens).click(function () {
            self.$elem.trigger("click");
          });
        }
      } //create zoom window


      if (isNaN(self.options.zoomWindowPosition)) {
        self.zoomWindow = $("<div style='z-index:999;left:" + self.windowOffsetLeft + "px;top:" + self.windowOffsetTop + "px;" + self.zoomWindowStyle + "' class='zoomWindow'>&nbsp;</div>").appendTo("body").click(function () {
          self.$elem.trigger("click");
        });
      } else {
        self.zoomWindow = $("<div style='z-index:999;left:" + self.windowOffsetLeft + "px;top:" + self.windowOffsetTop + "px;" + self.zoomWindowStyle + "' class='zoomWindow'>&nbsp;</div>").appendTo(self.zoomContainer).click(function () {
          self.$elem.trigger("click");
        });
      }

      self.zoomWindowContainer = $("<div/>").addClass("zoomWindowContainer").css("width", self.options.zoomWindowWidth);
      self.zoomWindow.wrap(self.zoomWindowContainer); //  self.captionStyle = "text-align: left;background-color: black;color: white;font-weight: bold;padding: 10px;font-family: sans-serif;font-size: 11px";
      // self.zoomCaption = $('<div class="elevatezoom-caption" style="'+self.captionStyle+'display: block; width: 280px;">INSERT ALT TAG</div>').appendTo(self.zoomWindow.parent());

      if (self.options.zoomType == "lens") {
        self.zoomLens.css({
          backgroundImage: "url('" + self.imageSrc + "')"
        });
      }

      if (self.options.zoomType == "window") {
        self.zoomWindow.css({
          backgroundImage: "url('" + self.imageSrc + "')"
        });
      }

      if (self.options.zoomType == "inner") {
        self.zoomWindow.css({
          backgroundImage: "url('" + self.imageSrc + "')"
        });
      }
      /*-------------------END THE ZOOM WINDOW AND LENS----------------------------------*/
      //touch events


      self.$elem.bind("touchmove", function (e) {
        e.preventDefault();
        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
        self.setPosition(touch);
      });
      self.zoomContainer.bind("touchmove", function (e) {
        if (self.options.zoomType == "inner") {
          self.showHideWindow("show");
        }

        e.preventDefault();
        var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
        self.setPosition(touch);
      });
      self.zoomContainer.bind("touchend", function (e) {
        self.showHideWindow("hide");

        if (self.options.showLens) {
          self.showHideLens("hide");
        }

        if (self.options.tint && self.options.zoomType != "inner") {
          self.showHideTint("hide");
        }
      });
      self.$elem.bind("touchend", function (e) {
        self.showHideWindow("hide");

        if (self.options.showLens) {
          self.showHideLens("hide");
        }

        if (self.options.tint && self.options.zoomType != "inner") {
          self.showHideTint("hide");
        }
      });

      if (self.options.showLens) {
        self.zoomLens.bind("touchmove", function (e) {
          e.preventDefault();
          var touch = e.originalEvent.touches[0] || e.originalEvent.changedTouches[0];
          self.setPosition(touch);
        });
        self.zoomLens.bind("touchend", function (e) {
          self.showHideWindow("hide");

          if (self.options.showLens) {
            self.showHideLens("hide");
          }

          if (self.options.tint && self.options.zoomType != "inner") {
            self.showHideTint("hide");
          }
        });
      } //Needed to work in IE


      self.$elem.bind("mousemove", function (e) {
        if (self.overWindow == false) {
          self.setElements("show");
        } //make sure on orientation change the setposition is not fired


        if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
          self.setPosition(e);
          self.currentLoc = e;
        }

        self.lastX = e.clientX;
        self.lastY = e.clientY;
      });
      self.zoomContainer.bind("mousemove", function (e) {
        if (self.overWindow == false) {
          self.setElements("show");
        } //make sure on orientation change the setposition is not fired


        if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
          self.setPosition(e);
          self.currentLoc = e;
        }

        self.lastX = e.clientX;
        self.lastY = e.clientY;
      });

      if (self.options.zoomType != "inner") {
        self.zoomLens.bind("mousemove", function (e) {
          //make sure on orientation change the setposition is not fired
          if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
            self.setPosition(e);
            self.currentLoc = e;
          }

          self.lastX = e.clientX;
          self.lastY = e.clientY;
        });
      }

      if (self.options.tint && self.options.zoomType != "inner") {
        self.zoomTint.bind("mousemove", function (e) {
          //make sure on orientation change the setposition is not fired
          if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
            self.setPosition(e);
            self.currentLoc = e;
          }

          self.lastX = e.clientX;
          self.lastY = e.clientY;
        });
      }

      if (self.options.zoomType == "inner") {
        self.zoomWindow.bind("mousemove", function (e) {
          //self.overWindow = true;
          //make sure on orientation change the setposition is not fired
          if (self.lastX !== e.clientX || self.lastY !== e.clientY) {
            self.setPosition(e);
            self.currentLoc = e;
          }

          self.lastX = e.clientX;
          self.lastY = e.clientY;
        });
      } //  lensFadeOut: 500,  zoomTintFadeIn


      self.zoomContainer.add(self.$elem).mouseenter(function () {
        if (self.overWindow == false) {
          self.setElements("show");
        }
      }).mouseleave(function () {
        if (!self.scrollLock) {
          self.setElements("hide");
          self.options.onDestroy(self.$elem);
        }
      }); //end ove image

      if (self.options.zoomType != "inner") {
        self.zoomWindow.mouseenter(function () {
          self.overWindow = true;
          self.setElements("hide");
        }).mouseleave(function () {
          self.overWindow = false;
        });
      } //end ove image
      //				var delta = parseInt(e.originalEvent.wheelDelta || -e.originalEvent.detail);
      //      $(this).empty();
      //    return false;
      //fix for initial zoom setting


      if (self.options.zoomLevel != 1) {} //	self.changeZoomLevel(self.currentZoomLevel);
      //set the min zoomlevel


      if (self.options.minZoomLevel) {
        self.minZoomLevel = self.options.minZoomLevel;
      } else {
        self.minZoomLevel = self.options.scrollZoomIncrement * 2;
      }

      if (self.options.scrollZoom) {
        self.zoomContainer.add(self.$elem).bind("mousewheel DOMMouseScroll MozMousePixelScroll", function (e) {
          //						in IE there is issue with firing of mouseleave - So check whether still scrolling
          //						and on mouseleave check if scrolllock
          self.scrollLock = true;
          clearTimeout($.data(this, "timer"));
          $.data(this, "timer", setTimeout(function () {
            self.scrollLock = false; //do something
          }, 250));
          var theEvent = e.originalEvent.wheelDelta || e.originalEvent.detail * -1; //this.scrollTop += ( delta < 0 ? 1 : -1 ) * 30;
          //   e.preventDefault();

          e.stopImmediatePropagation();
          e.stopPropagation();
          e.preventDefault();

          if (theEvent / 120 > 0) {
            //scrolling up
            if (self.currentZoomLevel >= self.minZoomLevel) {
              self.changeZoomLevel(self.currentZoomLevel - self.options.scrollZoomIncrement);
            }
          } else {
            //scrolling down
            if (self.options.maxZoomLevel) {
              if (self.currentZoomLevel <= self.options.maxZoomLevel) {
                self.changeZoomLevel(parseFloat(self.currentZoomLevel) + self.options.scrollZoomIncrement);
              }
            } else {
              //andy
              self.changeZoomLevel(parseFloat(self.currentZoomLevel) + self.options.scrollZoomIncrement);
            }
          }

          return false;
        });
      }
    },
    setElements: function setElements(type) {
      var self = this;

      if (!self.options.zoomEnabled) {
        return false;
      }

      if (type == "show") {
        if (self.isWindowSet) {
          if (self.options.zoomType == "inner") {
            self.showHideWindow("show");
          }

          if (self.options.zoomType == "window") {
            self.showHideWindow("show");
          }

          if (self.options.showLens) {
            self.showHideLens("show");
          }

          if (self.options.tint && self.options.zoomType != "inner") {
            self.showHideTint("show");
          }
        }
      }

      if (type == "hide") {
        if (self.options.zoomType == "window") {
          self.showHideWindow("hide");
        }

        if (!self.options.tint) {
          self.showHideWindow("hide");
        }

        if (self.options.showLens) {
          self.showHideLens("hide");
        }

        if (self.options.tint) {
          self.showHideTint("hide");
        }
      }
    },
    setPosition: function setPosition(e) {
      var self = this;

      if (!self.options.zoomEnabled) {
        return false;
      } //recaclc offset each time in case the image moves
      //this can be caused by other on page elements


      self.nzHeight = self.$elem.height();
      self.nzWidth = self.$elem.width();
      self.nzOffset = self.$elem.offset();

      if (self.options.tint && self.options.zoomType != "inner") {
        self.zoomTint.css({
          top: 0
        });
        self.zoomTint.css({
          left: 0
        });
      } //set responsive
      //will checking if the image needs changing before running this code work faster?


      if (self.options.responsive && !self.options.scrollZoom) {
        if (self.options.showLens) {
          if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
            lensHeight = self.nzHeight;
          } else {
            lensHeight = String(self.options.zoomWindowHeight / self.heightRatio);
          }

          if (self.largeWidth < self.options.zoomWindowWidth) {
            lensWidth = self.nzWidth;
          } else {
            lensWidth = self.options.zoomWindowWidth / self.widthRatio;
          }

          self.widthRatio = self.largeWidth / self.nzWidth;
          self.heightRatio = self.largeHeight / self.nzHeight;

          if (self.options.zoomType != "lens") {
            //possibly dont need to keep recalcalculating
            //if the lens is heigher than the image, then set lens size to image size
            if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
              lensHeight = self.nzHeight;
            } else {
              lensHeight = String(self.options.zoomWindowHeight / self.heightRatio);
            }

            if (self.nzWidth < self.options.zoomWindowHeight / self.heightRatio) {
              lensWidth = self.nzWidth;
            } else {
              lensWidth = String(self.options.zoomWindowWidth / self.widthRatio);
            }

            self.zoomLens.css("width", lensWidth);
            self.zoomLens.css("height", lensHeight);

            if (self.options.tint) {
              self.zoomTintImage.css("width", self.nzWidth);
              self.zoomTintImage.css("height", self.nzHeight);
            }
          }

          if (self.options.zoomType == "lens") {
            self.zoomLens.css({
              width: String(self.options.lensSize) + "px",
              height: String(self.options.lensSize) + "px"
            });
          } //end responsive image change

        }
      } //container fix


      self.zoomContainer.css({
        top: self.nzOffset.top
      });
      self.zoomContainer.css({
        left: self.nzOffset.left
      });
      self.mouseLeft = parseInt(e.pageX - self.nzOffset.left);
      self.mouseTop = parseInt(e.pageY - self.nzOffset.top); //calculate the Location of the Lens
      //calculate the bound regions - but only if zoom window

      if (self.options.zoomType == "window") {
        self.Etoppos = self.mouseTop < self.zoomLens.height() / 2;
        self.Eboppos = self.mouseTop > self.nzHeight - self.zoomLens.height() / 2 - self.options.lensBorderSize * 2;
        self.Eloppos = self.mouseLeft < 0 + self.zoomLens.width() / 2;
        self.Eroppos = self.mouseLeft > self.nzWidth - self.zoomLens.width() / 2 - self.options.lensBorderSize * 2;
      } //calculate the bound regions - but only for inner zoom


      if (self.options.zoomType == "inner") {
        self.Etoppos = self.mouseTop < self.nzHeight / 2 / self.heightRatio;
        self.Eboppos = self.mouseTop > self.nzHeight - self.nzHeight / 2 / self.heightRatio;
        self.Eloppos = self.mouseLeft < 0 + self.nzWidth / 2 / self.widthRatio;
        self.Eroppos = self.mouseLeft > self.nzWidth - self.nzWidth / 2 / self.widthRatio - self.options.lensBorderSize * 2;
      } // if the mouse position of the slider is one of the outerbounds, then hide  window and lens


      if (self.mouseLeft < 0 || self.mouseTop < 0 || self.mouseLeft > self.nzWidth || self.mouseTop > self.nzHeight) {
        self.setElements("hide");
        return;
      } //else continue with operations
      else {
          //lens options
          if (self.options.showLens) {
            //		self.showHideLens("show");
            //set background position of lens
            self.lensLeftPos = String(Math.floor(self.mouseLeft - self.zoomLens.width() / 2));
            self.lensTopPos = String(Math.floor(self.mouseTop - self.zoomLens.height() / 2));
          } //adjust the background position if the mouse is in one of the outer regions
          //Top region


          if (self.Etoppos) {
            self.lensTopPos = 0;
          } //Left Region


          if (self.Eloppos) {
            self.windowLeftPos = 0;
            self.lensLeftPos = 0;
            self.tintpos = 0;
          } //Set bottom and right region for window mode


          if (self.options.zoomType == "window") {
            if (self.Eboppos) {
              self.lensTopPos = Math.max(self.nzHeight - self.zoomLens.height() - self.options.lensBorderSize * 2, 0);
            }

            if (self.Eroppos) {
              self.lensLeftPos = self.nzWidth - self.zoomLens.width() - self.options.lensBorderSize * 2;
            }
          } //Set bottom and right region for inner mode


          if (self.options.zoomType == "inner") {
            if (self.Eboppos) {
              self.lensTopPos = Math.max(self.nzHeight - self.options.lensBorderSize * 2, 0);
            }

            if (self.Eroppos) {
              self.lensLeftPos = self.nzWidth - self.nzWidth - self.options.lensBorderSize * 2;
            }
          } //if lens zoom


          if (self.options.zoomType == "lens") {
            self.windowLeftPos = String(((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomLens.width() / 2) * -1);
            self.windowTopPos = String(((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomLens.height() / 2) * -1);
            self.zoomLens.css({
              backgroundPosition: self.windowLeftPos + "px " + self.windowTopPos + "px"
            });

            if (self.changeBgSize) {
              if (self.nzHeight > self.nzWidth) {
                if (self.options.zoomType == "lens") {
                  self.zoomLens.css({
                    "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
                  });
                }

                self.zoomWindow.css({
                  "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
                });
              } else {
                if (self.options.zoomType == "lens") {
                  self.zoomLens.css({
                    "background-size": self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px"
                  });
                }

                self.zoomWindow.css({
                  "background-size": self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px"
                });
              }

              self.changeBgSize = false;
            }

            self.setWindowPostition(e);
          } //if tint zoom


          if (self.options.tint && self.options.zoomType != "inner") {
            self.setTintPosition(e);
          } //set the css background position


          if (self.options.zoomType == "window") {
            self.setWindowPostition(e);
          }

          if (self.options.zoomType == "inner") {
            self.setWindowPostition(e);
          }

          if (self.options.showLens) {
            if (self.fullwidth && self.options.zoomType != "lens") {
              self.lensLeftPos = 0;
            }

            self.zoomLens.css({
              left: self.lensLeftPos + "px",
              top: self.lensTopPos + "px"
            });
          }
        } //end else

    },
    showHideWindow: function showHideWindow(change) {
      var self = this;

      if (change == "show") {
        if (!self.isWindowActive) {
          if (self.options.zoomWindowFadeIn) {
            self.zoomWindow.stop(true, true, false).fadeIn(self.options.zoomWindowFadeIn);
          } else {
            self.zoomWindow.show();
          }

          self.isWindowActive = true;
        }
      }

      if (change == "hide") {
        if (self.isWindowActive) {
          if (self.options.zoomWindowFadeOut) {
            self.zoomWindow.stop(true, true).fadeOut(self.options.zoomWindowFadeOut, function () {
              if (self.loop) {
                //stop moving the zoom window when zoom window is faded out
                clearInterval(self.loop);
                self.loop = false;
              }
            });
          } else {
            self.zoomWindow.hide();
          }

          self.isWindowActive = false;
        }
      }
    },
    showHideLens: function showHideLens(change) {
      var self = this;

      if (change == "show") {
        if (!self.isLensActive) {
          if (self.options.lensFadeIn) {
            self.zoomLens.stop(true, true, false).fadeIn(self.options.lensFadeIn);
          } else {
            self.zoomLens.show();
          }

          self.isLensActive = true;
        }
      }

      if (change == "hide") {
        if (self.isLensActive) {
          if (self.options.lensFadeOut) {
            self.zoomLens.stop(true, true).fadeOut(self.options.lensFadeOut);
          } else {
            self.zoomLens.hide();
          }

          self.isLensActive = false;
        }
      }
    },
    showHideTint: function showHideTint(change) {
      var self = this;

      if (change == "show") {
        if (!self.isTintActive) {
          if (self.options.zoomTintFadeIn) {
            self.zoomTint.css({
              opacity: self.options.tintOpacity
            }).animate().stop(true, true).fadeIn("slow");
          } else {
            self.zoomTint.css({
              opacity: self.options.tintOpacity
            }).animate();
            self.zoomTint.show();
          }

          self.isTintActive = true;
        }
      }

      if (change == "hide") {
        if (self.isTintActive) {
          if (self.options.zoomTintFadeOut) {
            self.zoomTint.stop(true, true).fadeOut(self.options.zoomTintFadeOut);
          } else {
            self.zoomTint.hide();
          }

          self.isTintActive = false;
        }
      }
    },
    setLensPostition: function setLensPostition(e) {},
    setWindowPostition: function setWindowPostition(e) {
      //return obj.slice( 0, count );
      var self = this;

      if (!isNaN(self.options.zoomWindowPosition)) {
        switch (self.options.zoomWindowPosition) {
          case 1:
            //done
            self.windowOffsetTop = self.options.zoomWindowOffety; //DONE - 1

            self.windowOffsetLeft = +self.nzWidth; //DONE 1, 2, 3, 4, 16

            break;

          case 2:
            if (self.options.zoomWindowHeight > self.nzHeight) {
              //positive margin
              self.windowOffsetTop = (self.options.zoomWindowHeight / 2 - self.nzHeight / 2) * -1;
              self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16
            } else {//negative margin
              }

            break;

          case 3:
            //done
            self.windowOffsetTop = self.nzHeight - self.zoomWindow.height() - self.options.borderSize * 2; //DONE 3,9

            self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

            break;

          case 4:
            //done
            self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

            self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

            break;

          case 5:
            //done
            self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

            self.windowOffsetLeft = self.nzWidth - self.zoomWindow.width() - self.options.borderSize * 2; //DONE - 5,15

            break;

          case 6:
            if (self.options.zoomWindowHeight > self.nzHeight) {
              //positive margin
              self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

              self.windowOffsetLeft = (self.options.zoomWindowWidth / 2 - self.nzWidth / 2 + self.options.borderSize * 2) * -1;
            } else {//negative margin
            }

            break;

          case 7:
            //done
            self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

            self.windowOffsetLeft = 0; //DONE 7, 13

            break;

          case 8:
            //done
            self.windowOffsetTop = self.nzHeight; //DONE - 4,5,6,7,8

            self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

            break;

          case 9:
            //done
            self.windowOffsetTop = self.nzHeight - self.zoomWindow.height() - self.options.borderSize * 2; //DONE 3,9

            self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

            break;

          case 10:
            if (self.options.zoomWindowHeight > self.nzHeight) {
              //positive margin
              self.windowOffsetTop = (self.options.zoomWindowHeight / 2 - self.nzHeight / 2) * -1;
              self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12
            } else {//negative margin
              }

            break;

          case 11:
            self.windowOffsetTop = self.options.zoomWindowOffety;
            self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

            break;

          case 12:
            //done
            self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

            self.windowOffsetLeft = (self.zoomWindow.width() + self.options.borderSize * 2) * -1; //DONE 8,9,10,11,12

            break;

          case 13:
            //done
            self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

            self.windowOffsetLeft = 0; //DONE 7, 13

            break;

          case 14:
            if (self.options.zoomWindowHeight > self.nzHeight) {
              //positive margin
              self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

              self.windowOffsetLeft = (self.options.zoomWindowWidth / 2 - self.nzWidth / 2 + self.options.borderSize * 2) * -1;
            } else {//negative margin
            }

            break;

          case 15:
            //done
            self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

            self.windowOffsetLeft = self.nzWidth - self.zoomWindow.width() - self.options.borderSize * 2; //DONE - 5,15

            break;

          case 16:
            //done
            self.windowOffsetTop = (self.zoomWindow.height() + self.options.borderSize * 2) * -1; //DONE 12,13,14,15,16

            self.windowOffsetLeft = self.nzWidth; //DONE 1, 2, 3, 4, 16

            break;

          default:
            //done
            self.windowOffsetTop = self.options.zoomWindowOffety; //DONE - 1

            self.windowOffsetLeft = self.nzWidth;
          //DONE 1, 2, 3, 4, 16
        }
      } //end isNAN
      else {
          //WE CAN POSITION IN A CLASS - ASSUME THAT ANY STRING PASSED IS
          self.externalContainer = $("#" + self.options.zoomWindowPosition);
          self.externalContainerWidth = self.externalContainer.width();
          self.externalContainerHeight = self.externalContainer.height();
          self.externalContainerOffset = self.externalContainer.offset();
          self.windowOffsetTop = self.externalContainerOffset.top; //DONE - 1

          self.windowOffsetLeft = self.externalContainerOffset.left; //DONE 1, 2, 3, 4, 16
        }

      self.isWindowSet = true;
      self.windowOffsetTop = self.windowOffsetTop + self.options.zoomWindowOffety;
      self.windowOffsetLeft = self.windowOffsetLeft + self.options.zoomWindowOffetx;
      self.zoomWindow.css({
        top: self.windowOffsetTop
      });
      self.zoomWindow.css({
        left: self.windowOffsetLeft
      });

      if (self.options.zoomType == "inner") {
        self.zoomWindow.css({
          top: 0
        });
        self.zoomWindow.css({
          left: 0
        });
      }

      self.windowLeftPos = String(((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1);
      self.windowTopPos = String(((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1);

      if (self.Etoppos) {
        self.windowTopPos = 0;
      }

      if (self.Eloppos) {
        self.windowLeftPos = 0;
      }

      if (self.Eboppos) {
        self.windowTopPos = (self.largeHeight / self.currentZoomLevel - self.zoomWindow.height()) * -1;
      }

      if (self.Eroppos) {
        self.windowLeftPos = (self.largeWidth / self.currentZoomLevel - self.zoomWindow.width()) * -1;
      } //stops micro movements


      if (self.fullheight) {
        self.windowTopPos = 0;
      }

      if (self.fullwidth) {
        self.windowLeftPos = 0;
      } //set the css background position


      if (self.options.zoomType == "window" || self.options.zoomType == "inner") {
        if (self.zoomLock == 1) {
          //overrides for images not zoomable
          if (self.widthRatio <= 1) {
            self.windowLeftPos = 0;
          }

          if (self.heightRatio <= 1) {
            self.windowTopPos = 0;
          }
        } // adjust images less than the window height


        if (self.options.zoomType == "window") {
          if (self.largeHeight < self.options.zoomWindowHeight) {
            self.windowTopPos = 0;
          }

          if (self.largeWidth < self.options.zoomWindowWidth) {
            self.windowLeftPos = 0;
          }
        } //set the zoomwindow background position


        if (self.options.easing) {
          //     if(self.changeZoom){
          //           clearInterval(self.loop);
          //           self.changeZoom = false;
          //           self.loop = false;
          //            }
          //set the pos to 0 if not set
          if (!self.xp) {
            self.xp = 0;
          }

          if (!self.yp) {
            self.yp = 0;
          } //if loop not already started, then run it


          if (!self.loop) {
            self.loop = setInterval(function () {
              //using zeno's paradox
              self.xp += (self.windowLeftPos - self.xp) / self.options.easingAmount;
              self.yp += (self.windowTopPos - self.yp) / self.options.easingAmount;

              if (self.scrollingLock) {
                clearInterval(self.loop);
                self.xp = self.windowLeftPos;
                self.yp = self.windowTopPos;
                self.xp = ((e.pageX - self.nzOffset.left) * self.widthRatio - self.zoomWindow.width() / 2) * -1;
                self.yp = ((e.pageY - self.nzOffset.top) * self.heightRatio - self.zoomWindow.height() / 2) * -1;

                if (self.changeBgSize) {
                  if (self.nzHeight > self.nzWidth) {
                    if (self.options.zoomType == "lens") {
                      self.zoomLens.css({
                        "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
                      });
                    }

                    self.zoomWindow.css({
                      "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
                    });
                  } else {
                    if (self.options.zoomType != "lens") {
                      self.zoomLens.css({
                        "background-size": self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvalueheight + "px"
                      });
                    }

                    self.zoomWindow.css({
                      "background-size": self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px"
                    });
                  }
                  /*
                      if(!self.bgxp){self.bgxp = self.largeWidth/self.newvalue;}
                  if(!self.bgyp){self.bgyp = self.largeHeight/self.newvalue ;}
                          if (!self.bgloop){
                          	self.bgloop = setInterval(function(){
                          self.bgxp += (self.largeWidth/self.newvalue  - self.bgxp) / self.options.easingAmount;
                  self.bgyp += (self.largeHeight/self.newvalue  - self.bgyp) / self.options.easingAmount;
                    self.zoomWindow.css({ "background-size": self.bgxp + 'px ' + self.bgyp + 'px' });
                           }, 16);
                          }
                  	 */


                  self.changeBgSize = false;
                }

                self.zoomWindow.css({
                  backgroundPosition: self.windowLeftPos + "px " + self.windowTopPos + "px"
                });
                self.scrollingLock = false;
                self.loop = false;
              } else if (Math.round(Math.abs(self.xp - self.windowLeftPos) + Math.abs(self.yp - self.windowTopPos)) < 1) {
                //stops micro movements
                clearInterval(self.loop);
                self.zoomWindow.css({
                  backgroundPosition: self.windowLeftPos + "px " + self.windowTopPos + "px"
                });
                self.loop = false;
              } else {
                if (self.changeBgSize) {
                  if (self.nzHeight > self.nzWidth) {
                    if (self.options.zoomType == "lens") {
                      self.zoomLens.css({
                        "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
                      });
                    }

                    self.zoomWindow.css({
                      "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
                    });
                  } else {
                    if (self.options.zoomType != "lens") {
                      self.zoomLens.css({
                        "background-size": self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px"
                      });
                    }

                    self.zoomWindow.css({
                      "background-size": self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px"
                    });
                  }

                  self.changeBgSize = false;
                }

                self.zoomWindow.css({
                  backgroundPosition: self.xp + "px " + self.yp + "px"
                });
              }
            }, 16);
          }
        } else {
          if (self.changeBgSize) {
            if (self.nzHeight > self.nzWidth) {
              if (self.options.zoomType == "lens") {
                self.zoomLens.css({
                  "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
                });
              }

              self.zoomWindow.css({
                "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
              });
            } else {
              if (self.options.zoomType == "lens") {
                self.zoomLens.css({
                  "background-size": self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px"
                });
              }

              if (self.largeHeight / self.newvaluewidth < self.options.zoomWindowHeight) {
                self.zoomWindow.css({
                  "background-size": self.largeWidth / self.newvaluewidth + "px " + self.largeHeight / self.newvaluewidth + "px"
                });
              } else {
                self.zoomWindow.css({
                  "background-size": self.largeWidth / self.newvalueheight + "px " + self.largeHeight / self.newvalueheight + "px"
                });
              }
            }

            self.changeBgSize = false;
          }

          self.zoomWindow.css({
            backgroundPosition: self.windowLeftPos + "px " + self.windowTopPos + "px"
          });
        }
      }
    },
    setTintPosition: function setTintPosition(e) {
      var self = this;
      self.nzOffset = self.$elem.offset();
      self.tintpos = String((e.pageX - self.nzOffset.left - self.zoomLens.width() / 2) * -1);
      self.tintposy = String((e.pageY - self.nzOffset.top - self.zoomLens.height() / 2) * -1);

      if (self.Etoppos) {
        self.tintposy = 0;
      }

      if (self.Eloppos) {
        self.tintpos = 0;
      }

      if (self.Eboppos) {
        self.tintposy = (self.nzHeight - self.zoomLens.height() - self.options.lensBorderSize * 2) * -1;
      }

      if (self.Eroppos) {
        self.tintpos = (self.nzWidth - self.zoomLens.width() - self.options.lensBorderSize * 2) * -1;
      }

      if (self.options.tint) {
        //stops micro movements
        if (self.fullheight) {
          self.tintposy = 0;
        }

        if (self.fullwidth) {
          self.tintpos = 0;
        }

        self.zoomTintImage.css({
          left: self.tintpos + "px"
        });
        self.zoomTintImage.css({
          top: self.tintposy + "px"
        });
      }
    },
    swaptheimage: function swaptheimage(smallimage, largeimage) {
      var self = this;
      var newImg = new Image();

      if (self.options.loadingIcon) {
        self.spinner = $("<div style=\"background: url('" + self.options.loadingIcon + "') no-repeat center;height:" + self.nzHeight + "px;width:" + self.nzWidth + 'px;z-index: 2000;position: absolute; background-position: center center;"></div>');
        self.$elem.after(self.spinner);
      }

      self.options.onImageSwap(self.$elem);

      newImg.onload = function () {
        self.largeWidth = newImg.width;
        self.largeHeight = newImg.height;
        self.zoomImage = largeimage;
        self.zoomWindow.css({
          "background-size": self.largeWidth + "px " + self.largeHeight + "px"
        });
        self.swapAction(smallimage, largeimage);
        return;
      };

      newImg.src = largeimage; // this must be done AFTER setting onload
    },
    swapAction: function swapAction(smallimage, largeimage) {
      var self = this;
      var newImg2 = new Image();

      newImg2.onload = function () {
        //re-calculate values
        self.nzHeight = newImg2.height;
        self.nzWidth = newImg2.width;
        self.options.onImageSwapComplete(self.$elem);
        self.doneCallback();
        return;
      };

      newImg2.src = smallimage; //reset the zoomlevel to that initially set in options

      self.currentZoomLevel = self.options.zoomLevel;
      self.options.maxZoomLevel = false; //swaps the main image
      //self.$elem.attr("src",smallimage);
      //swaps the zoom image

      if (self.options.zoomType == "lens") {
        self.zoomLens.css({
          backgroundImage: "url('" + largeimage + "')"
        });
      }

      if (self.options.zoomType == "window") {
        self.zoomWindow.css({
          backgroundImage: "url('" + largeimage + "')"
        });
      }

      if (self.options.zoomType == "inner") {
        self.zoomWindow.css({
          backgroundImage: "url('" + largeimage + "')"
        });
      }

      self.currentImage = largeimage;

      if (self.options.imageCrossfade) {
        var oldImg = self.$elem;
        var newImg = oldImg.clone();
        self.$elem.attr("src", smallimage);
        self.$elem.after(newImg);
        newImg.stop(true).fadeOut(self.options.imageCrossfade, function () {
          $(this).remove();
        }); //       				if(self.options.zoomType == "inner"){
        //remove any attributes on the cloned image so we can resize later

        self.$elem.width("auto").removeAttr("width");
        self.$elem.height("auto").removeAttr("height"); //   }

        oldImg.fadeIn(self.options.imageCrossfade);

        if (self.options.tint && self.options.zoomType != "inner") {
          var oldImgTint = self.zoomTintImage;
          var newImgTint = oldImgTint.clone();
          self.zoomTintImage.attr("src", largeimage);
          self.zoomTintImage.after(newImgTint);
          newImgTint.stop(true).fadeOut(self.options.imageCrossfade, function () {
            $(this).remove();
          });
          oldImgTint.fadeIn(self.options.imageCrossfade); //self.zoomTintImage.attr("width",elem.data("image"));
          //resize the tint window

          self.zoomTint.css({
            height: self.$elem.height()
          });
          self.zoomTint.css({
            width: self.$elem.width()
          });
        }

        self.zoomContainer.css("height", self.$elem.height());
        self.zoomContainer.css("width", self.$elem.width());

        if (self.options.zoomType == "inner") {
          if (!self.options.constrainType) {
            self.zoomWrap.parent().css("height", self.$elem.height());
            self.zoomWrap.parent().css("width", self.$elem.width());
            self.zoomWindow.css("height", self.$elem.height());
            self.zoomWindow.css("width", self.$elem.width());
          }
        }

        if (self.options.imageCrossfade) {
          self.zoomWrap.css("height", self.$elem.height());
          self.zoomWrap.css("width", self.$elem.width());
        }
      } else {
        self.$elem.attr("src", smallimage);

        if (self.options.tint) {
          self.zoomTintImage.attr("src", largeimage); //self.zoomTintImage.attr("width",elem.data("image"));

          self.zoomTintImage.attr("height", self.$elem.height()); //self.zoomTintImage.attr('src') = elem.data("image");

          self.zoomTintImage.css({
            height: self.$elem.height()
          });
          self.zoomTint.css({
            height: self.$elem.height()
          });
        }

        self.zoomContainer.css("height", self.$elem.height());
        self.zoomContainer.css("width", self.$elem.width());

        if (self.options.imageCrossfade) {
          self.zoomWrap.css("height", self.$elem.height());
          self.zoomWrap.css("width", self.$elem.width());
        }
      }

      if (self.options.constrainType) {
        //This will contrain the image proportions
        if (self.options.constrainType == "height") {
          self.zoomContainer.css("height", self.options.constrainSize);
          self.zoomContainer.css("width", "auto");

          if (self.options.imageCrossfade) {
            self.zoomWrap.css("height", self.options.constrainSize);
            self.zoomWrap.css("width", "auto");
            self.constwidth = self.zoomWrap.width();
          } else {
            self.$elem.css("height", self.options.constrainSize);
            self.$elem.css("width", "auto");
            self.constwidth = self.$elem.width();
          }

          if (self.options.zoomType == "inner") {
            self.zoomWrap.parent().css("height", self.options.constrainSize);
            self.zoomWrap.parent().css("width", self.constwidth);
            self.zoomWindow.css("height", self.options.constrainSize);
            self.zoomWindow.css("width", self.constwidth);
          }

          if (self.options.tint) {
            self.tintContainer.css("height", self.options.constrainSize);
            self.tintContainer.css("width", self.constwidth);
            self.zoomTint.css("height", self.options.constrainSize);
            self.zoomTint.css("width", self.constwidth);
            self.zoomTintImage.css("height", self.options.constrainSize);
            self.zoomTintImage.css("width", self.constwidth);
          }
        }

        if (self.options.constrainType == "width") {
          self.zoomContainer.css("height", "auto");
          self.zoomContainer.css("width", self.options.constrainSize);

          if (self.options.imageCrossfade) {
            self.zoomWrap.css("height", "auto");
            self.zoomWrap.css("width", self.options.constrainSize);
            self.constheight = self.zoomWrap.height();
          } else {
            self.$elem.css("height", "auto");
            self.$elem.css("width", self.options.constrainSize);
            self.constheight = self.$elem.height();
          }

          if (self.options.zoomType == "inner") {
            self.zoomWrap.parent().css("height", self.constheight);
            self.zoomWrap.parent().css("width", self.options.constrainSize);
            self.zoomWindow.css("height", self.constheight);
            self.zoomWindow.css("width", self.options.constrainSize);
          }

          if (self.options.tint) {
            self.tintContainer.css("height", self.constheight);
            self.tintContainer.css("width", self.options.constrainSize);
            self.zoomTint.css("height", self.constheight);
            self.zoomTint.css("width", self.options.constrainSize);
            self.zoomTintImage.css("height", self.constheight);
            self.zoomTintImage.css("width", self.options.constrainSize);
          }
        }
      }
    },
    doneCallback: function doneCallback() {
      var self = this;

      if (self.options.loadingIcon) {
        self.spinner.hide();
      }

      self.nzOffset = self.$elem.offset();
      self.nzWidth = self.$elem.width();
      self.nzHeight = self.$elem.height(); // reset the zoomlevel back to default

      self.currentZoomLevel = self.options.zoomLevel; //ratio of the large to small image

      self.widthRatio = self.largeWidth / self.nzWidth;
      self.heightRatio = self.largeHeight / self.nzHeight; //NEED TO ADD THE LENS SIZE FOR ROUND
      // adjust images less than the window height

      if (self.options.zoomType == "window") {
        if (self.nzHeight < self.options.zoomWindowWidth / self.widthRatio) {
          lensHeight = self.nzHeight;
        } else {
          lensHeight = String(self.options.zoomWindowHeight / self.heightRatio);
        }

        if (self.options.zoomWindowWidth < self.options.zoomWindowWidth) {
          lensWidth = self.nzWidth;
        } else {
          lensWidth = self.options.zoomWindowWidth / self.widthRatio;
        }

        if (self.zoomLens) {
          self.zoomLens.css("width", lensWidth);
          self.zoomLens.css("height", lensHeight);
        }
      }
    },
    getCurrentImage: function getCurrentImage() {
      var self = this;
      return self.zoomImage;
    },
    getGalleryList: function getGalleryList() {
      var self = this; //loop through the gallery options and set them in list for fancybox

      self.gallerylist = [];

      if (self.options.gallery) {
        $("#" + self.options.gallery + " a").each(function () {
          var img_src = "";

          if ($(this).data("zoom-image")) {
            img_src = $(this).data("zoom-image");
          } else if ($(this).data("image")) {
            img_src = $(this).data("image");
          } //put the current image at the start


          if (img_src == self.zoomImage) {
            self.gallerylist.unshift({
              href: "" + img_src + "",
              title: $(this).find("img").attr("title")
            });
          } else {
            self.gallerylist.push({
              href: "" + img_src + "",
              title: $(this).find("img").attr("title")
            });
          }
        });
      } //if no gallery - return current image
      else {
          self.gallerylist.push({
            href: "" + self.zoomImage + "",
            title: $(this).find("img").attr("title")
          });
        }

      return self.gallerylist;
    },
    changeZoomLevel: function changeZoomLevel(value) {
      var self = this; //flag a zoom, so can adjust the easing during setPosition

      self.scrollingLock = true; //round to two decimal places

      self.newvalue = parseFloat(value).toFixed(2);
      newvalue = parseFloat(value).toFixed(2); //maxwidth & Maxheight of the image

      maxheightnewvalue = self.largeHeight / (self.options.zoomWindowHeight / self.nzHeight * self.nzHeight);
      maxwidthtnewvalue = self.largeWidth / (self.options.zoomWindowWidth / self.nzWidth * self.nzWidth); //calculate new heightratio

      if (self.options.zoomType != "inner") {
        if (maxheightnewvalue <= newvalue) {
          self.heightRatio = self.largeHeight / maxheightnewvalue / self.nzHeight;
          self.newvalueheight = maxheightnewvalue;
          self.fullheight = true;
        } else {
          self.heightRatio = self.largeHeight / newvalue / self.nzHeight;
          self.newvalueheight = newvalue;
          self.fullheight = false;
        } //					calculate new width ratio


        if (maxwidthtnewvalue <= newvalue) {
          self.widthRatio = self.largeWidth / maxwidthtnewvalue / self.nzWidth;
          self.newvaluewidth = maxwidthtnewvalue;
          self.fullwidth = true;
        } else {
          self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
          self.newvaluewidth = newvalue;
          self.fullwidth = false;
        }

        if (self.options.zoomType == "lens") {
          if (maxheightnewvalue <= newvalue) {
            self.fullwidth = true;
            self.newvaluewidth = maxheightnewvalue;
          } else {
            self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
            self.newvaluewidth = newvalue;
            self.fullwidth = false;
          }
        }
      }

      if (self.options.zoomType == "inner") {
        maxheightnewvalue = parseFloat(self.largeHeight / self.nzHeight).toFixed(2);
        maxwidthtnewvalue = parseFloat(self.largeWidth / self.nzWidth).toFixed(2);

        if (newvalue > maxheightnewvalue) {
          newvalue = maxheightnewvalue;
        }

        if (newvalue > maxwidthtnewvalue) {
          newvalue = maxwidthtnewvalue;
        }

        if (maxheightnewvalue <= newvalue) {
          self.heightRatio = self.largeHeight / newvalue / self.nzHeight;

          if (newvalue > maxheightnewvalue) {
            self.newvalueheight = maxheightnewvalue;
          } else {
            self.newvalueheight = newvalue;
          }

          self.fullheight = true;
        } else {
          self.heightRatio = self.largeHeight / newvalue / self.nzHeight;

          if (newvalue > maxheightnewvalue) {
            self.newvalueheight = maxheightnewvalue;
          } else {
            self.newvalueheight = newvalue;
          }

          self.fullheight = false;
        }

        if (maxwidthtnewvalue <= newvalue) {
          self.widthRatio = self.largeWidth / newvalue / self.nzWidth;

          if (newvalue > maxwidthtnewvalue) {
            self.newvaluewidth = maxwidthtnewvalue;
          } else {
            self.newvaluewidth = newvalue;
          }

          self.fullwidth = true;
        } else {
          self.widthRatio = self.largeWidth / newvalue / self.nzWidth;
          self.newvaluewidth = newvalue;
          self.fullwidth = false;
        }
      } //end inner


      scrcontinue = false;

      if (self.options.zoomType == "inner") {
        if (self.nzWidth >= self.nzHeight) {
          if (self.newvaluewidth <= maxwidthtnewvalue) {
            scrcontinue = true;
          } else {
            scrcontinue = false;
            self.fullheight = true;
            self.fullwidth = true;
          }
        }

        if (self.nzHeight > self.nzWidth) {
          if (self.newvaluewidth <= maxwidthtnewvalue) {
            scrcontinue = true;
          } else {
            scrcontinue = false;
            self.fullheight = true;
            self.fullwidth = true;
          }
        }
      }

      if (self.options.zoomType != "inner") {
        scrcontinue = true;
      }

      if (scrcontinue) {
        self.zoomLock = 0;
        self.changeZoom = true; //if lens height is less than image height

        if (self.options.zoomWindowHeight / self.heightRatio <= self.nzHeight) {
          self.currentZoomLevel = self.newvalueheight;

          if (self.options.zoomType != "lens" && self.options.zoomType != "inner") {
            self.changeBgSize = true;
            self.zoomLens.css({
              height: String(self.options.zoomWindowHeight / self.heightRatio) + "px"
            });
          }

          if (self.options.zoomType == "lens" || self.options.zoomType == "inner") {
            self.changeBgSize = true;
          }
        }

        if (self.options.zoomWindowWidth / self.widthRatio <= self.nzWidth) {
          if (self.options.zoomType != "inner") {
            if (self.newvaluewidth > self.newvalueheight) {
              self.currentZoomLevel = self.newvaluewidth;
            }
          }

          if (self.options.zoomType != "lens" && self.options.zoomType != "inner") {
            self.changeBgSize = true;
            self.zoomLens.css({
              width: String(self.options.zoomWindowWidth / self.widthRatio) + "px"
            });
          }

          if (self.options.zoomType == "lens" || self.options.zoomType == "inner") {
            self.changeBgSize = true;
          }
        }

        if (self.options.zoomType == "inner") {
          self.changeBgSize = true;

          if (self.nzWidth > self.nzHeight) {
            self.currentZoomLevel = self.newvaluewidth;
          }

          if (self.nzHeight > self.nzWidth) {
            self.currentZoomLevel = self.newvaluewidth;
          }
        }
      } //under
      //sets the boundry change, called in setWindowPos


      self.setPosition(self.currentLoc); //
    },
    closeAll: function closeAll() {
      if (self.zoomWindow) {
        self.zoomWindow.hide();
      }

      if (self.zoomLens) {
        self.zoomLens.hide();
      }

      if (self.zoomTint) {
        self.zoomTint.hide();
      }
    },
    changeState: function changeState(value) {
      var self = this;

      if (value == "enable") {
        self.options.zoomEnabled = true;
      }

      if (value == "disable") {
        self.options.zoomEnabled = false;
      }
    }
  };

  $.fn.elevateZoom = function (options) {
    return this.each(function () {
      var elevate = Object.create(ElevateZoom);
      elevate.init(options, this);
      $.data(this, "elevateZoom", elevate);
    });
  };

  $.fn.elevateZoom.options = {
    zoomActivation: "hover",
    // Can also be click (PLACEHOLDER FOR NEXT VERSION)
    zoomEnabled: true,
    //false disables zoomwindow from showing
    preloading: 1,
    //by default, load all the images, if 0, then only load images after activated (PLACEHOLDER FOR NEXT VERSION)
    zoomLevel: 1,
    //default zoom level of image
    scrollZoom: false,
    //allow zoom on mousewheel, true to activate
    scrollZoomIncrement: 0.1,
    //steps of the scrollzoom
    minZoomLevel: false,
    maxZoomLevel: false,
    easing: false,
    easingAmount: 12,
    lensSize: 200,
    zoomWindowWidth: 400,
    zoomWindowHeight: 400,
    zoomWindowOffetx: 0,
    zoomWindowOffety: 0,
    zoomWindowPosition: 1,
    zoomWindowBgColour: "#fff",
    lensFadeIn: false,
    lensFadeOut: false,
    debug: false,
    zoomWindowFadeIn: false,
    zoomWindowFadeOut: false,
    zoomWindowAlwaysShow: false,
    zoomTintFadeIn: false,
    zoomTintFadeOut: false,
    borderSize: 4,
    showLens: true,
    borderColour: "#888",
    lensBorderSize: 1,
    lensBorderColour: "#000",
    lensShape: "square",
    //can be "round"
    zoomType: "window",
    //window is default,  also "lens" available -
    containLensZoom: false,
    lensColour: "white",
    //colour of the lens background
    lensOpacity: 0.4,
    //opacity of the lens
    lenszoom: false,
    tint: false,
    //enable the tinting
    tintColour: "#333",
    //default tint color, can be anything, red, #ccc, rgb(0,0,0)
    tintOpacity: 0.4,
    //opacity of the tint
    gallery: false,
    galleryActiveClass: "zoomGalleryActive",
    imageCrossfade: false,
    constrainType: false,
    //width or height
    constrainSize: false,
    //in pixels the dimensions you want to constrain on
    loadingIcon: false,
    //http://www.example.com/spinner.gif
    cursor: "default",
    // user should set to what they want the cursor as, if they have set a click function
    responsive: true,
    onComplete: $.noop,
    onDestroy: function onDestroy() {},
    onZoomedImageLoaded: function onZoomedImageLoaded() {},
    onImageSwap: $.noop,
    onImageSwapComplete: $.noop
  };
})(jQuery, window, document);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/indique-a-loja.js":
/*!***********************************************!*\
  !*** ./src/arquivos/js/lib/indique-a-loja.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {(function ($) {
  var indiqueALoja = {
    servico: {
      enviar: function enviar(obj) {
        return $.ajax({
          headers: {
            "Content-Type": "application/json"
          },
          type: "POST",
          data: JSON.stringify(obj),
          url: "/api/dataentities/".concat(indiqueALoja.opt.siglaDaEntidade, "/documents")
        });
      },
      conteudo: function conteudo(form) {
        return {
          nome: $(form).find(".nome-completo").val().trim(),
          email: $(form).find(".emailInput").val().trim(),
          nomeIndicado: $(form).find(".nome-indicado").val().trim(),
          emailIndicado: $(form).find(".email-indicado").val().trim(),
          mensagem: $(form).find(".mensagem").val().trim()
        };
      },
      resetFormulario: function resetFormulario(form) {
        $(form).find(".nome-completo").val("");
        $(form).find(".emailInput").val("");
        $(form).find(".nome-indique").val("");
        $(form).find(".email-indique").val("");
        $(form).find(".mensagem").val("");
      }
    },
    criarOpcoesValidacao: function criarOpcoesValidacao() {
      //metodo de validação para email
      $.validator.addMethod("emailBr", function (value, element) {
        return this.optional(element) || /^([a-zA-Z0-9_.+-])+\@(([a-zA-Z0-9-])+\.)+([a-zA-Z0-9]{2,4})+$/.test(value);
      });
      var opcoes = {
        focusInvalid: true,
        onkeyup: false,
        onfocusout: function onfocusout(element) {
          $(element).valid();
        },
        errorPlacement: function errorPlacement(error, element) {
          error.appendTo(element.parent("fieldset"));
        },
        rules: {
          "nome-completo": {
            required: true,
            rangelength: [2, 100]
          },
          email: {
            required: true,
            emailBr: true
          },
          "email-indicado": {
            required: true,
            emailBr: true
          }
        },
        messages: {
          "nome-completo": {
            required: "Por favor, informe o seu nome!",
            rangelength: $.validator.format("O nome de ter de {0} caracteres a {1} caracteres")
          },
          email: {
            required: "Por favor, informe o seu email!",
            emailBr: "Formato de email invalido. <br>Exemplo de email valido: exemplo@mail.com.br"
          },
          "email-indicado": {
            required: "Por favor, informe um email!",
            emailBr: "Formato de email invalido. <br>Exemplo de email valido: exemplo@mail.com.br"
          }
        }
      }; // Irá disparar quando a validação passar, após chamar o método validate().

      opcoes.submitHandler = function submitHandler(form) {
        var sucesso = function sucesso(data, textStatus, jqXHR) {
          indiqueALoja.servico.resetFormulario(form);
          $(document).trigger("FC-registered-successfully");
          $(form).siblings("#mensagemErro").text("Mensagem enviada com sucesso.").show().addClass("success").removeClass("alert");
        };

        var erro = function erro(jqXHR, textStatus, errorThrown) {
          $(document).trigger("FC-registered-failed");
          $(form).siblings("#mensagemErro").text("Não foi possivel enviar a sua mensagem, tente novamente mais tarde.").show().addClass("alert").removeClass("success");
        };

        var obj = indiqueALoja.servico.conteudo(form);
        indiqueALoja.servico.enviar(obj).done(sucesso).fail(erro);
      }; // submitHandler


      return opcoes;
    },
    init: function init($form) {
      //confgura eventos
      $form.submit(false);
      $form.validate(indiqueALoja.criarOpcoesValidacao());
    }
  };

  $.fn.vtexIndiqueALoja = function (options) {
    indiqueALoja.opt = $.extend({}, $.fn.vtexIndiqueALoja.defaults, options);
    $(this).each(function (index, el) {
      indiqueALoja.init($(this));
    });
  };

  $.fn.vtexIndiqueALoja.defaults = {
    nomeDoCliente: "minha-loja",
    siglaDaEntidade: "FC",
    vtex_api_appKey: "",
    vtex_api_appToken: ""
  };
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/lib/jquery.validate.min.js":
/*!****************************************************!*\
  !*** ./src/arquivos/js/lib/jquery.validate.min.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

/*! jQuery Validation Plugin - v1.15.1 - 7/22/2016
 * http://jqueryvalidation.org/
 * Copyright (c) 2016 Jörn Zaefferer; Licensed MIT */
!function (a) {
   true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "jquery")], __WEBPACK_AMD_DEFINE_FACTORY__ = (a),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : undefined;
}(function (a) {
  a.extend(a.fn, {
    validate: function validate(b) {
      if (!this.length) return void (b && b.debug && window.console && console.warn("Nothing selected, can't validate, returning nothing."));
      var c = a.data(this[0], "validator");
      return c ? c : (this.attr("novalidate", "novalidate"), c = new a.validator(b, this[0]), a.data(this[0], "validator", c), c.settings.onsubmit && (this.on("click.validate", ":submit", function (b) {
        c.settings.submitHandler && (c.submitButton = b.target), a(this).hasClass("cancel") && (c.cancelSubmit = !0), void 0 !== a(this).attr("formnovalidate") && (c.cancelSubmit = !0);
      }), this.on("submit.validate", function (b) {
        function d() {
          var d, e;
          return !c.settings.submitHandler || (c.submitButton && (d = a("<input type='hidden'/>").attr("name", c.submitButton.name).val(a(c.submitButton).val()).appendTo(c.currentForm)), e = c.settings.submitHandler.call(c, c.currentForm, b), c.submitButton && d.remove(), void 0 !== e && e);
        }

        return c.settings.debug && b.preventDefault(), c.cancelSubmit ? (c.cancelSubmit = !1, d()) : c.form() ? c.pendingRequest ? (c.formSubmitted = !0, !1) : d() : (c.focusInvalid(), !1);
      })), c);
    },
    valid: function valid() {
      var b, c, d;
      return a(this[0]).is("form") ? b = this.validate().form() : (d = [], b = !0, c = a(this[0].form).validate(), this.each(function () {
        b = c.element(this) && b, b || (d = d.concat(c.errorList));
      }), c.errorList = d), b;
    },
    rules: function rules(b, c) {
      var d,
          e,
          f,
          g,
          h,
          i,
          j = this[0];

      if (null != j && null != j.form) {
        if (b) switch (d = a.data(j.form, "validator").settings, e = d.rules, f = a.validator.staticRules(j), b) {
          case "add":
            a.extend(f, a.validator.normalizeRule(c)), delete f.messages, e[j.name] = f, c.messages && (d.messages[j.name] = a.extend(d.messages[j.name], c.messages));
            break;

          case "remove":
            return c ? (i = {}, a.each(c.split(/\s/), function (b, c) {
              i[c] = f[c], delete f[c], "required" === c && a(j).removeAttr("aria-required");
            }), i) : (delete e[j.name], f);
        }
        return g = a.validator.normalizeRules(a.extend({}, a.validator.classRules(j), a.validator.attributeRules(j), a.validator.dataRules(j), a.validator.staticRules(j)), j), g.required && (h = g.required, delete g.required, g = a.extend({
          required: h
        }, g), a(j).attr("aria-required", "true")), g.remote && (h = g.remote, delete g.remote, g = a.extend(g, {
          remote: h
        })), g;
      }
    }
  }), a.extend(a.expr[":"], {
    blank: function blank(b) {
      return !a.trim("" + a(b).val());
    },
    filled: function filled(b) {
      var c = a(b).val();
      return null !== c && !!a.trim("" + c);
    },
    unchecked: function unchecked(b) {
      return !a(b).prop("checked");
    }
  }), a.validator = function (b, c) {
    this.settings = a.extend(!0, {}, a.validator.defaults, b), this.currentForm = c, this.init();
  }, a.validator.format = function (b, c) {
    return 1 === arguments.length ? function () {
      var c = a.makeArray(arguments);
      return c.unshift(b), a.validator.format.apply(this, c);
    } : void 0 === c ? b : (arguments.length > 2 && c.constructor !== Array && (c = a.makeArray(arguments).slice(1)), c.constructor !== Array && (c = [c]), a.each(c, function (a, c) {
      b = b.replace(new RegExp("\\{" + a + "\\}", "g"), function () {
        return c;
      });
    }), b);
  }, a.extend(a.validator, {
    defaults: {
      messages: {},
      groups: {},
      rules: {},
      errorClass: "error",
      pendingClass: "pending",
      validClass: "valid",
      errorElement: "label",
      focusCleanup: !1,
      focusInvalid: !0,
      errorContainer: a([]),
      errorLabelContainer: a([]),
      onsubmit: !0,
      ignore: ":hidden",
      ignoreTitle: !1,
      onfocusin: function onfocusin(a) {
        this.lastActive = a, this.settings.focusCleanup && (this.settings.unhighlight && this.settings.unhighlight.call(this, a, this.settings.errorClass, this.settings.validClass), this.hideThese(this.errorsFor(a)));
      },
      onfocusout: function onfocusout(a) {
        this.checkable(a) || !(a.name in this.submitted) && this.optional(a) || this.element(a);
      },
      onkeyup: function onkeyup(b, c) {
        var d = [16, 17, 18, 20, 35, 36, 37, 38, 39, 40, 45, 144, 225];
        9 === c.which && "" === this.elementValue(b) || a.inArray(c.keyCode, d) !== -1 || (b.name in this.submitted || b.name in this.invalid) && this.element(b);
      },
      onclick: function onclick(a) {
        a.name in this.submitted ? this.element(a) : a.parentNode.name in this.submitted && this.element(a.parentNode);
      },
      highlight: function highlight(b, c, d) {
        "radio" === b.type ? this.findByName(b.name).addClass(c).removeClass(d) : a(b).addClass(c).removeClass(d);
      },
      unhighlight: function unhighlight(b, c, d) {
        "radio" === b.type ? this.findByName(b.name).removeClass(c).addClass(d) : a(b).removeClass(c).addClass(d);
      }
    },
    setDefaults: function setDefaults(b) {
      a.extend(a.validator.defaults, b);
    },
    messages: {
      required: "This field is required.",
      remote: "Please fix this field.",
      email: "Please enter a valid email address.",
      url: "Please enter a valid URL.",
      date: "Please enter a valid date.",
      dateISO: "Please enter a valid date (ISO).",
      number: "Please enter a valid number.",
      digits: "Please enter only digits.",
      equalTo: "Please enter the same value again.",
      maxlength: a.validator.format("Please enter no more than {0} characters."),
      minlength: a.validator.format("Please enter at least {0} characters."),
      rangelength: a.validator.format("Please enter a value between {0} and {1} characters long."),
      range: a.validator.format("Please enter a value between {0} and {1}."),
      max: a.validator.format("Please enter a value less than or equal to {0}."),
      min: a.validator.format("Please enter a value greater than or equal to {0}."),
      step: a.validator.format("Please enter a multiple of {0}.")
    },
    autoCreateRanges: !1,
    prototype: {
      init: function init() {
        function b(b) {
          !this.form && this.hasAttribute("contenteditable") && (this.form = a(this).closest("form")[0]);
          var c = a.data(this.form, "validator"),
              d = "on" + b.type.replace(/^validate/, ""),
              e = c.settings;
          e[d] && !a(this).is(e.ignore) && e[d].call(c, this, b);
        }

        this.labelContainer = a(this.settings.errorLabelContainer), this.errorContext = this.labelContainer.length && this.labelContainer || a(this.currentForm), this.containers = a(this.settings.errorContainer).add(this.settings.errorLabelContainer), this.submitted = {}, this.valueCache = {}, this.pendingRequest = 0, this.pending = {}, this.invalid = {}, this.reset();
        var c,
            d = this.groups = {};
        a.each(this.settings.groups, function (b, c) {
          "string" == typeof c && (c = c.split(/\s/)), a.each(c, function (a, c) {
            d[c] = b;
          });
        }), c = this.settings.rules, a.each(c, function (b, d) {
          c[b] = a.validator.normalizeRule(d);
        }), a(this.currentForm).on("focusin.validate focusout.validate keyup.validate", ":text, [type='password'], [type='file'], select, textarea, [type='number'], [type='search'], [type='tel'], [type='url'], [type='email'], [type='datetime'], [type='date'], [type='month'], [type='week'], [type='time'], [type='datetime-local'], [type='range'], [type='color'], [type='radio'], [type='checkbox'], [contenteditable]", b).on("click.validate", "select, option, [type='radio'], [type='checkbox']", b), this.settings.invalidHandler && a(this.currentForm).on("invalid-form.validate", this.settings.invalidHandler), a(this.currentForm).find("[required], [data-rule-required], .required").attr("aria-required", "true");
      },
      form: function form() {
        return this.checkForm(), a.extend(this.submitted, this.errorMap), this.invalid = a.extend({}, this.errorMap), this.valid() || a(this.currentForm).triggerHandler("invalid-form", [this]), this.showErrors(), this.valid();
      },
      checkForm: function checkForm() {
        this.prepareForm();

        for (var a = 0, b = this.currentElements = this.elements(); b[a]; a++) {
          this.check(b[a]);
        }

        return this.valid();
      },
      element: function element(b) {
        var c,
            d,
            e = this.clean(b),
            f = this.validationTargetFor(e),
            g = this,
            h = !0;
        return void 0 === f ? delete this.invalid[e.name] : (this.prepareElement(f), this.currentElements = a(f), d = this.groups[f.name], d && a.each(this.groups, function (a, b) {
          b === d && a !== f.name && (e = g.validationTargetFor(g.clean(g.findByName(a))), e && e.name in g.invalid && (g.currentElements.push(e), h = g.check(e) && h));
        }), c = this.check(f) !== !1, h = h && c, c ? this.invalid[f.name] = !1 : this.invalid[f.name] = !0, this.numberOfInvalids() || (this.toHide = this.toHide.add(this.containers)), this.showErrors(), a(b).attr("aria-invalid", !c)), h;
      },
      showErrors: function showErrors(b) {
        if (b) {
          var c = this;
          a.extend(this.errorMap, b), this.errorList = a.map(this.errorMap, function (a, b) {
            return {
              message: a,
              element: c.findByName(b)[0]
            };
          }), this.successList = a.grep(this.successList, function (a) {
            return !(a.name in b);
          });
        }

        this.settings.showErrors ? this.settings.showErrors.call(this, this.errorMap, this.errorList) : this.defaultShowErrors();
      },
      resetForm: function resetForm() {
        a.fn.resetForm && a(this.currentForm).resetForm(), this.invalid = {}, this.submitted = {}, this.prepareForm(), this.hideErrors();
        var b = this.elements().removeData("previousValue").removeAttr("aria-invalid");
        this.resetElements(b);
      },
      resetElements: function resetElements(a) {
        var b;
        if (this.settings.unhighlight) for (b = 0; a[b]; b++) {
          this.settings.unhighlight.call(this, a[b], this.settings.errorClass, ""), this.findByName(a[b].name).removeClass(this.settings.validClass);
        } else a.removeClass(this.settings.errorClass).removeClass(this.settings.validClass);
      },
      numberOfInvalids: function numberOfInvalids() {
        return this.objectLength(this.invalid);
      },
      objectLength: function objectLength(a) {
        var b,
            c = 0;

        for (b in a) {
          a[b] && c++;
        }

        return c;
      },
      hideErrors: function hideErrors() {
        this.hideThese(this.toHide);
      },
      hideThese: function hideThese(a) {
        a.not(this.containers).text(""), this.addWrapper(a).hide();
      },
      valid: function valid() {
        return 0 === this.size();
      },
      size: function size() {
        return this.errorList.length;
      },
      focusInvalid: function focusInvalid() {
        if (this.settings.focusInvalid) try {
          a(this.findLastActive() || this.errorList.length && this.errorList[0].element || []).filter(":visible").focus().trigger("focusin");
        } catch (a) {}
      },
      findLastActive: function findLastActive() {
        var b = this.lastActive;
        return b && 1 === a.grep(this.errorList, function (a) {
          return a.element.name === b.name;
        }).length && b;
      },
      elements: function elements() {
        var b = this,
            c = {};
        return a(this.currentForm).find("input, select, textarea, [contenteditable]").not(":submit, :reset, :image, :disabled").not(this.settings.ignore).filter(function () {
          var d = this.name || a(this).attr("name");
          return !d && b.settings.debug && window.console && console.error("%o has no name assigned", this), this.hasAttribute("contenteditable") && (this.form = a(this).closest("form")[0]), !(d in c || !b.objectLength(a(this).rules())) && (c[d] = !0, !0);
        });
      },
      clean: function clean(b) {
        return a(b)[0];
      },
      errors: function errors() {
        var b = this.settings.errorClass.split(" ").join(".");
        return a(this.settings.errorElement + "." + b, this.errorContext);
      },
      resetInternals: function resetInternals() {
        this.successList = [], this.errorList = [], this.errorMap = {}, this.toShow = a([]), this.toHide = a([]);
      },
      reset: function reset() {
        this.resetInternals(), this.currentElements = a([]);
      },
      prepareForm: function prepareForm() {
        this.reset(), this.toHide = this.errors().add(this.containers);
      },
      prepareElement: function prepareElement(a) {
        this.reset(), this.toHide = this.errorsFor(a);
      },
      elementValue: function elementValue(b) {
        var c,
            d,
            e = a(b),
            f = b.type;
        return "radio" === f || "checkbox" === f ? this.findByName(b.name).filter(":checked").val() : "number" === f && "undefined" != typeof b.validity ? b.validity.badInput ? "NaN" : e.val() : (c = b.hasAttribute("contenteditable") ? e.text() : e.val(), "file" === f ? "C:\\fakepath\\" === c.substr(0, 12) ? c.substr(12) : (d = c.lastIndexOf("/"), d >= 0 ? c.substr(d + 1) : (d = c.lastIndexOf("\\"), d >= 0 ? c.substr(d + 1) : c)) : "string" == typeof c ? c.replace(/\r/g, "") : c);
      },
      check: function check(b) {
        b = this.validationTargetFor(this.clean(b));
        var c,
            d,
            e,
            f = a(b).rules(),
            g = a.map(f, function (a, b) {
          return b;
        }).length,
            h = !1,
            i = this.elementValue(b);

        if ("function" == typeof f.normalizer) {
          if (i = f.normalizer.call(b, i), "string" != typeof i) throw new TypeError("The normalizer should return a string value.");
          delete f.normalizer;
        }

        for (d in f) {
          e = {
            method: d,
            parameters: f[d]
          };

          try {
            if (c = a.validator.methods[d].call(this, i, b, e.parameters), "dependency-mismatch" === c && 1 === g) {
              h = !0;
              continue;
            }

            if (h = !1, "pending" === c) return void (this.toHide = this.toHide.not(this.errorsFor(b)));
            if (!c) return this.formatAndAdd(b, e), !1;
          } catch (a) {
            throw this.settings.debug && window.console && console.log("Exception occurred when checking element " + b.id + ", check the '" + e.method + "' method.", a), a instanceof TypeError && (a.message += ".  Exception occurred when checking element " + b.id + ", check the '" + e.method + "' method."), a;
          }
        }

        if (!h) return this.objectLength(f) && this.successList.push(b), !0;
      },
      customDataMessage: function customDataMessage(b, c) {
        return a(b).data("msg" + c.charAt(0).toUpperCase() + c.substring(1).toLowerCase()) || a(b).data("msg");
      },
      customMessage: function customMessage(a, b) {
        var c = this.settings.messages[a];
        return c && (c.constructor === String ? c : c[b]);
      },
      findDefined: function findDefined() {
        for (var a = 0; a < arguments.length; a++) {
          if (void 0 !== arguments[a]) return arguments[a];
        }
      },
      defaultMessage: function defaultMessage(b, c) {
        "string" == typeof c && (c = {
          method: c
        });
        var d = this.findDefined(this.customMessage(b.name, c.method), this.customDataMessage(b, c.method), !this.settings.ignoreTitle && b.title || void 0, a.validator.messages[c.method], "<strong>Warning: No message defined for " + b.name + "</strong>"),
            e = /\$?\{(\d+)\}/g;
        return "function" == typeof d ? d = d.call(this, c.parameters, b) : e.test(d) && (d = a.validator.format(d.replace(e, "{$1}"), c.parameters)), d;
      },
      formatAndAdd: function formatAndAdd(a, b) {
        var c = this.defaultMessage(a, b);
        this.errorList.push({
          message: c,
          element: a,
          method: b.method
        }), this.errorMap[a.name] = c, this.submitted[a.name] = c;
      },
      addWrapper: function addWrapper(a) {
        return this.settings.wrapper && (a = a.add(a.parent(this.settings.wrapper))), a;
      },
      defaultShowErrors: function defaultShowErrors() {
        var a, b, c;

        for (a = 0; this.errorList[a]; a++) {
          c = this.errorList[a], this.settings.highlight && this.settings.highlight.call(this, c.element, this.settings.errorClass, this.settings.validClass), this.showLabel(c.element, c.message);
        }

        if (this.errorList.length && (this.toShow = this.toShow.add(this.containers)), this.settings.success) for (a = 0; this.successList[a]; a++) {
          this.showLabel(this.successList[a]);
        }
        if (this.settings.unhighlight) for (a = 0, b = this.validElements(); b[a]; a++) {
          this.settings.unhighlight.call(this, b[a], this.settings.errorClass, this.settings.validClass);
        }
        this.toHide = this.toHide.not(this.toShow), this.hideErrors(), this.addWrapper(this.toShow).show();
      },
      validElements: function validElements() {
        return this.currentElements.not(this.invalidElements());
      },
      invalidElements: function invalidElements() {
        return a(this.errorList).map(function () {
          return this.element;
        });
      },
      showLabel: function showLabel(b, c) {
        var d,
            e,
            f,
            g,
            h = this.errorsFor(b),
            i = this.idOrName(b),
            j = a(b).attr("aria-describedby");
        h.length ? (h.removeClass(this.settings.validClass).addClass(this.settings.errorClass), h.html(c)) : (h = a("<" + this.settings.errorElement + ">").attr("id", i + "-error").addClass(this.settings.errorClass).html(c || ""), d = h, this.settings.wrapper && (d = h.hide().show().wrap("<" + this.settings.wrapper + "/>").parent()), this.labelContainer.length ? this.labelContainer.append(d) : this.settings.errorPlacement ? this.settings.errorPlacement.call(this, d, a(b)) : d.insertAfter(b), h.is("label") ? h.attr("for", i) : 0 === h.parents("label[for='" + this.escapeCssMeta(i) + "']").length && (f = h.attr("id"), j ? j.match(new RegExp("\\b" + this.escapeCssMeta(f) + "\\b")) || (j += " " + f) : j = f, a(b).attr("aria-describedby", j), e = this.groups[b.name], e && (g = this, a.each(g.groups, function (b, c) {
          c === e && a("[name='" + g.escapeCssMeta(b) + "']", g.currentForm).attr("aria-describedby", h.attr("id"));
        })))), !c && this.settings.success && (h.text(""), "string" == typeof this.settings.success ? h.addClass(this.settings.success) : this.settings.success(h, b)), this.toShow = this.toShow.add(h);
      },
      errorsFor: function errorsFor(b) {
        var c = this.escapeCssMeta(this.idOrName(b)),
            d = a(b).attr("aria-describedby"),
            e = "label[for='" + c + "'], label[for='" + c + "'] *";
        return d && (e = e + ", #" + this.escapeCssMeta(d).replace(/\s+/g, ", #")), this.errors().filter(e);
      },
      escapeCssMeta: function escapeCssMeta(a) {
        return a.replace(/([\\!"#$%&'()*+,./:;<=>?@\[\]^`{|}~])/g, "\\$1");
      },
      idOrName: function idOrName(a) {
        return this.groups[a.name] || (this.checkable(a) ? a.name : a.id || a.name);
      },
      validationTargetFor: function validationTargetFor(b) {
        return this.checkable(b) && (b = this.findByName(b.name)), a(b).not(this.settings.ignore)[0];
      },
      checkable: function checkable(a) {
        return /radio|checkbox/i.test(a.type);
      },
      findByName: function findByName(b) {
        return a(this.currentForm).find("[name='" + this.escapeCssMeta(b) + "']");
      },
      getLength: function getLength(b, c) {
        switch (c.nodeName.toLowerCase()) {
          case "select":
            return a("option:selected", c).length;

          case "input":
            if (this.checkable(c)) return this.findByName(c.name).filter(":checked").length;
        }

        return b.length;
      },
      depend: function depend(a, b) {
        return !this.dependTypes[_typeof(a)] || this.dependTypes[_typeof(a)](a, b);
      },
      dependTypes: {
        "boolean": function boolean(a) {
          return a;
        },
        string: function string(b, c) {
          return !!a(b, c.form).length;
        },
        "function": function _function(a, b) {
          return a(b);
        }
      },
      optional: function optional(b) {
        var c = this.elementValue(b);
        return !a.validator.methods.required.call(this, c, b) && "dependency-mismatch";
      },
      startRequest: function startRequest(b) {
        this.pending[b.name] || (this.pendingRequest++, a(b).addClass(this.settings.pendingClass), this.pending[b.name] = !0);
      },
      stopRequest: function stopRequest(b, c) {
        this.pendingRequest--, this.pendingRequest < 0 && (this.pendingRequest = 0), delete this.pending[b.name], a(b).removeClass(this.settings.pendingClass), c && 0 === this.pendingRequest && this.formSubmitted && this.form() ? (a(this.currentForm).submit(), this.formSubmitted = !1) : !c && 0 === this.pendingRequest && this.formSubmitted && (a(this.currentForm).triggerHandler("invalid-form", [this]), this.formSubmitted = !1);
      },
      previousValue: function previousValue(b, c) {
        return c = "string" == typeof c && c || "remote", a.data(b, "previousValue") || a.data(b, "previousValue", {
          old: null,
          valid: !0,
          message: this.defaultMessage(b, {
            method: c
          })
        });
      },
      destroy: function destroy() {
        this.resetForm(), a(this.currentForm).off(".validate").removeData("validator").find(".validate-equalTo-blur").off(".validate-equalTo").removeClass("validate-equalTo-blur");
      }
    },
    classRuleSettings: {
      required: {
        required: !0
      },
      email: {
        email: !0
      },
      url: {
        url: !0
      },
      date: {
        date: !0
      },
      dateISO: {
        dateISO: !0
      },
      number: {
        number: !0
      },
      digits: {
        digits: !0
      },
      creditcard: {
        creditcard: !0
      }
    },
    addClassRules: function addClassRules(b, c) {
      b.constructor === String ? this.classRuleSettings[b] = c : a.extend(this.classRuleSettings, b);
    },
    classRules: function classRules(b) {
      var c = {},
          d = a(b).attr("class");
      return d && a.each(d.split(" "), function () {
        this in a.validator.classRuleSettings && a.extend(c, a.validator.classRuleSettings[this]);
      }), c;
    },
    normalizeAttributeRule: function normalizeAttributeRule(a, b, c, d) {
      /min|max|step/.test(c) && (null === b || /number|range|text/.test(b)) && (d = Number(d), isNaN(d) && (d = void 0)), d || 0 === d ? a[c] = d : b === c && "range" !== b && (a[c] = !0);
    },
    attributeRules: function attributeRules(b) {
      var c,
          d,
          e = {},
          f = a(b),
          g = b.getAttribute("type");

      for (c in a.validator.methods) {
        "required" === c ? (d = b.getAttribute(c), "" === d && (d = !0), d = !!d) : d = f.attr(c), this.normalizeAttributeRule(e, g, c, d);
      }

      return e.maxlength && /-1|2147483647|524288/.test(e.maxlength) && delete e.maxlength, e;
    },
    dataRules: function dataRules(b) {
      var c,
          d,
          e = {},
          f = a(b),
          g = b.getAttribute("type");

      for (c in a.validator.methods) {
        d = f.data("rule" + c.charAt(0).toUpperCase() + c.substring(1).toLowerCase()), this.normalizeAttributeRule(e, g, c, d);
      }

      return e;
    },
    staticRules: function staticRules(b) {
      var c = {},
          d = a.data(b.form, "validator");
      return d.settings.rules && (c = a.validator.normalizeRule(d.settings.rules[b.name]) || {}), c;
    },
    normalizeRules: function normalizeRules(b, c) {
      return a.each(b, function (d, e) {
        if (e === !1) return void delete b[d];

        if (e.param || e.depends) {
          var f = !0;

          switch (_typeof(e.depends)) {
            case "string":
              f = !!a(e.depends, c.form).length;
              break;

            case "function":
              f = e.depends.call(c, c);
          }

          f ? b[d] = void 0 === e.param || e.param : (a.data(c.form, "validator").resetElements(a(c)), delete b[d]);
        }
      }), a.each(b, function (d, e) {
        b[d] = a.isFunction(e) && "normalizer" !== d ? e(c) : e;
      }), a.each(["minlength", "maxlength"], function () {
        b[this] && (b[this] = Number(b[this]));
      }), a.each(["rangelength", "range"], function () {
        var c;
        b[this] && (a.isArray(b[this]) ? b[this] = [Number(b[this][0]), Number(b[this][1])] : "string" == typeof b[this] && (c = b[this].replace(/[\[\]]/g, "").split(/[\s,]+/), b[this] = [Number(c[0]), Number(c[1])]));
      }), a.validator.autoCreateRanges && (null != b.min && null != b.max && (b.range = [b.min, b.max], delete b.min, delete b.max), null != b.minlength && null != b.maxlength && (b.rangelength = [b.minlength, b.maxlength], delete b.minlength, delete b.maxlength)), b;
    },
    normalizeRule: function normalizeRule(b) {
      if ("string" == typeof b) {
        var c = {};
        a.each(b.split(/\s/), function () {
          c[this] = !0;
        }), b = c;
      }

      return b;
    },
    addMethod: function addMethod(b, c, d) {
      a.validator.methods[b] = c, a.validator.messages[b] = void 0 !== d ? d : a.validator.messages[b], c.length < 3 && a.validator.addClassRules(b, a.validator.normalizeRule(b));
    },
    methods: {
      required: function required(b, c, d) {
        if (!this.depend(d, c)) return "dependency-mismatch";

        if ("select" === c.nodeName.toLowerCase()) {
          var e = a(c).val();
          return e && e.length > 0;
        }

        return this.checkable(c) ? this.getLength(b, c) > 0 : b.length > 0;
      },
      email: function email(a, b) {
        return this.optional(b) || /^[a-zA-Z0-9.!#$%&'*+\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/.test(a);
      },
      url: function url(a, b) {
        return this.optional(b) || /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(a);
      },
      date: function date(a, b) {
        return this.optional(b) || !/Invalid|NaN/.test(new Date(a).toString());
      },
      dateISO: function dateISO(a, b) {
        return this.optional(b) || /^\d{4}[\/\-](0?[1-9]|1[012])[\/\-](0?[1-9]|[12][0-9]|3[01])$/.test(a);
      },
      number: function number(a, b) {
        return this.optional(b) || /^(?:-?\d+|-?\d{1,3}(?:,\d{3})+)?(?:\.\d+)?$/.test(a);
      },
      digits: function digits(a, b) {
        return this.optional(b) || /^\d+$/.test(a);
      },
      minlength: function minlength(b, c, d) {
        var e = a.isArray(b) ? b.length : this.getLength(b, c);
        return this.optional(c) || e >= d;
      },
      maxlength: function maxlength(b, c, d) {
        var e = a.isArray(b) ? b.length : this.getLength(b, c);
        return this.optional(c) || e <= d;
      },
      rangelength: function rangelength(b, c, d) {
        var e = a.isArray(b) ? b.length : this.getLength(b, c);
        return this.optional(c) || e >= d[0] && e <= d[1];
      },
      min: function min(a, b, c) {
        return this.optional(b) || a >= c;
      },
      max: function max(a, b, c) {
        return this.optional(b) || a <= c;
      },
      range: function range(a, b, c) {
        return this.optional(b) || a >= c[0] && a <= c[1];
      },
      step: function step(b, c, d) {
        var e,
            f = a(c).attr("type"),
            g = "Step attribute on input type " + f + " is not supported.",
            h = ["text", "number", "range"],
            i = new RegExp("\\b" + f + "\\b"),
            j = f && !i.test(h.join()),
            k = function k(a) {
          var b = ("" + a).match(/(?:\.(\d+))?$/);
          return b && b[1] ? b[1].length : 0;
        },
            l = function l(a) {
          return Math.round(a * Math.pow(10, e));
        },
            m = !0;

        if (j) throw new Error(g);
        return e = k(d), (k(b) > e || l(b) % l(d) !== 0) && (m = !1), this.optional(c) || m;
      },
      equalTo: function equalTo(b, c, d) {
        var e = a(d);
        return this.settings.onfocusout && e.not(".validate-equalTo-blur").length && e.addClass("validate-equalTo-blur").on("blur.validate-equalTo", function () {
          a(c).valid();
        }), b === e.val();
      },
      remote: function remote(b, c, d, e) {
        if (this.optional(c)) return "dependency-mismatch";
        e = "string" == typeof e && e || "remote";
        var f,
            g,
            h,
            i = this.previousValue(c, e);
        return this.settings.messages[c.name] || (this.settings.messages[c.name] = {}), i.originalMessage = i.originalMessage || this.settings.messages[c.name][e], this.settings.messages[c.name][e] = i.message, d = "string" == typeof d && {
          url: d
        } || d, h = a.param(a.extend({
          data: b
        }, d.data)), i.old === h ? i.valid : (i.old = h, f = this, this.startRequest(c), g = {}, g[c.name] = b, a.ajax(a.extend(!0, {
          mode: "abort",
          port: "validate" + c.name,
          dataType: "json",
          data: g,
          context: f.currentForm,
          success: function success(a) {
            var d,
                g,
                h,
                j = a === !0 || "true" === a;
            f.settings.messages[c.name][e] = i.originalMessage, j ? (h = f.formSubmitted, f.resetInternals(), f.toHide = f.errorsFor(c), f.formSubmitted = h, f.successList.push(c), f.invalid[c.name] = !1, f.showErrors()) : (d = {}, g = a || f.defaultMessage(c, {
              method: e,
              parameters: b
            }), d[c.name] = i.message = g, f.invalid[c.name] = !0, f.showErrors(d)), i.valid = j, f.stopRequest(c, j);
          }
        }, d)), "pending");
      }
    }
  });
  var b,
      c = {};
  a.ajaxPrefilter ? a.ajaxPrefilter(function (a, b, d) {
    var e = a.port;
    "abort" === a.mode && (c[e] && c[e].abort(), c[e] = d);
  }) : (b = a.ajax, a.ajax = function (d) {
    var e = ("mode" in d ? d : a.ajaxSettings).mode,
        f = ("port" in d ? d : a.ajaxSettings).port;
    return "abort" === e ? (c[f] && c[f].abort(), c[f] = b.apply(this, arguments), c[f]) : b.apply(this, arguments);
  });
});

/***/ }),

/***/ "./src/arquivos/js/lib/smartResearch.js":
/*!**********************************************!*\
  !*** ./src/arquivos/js/lib/smartResearch.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

(function (document, window, $) {
  /**
  *	Pesquisa Inteligente
  *	@description Execurar buscas sem recarregar a página
  *	@author Carlos Vinicius
  *	@contributor Edson Domingos Júnior
  *	@contributor Davi Guimarães
  *	@version 3.11
  *	@date 2018-09-12
  */
  "function" !== typeof String.prototype.replaceSpecialChars && (String.prototype.replaceSpecialChars = function () {
    var b = {
      "\xE7": "c",
      "\xE6": "ae",
      "\u0153": "oe",
      "\xE1": "a",
      "\xE9": "e",
      "\xED": "i",
      "\xF3": "o",
      "\xFA": "u",
      "\xE0": "a",
      "\xE8": "e",
      "\xEC": "i",
      "\xF2": "o",
      "\xF9": "u",
      "\xE4": "a",
      "\xEB": "e",
      "\xEF": "i",
      "\xF6": "o",
      "\xFC": "u",
      "\xFF": "y",
      "\xE2": "a",
      "\xEA": "e",
      "\xEE": "i",
      "\xF4": "o",
      "\xFB": "u",
      "\xE5": "a",
      "\xE3": "a",
      "\xF8": "o",
      "\xF5": "o",
      u: "u",
      "\xC1": "A",
      "\xC9": "E",
      "\xCD": "I",
      "\xD3": "O",
      "\xDA": "U",
      "\xCA": "E",
      "\xD4": "O",
      "\xDC": "U",
      "\xC3": "A",
      "\xD5": "O",
      "\xC0": "A",
      "\xC7": "C"
    };
    return this.replace(/[\u00e0-\u00fa]/g, function (a) {
      return "undefined" != typeof b[a] ? b[a] : a;
    });
  });
  "function" !== typeof String.prototype.trim && (String.prototype.trim = function () {
    return this.replace(/^\s+|\s+$/g, "");
  });

  jQuery.fn.vtexSmartResearch = function (opts) {
    var $this = jQuery(this);

    var log = function log(msg, type) {
      if ((typeof console === "undefined" ? "undefined" : _typeof(console)) == "object") console.log("[Smart Research - " + (type || "Erro") + "] " + msg);
    };

    var defaults = {
      pageLimit: null,
      // Número máximo de páginas que o script irá retornar. Exemplo "pageLimit=3" só será retornado resultados até a terceira página
      loadContent: ".prateleira[id^=ResultItems]",
      // Elemento que esta em volta da(s) prateleira(s) de produtos.
      shelfClass: ".prateleira",
      // Pratelira de produtos (filha do elemento definido de um "loadContent")
      filtersMenu: ".search-multiple-navigator",
      // Menu com os filtros
      linksMenu: ".search-single-navigator",
      // Menu de links
      menuDepartament: ".navigation .menu-departamento",
      // seletor do menu da página de departamentos
      mergeMenu: true,
      // Define se o menu de links será mesclado com o de filtros será mesclado na página de departamento
      insertMenuAfter: ".search-multiple-navigator h3:first",
      // O menu de links será inserido após este elemento
      emptySearchElem: jQuery('<div class="vtexsr-emptySearch"></div>'),
      // Elemento Html (em Objeto jQuery) no qual será adicionado a mensagem de busca vazia
      elemLoading: '<div id="scrollLoading">Carregando ... </div>',
      // Elemento com mensagem de carregando ao iniciar a requisição da página seguinte
      returnTopText: '<span class="text">voltar ao</span><span class="text2">TOPO</span>',
      // Mensagem de "retornar ao topo"
      emptySearchMsg: '<h3>Esta combinação de filtros não retornou nenhum resultado!</h3>',
      // Html com a mensagem para ser apresentada quando não existirem resultados para os filtros selecionados
      alertFilterErro: true,
      // exibe aler casso haja erro algum erro de servidor ao aplicar os filtros
      filterErrorMsg: "Houve um erro ao tentar filtrar a página!",
      // Mensagem de erro exibida quando existe algum erro de servidor ao aplicar os filtros
      searchUrl: null,
      // Url da página de busca (opicional)
      usePopup: false,
      // Opção p/ definir se deseja que a mensagem de não localizado seja exibida em um popup
      showLinks: true,
      // Exibe o menu de links caso o de filtro não seja encontrado
      popupAutoCloseSeconds: 3,
      // Caso esteja utilizando popup, defina aqui o tempo para que ele feche automaticamente
      filterOnChange: true,
      // Permite que o filtro seja aplicado assim que a opção é marcada
      filterButtonClass: ".filter-btn",
      // Classe do botão que terá a ação de filtro caso a "filterOnChange" seja false
      clearButtonClass: ".clear-filter-btn",
      // Classe para o botão que limpa todos os filtros
      infinitScroll: true,
      // Permite que o filtro seja aplicado assim que a opção é marcada
      loadMoreText: "Carregar mais",
      // Permite que o filtro seja aplicado assim que a opção é marcada
      // Função que retorna o valor p/ onde a página deve rolar quando o usuário marca ou desmarca um filtro
      filterScrollTop: function filterScrollTop(shelfOffset) {
        return shelfOffset.top - 20;
      },
      callback: function callback() {},
      // Cálculo do tamanho do conteúdo/vitrine para que uma nova página seja chamada antes do usuário chegar ao "final" do site
      getShelfHeight: function getShelfHeight(container) {
        return container.scrollTop() + container.height();
      },
      // Callback após inserir a prateleira na página
      shelfCallback: function shelfCallback() {},
      // Callback em cada requisição Ajax (Para requisições feitas com sucesso)
      // Recebe como parâmetro um objeto contendo a quantidade total de requisições feitas e a quantidade de filtros selecionados
      ajaxCallback: function ajaxCallback() {},
      // Função que é executada quando a seleção de filtros não retorna nenhum resultado
      // Recebe como parâmetro um objeto contendo a quantidade total de requisições feitas e a quantidade de filtros selecionados
      emptySearchCallback: function emptySearchCallback() {},
      // Função para permitir ou não que a rolagem infinita execute na página esta deve retornar "true" ou "false"
      // Recebe como parâmetro um objeto contendo a quantidade total de requisições feitas e a quantidade de filtros selecionados
      authorizeScroll: function authorizeScroll() {
        return true;
      },
      // Função para permitir ou não que o conteúdo de "loadContent" seja atualizado. Esta deve retornar "true" ou "false"
      // Recebe como parâmetro um objeto contendo a quantidade total de requisições feitas e a quantidade de filtros selecionados
      authorizeUpdate: function authorizeUpdate() {
        return true;
      },
      // Callback de cada laço percorrendo os fildsets e os labels. Retorna um objeto com algumas informações
      labelCallback: function labelCallback(data) {}
    };

    var options = jQuery.extend(defaults, opts),
        _console = "object" === (typeof console === "undefined" ? "undefined" : _typeof(console)),
        $empty = jQuery(""),
        elemLoading = jQuery(options.elemLoading),
        currentPage = 2,
        moreResults = true,
        _window = jQuery(window),
        _document = jQuery(document),
        _html = jQuery("html,body"),
        body = jQuery("body"),
        currentSearchUrl = "",
        urlFilters = "",
        searchUrl = "",
        animatingFilter = false,
        loadContentE = jQuery(options.loadContent),
        filtersMenuE = jQuery(options.filtersMenu),
        ajaxCallbackObj = {
      requests: 0,
      filters: 0,
      isEmpty: false
    },
        labelCallbackData = {};

    var fn = {
      getUrl: function getUrl(scroll) {
        var s = scroll || false;
        if (s) return currentSearchUrl.replace(/PageNumber=[0-9]*/, "PageNumber=" + currentPage);else return (searchUrl + urlFilters).replace(/PageNumber=[0-9]*/, "PageNumber=" + pageNumber);
      },
      getSearchUrl: function getSearchUrl() {
        var url, content, preg;
        jQuery("script:not([src])").each(function () {
          content = jQuery(this)[0].innerHTML;
          preg = /\/buscapagina\?.+&PageNumber=/i;

          if (content.search(/\/buscapagina\?/i) > -1) {
            url = preg.exec(content);
            return false;
          }
        });
        if (typeof url !== "undefined" && typeof url[0] !== "undefined") return url[0];else {
          log("Não foi possível localizar a url de busca da página.\n Tente adicionar o .js ao final da página. \n[Método: getSearchUrl]");
          return "";
        }
      },
      scrollToTop: function scrollToTop() {
        var elem = body.find("#returnToTop");

        if (elem.length < 1) {
          elem = jQuery('<div id="returnToTop"><a href="#">' + options.returnTopText + '<span class="arrowToTop"></span></a></div>');
          body.append(elem);
        }

        var windowH = _window.height();

        _window.bind("resize", function () {
          windowH = _window.height();
        });

        _window.bind("scroll", function () {
          if (_window.scrollTop() > windowH) elem.stop(true).fadeTo(300, 1, function () {
            elem.show();
          });else elem.stop(true).fadeTo(300, 0, function () {
            elem.hide();
          });
        });

        elem.bind("click", function () {
          _html.animate({
            scrollTop: 0
          }, "slow");

          return false;
        });
      },
      infinitScroll: function infinitScroll(paginador) {
        _window.on('scroll', function () {
          var _this = jQuery(this);

          if (paginador.isDisponivelParaNovaBusca() && options.authorizeScroll(ajaxCallbackObj)) {
            if (_this.scrollTop() + _this.height() >= options.getShelfHeight(loadContentE)) {
              paginador.proxima();
            }
          } else return false;
        });
      },
      loadMore: function loadMore(paginador) {
        var totalItens = $('.searchResultsTime:first-of-type .resultado-busca-numero .value').text();

        if (loadContentE.find('li[layout]').length != parseInt(totalItens)) {
          var $loadMore = $('<div />', {
            "class": 'load-more'
          }).insertAfter(loadContentE);
          var btn = $('<button />', {
            "class": "btn",
            text: options.loadMoreText
          }).appendTo($loadMore);
          btn.click(function () {
            if (paginador.isDisponivelParaNovaBusca()) {
              paginador.proxima();
            }
          });
          $(window).on('vsr-request-init', function () {
            btn.prop('disabled', true).addClass('loading');

            if (!btn.is(':visible') && moreResults) {
              btn.fadeIn();
            }
          });
          $(window).on('vsr-contagem-produtos', function (event, data) {
            var contagemTotal = parseInt(data);
            var totalDeItensNaPagina = loadContentE.find('li[layout]').length;

            if (totalDeItensNaPagina >= contagemTotal) {
              btn.fadeOut();
            }
          });
          $(window).on('vsr-no-more-results', function () {
            btn.fadeOut();
          });
          $(window).on('vsr-more-results', function () {
            btn.fadeIn();
          });
          $(window).on('vsr-request-init', function () {
            btn.prop('disabled', false).removeClass('loading');
          });
        }
      },
      triggerEvent: function triggerEvent(nameEvent, elemento, data) {
        if (undefined == nameEvent) return;
        elemento = elemento || filtersMenuE;
        $(elemento).trigger(nameEvent, data);
      }
    };

    var paginas = function paginas() {
      var currentStatus = true;
      var numeroEsperadoItens;

      function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
      }

      numeroEsperadoItens = parseInt(getParameterByName('cc', fn.getSearchUrl()));
      $(window).on('vsr-no-more-results', function () {
        moreResults = false;
      });
      $(window).on('vsr-more-results', function () {
        moreResults = true;
      });
      var paginador = {
        "isDisponivelParaNovaBusca": function isDisponivelParaNovaBusca() {
          var disponivel = !animatingFilter && currentPage <= paginador.getTotalPaginas() && moreResults;
          return disponivel;
        },
        "getTotalPaginas": function getTotalPaginas() {
          var idElementoPaginacao, idPaginacao;

          if (null !== options.pageLimit) {
            return options.pageLimit;
          }

          idElementoPaginacao = body.find(".pager:first").attr("id");
          idPaginacao = (idElementoPaginacao || "").split("_").pop();
          var totalPaginas = window["pagecount_" + idPaginacao];
          if ("undefined" === typeof totalPaginas) totalPaginas = 99999999;
          return totalPaginas;
        },
        "proxima": function proxima() {
          if (!currentStatus) return null;
          var currentItems = loadContentE.find(options.shelfClass).filter(":last");
          currentItems.after(elemLoading);
          currentStatus = false;
          fn.triggerEvent('vsr-request-init', loadContentE);
          pageJqxhr = jQuery.ajax({
            url: fn.getUrl(true),
            success: function success(data) {
              var contagemItens = $(data).find('li[layout]').length;
              if (contagemItens > 0) currentItems.after(data);

              if (contagemItens > 0 && contagemItens == numeroEsperadoItens) {
                fn.triggerEvent('vsr-more-results', _window);
              } else {
                fn.triggerEvent('vsr-no-more-results', _window);
              }

              currentStatus = true;
              elemLoading.remove();
              ajaxCallbackObj.requests++;
              options.ajaxCallback(ajaxCallbackObj);
              fn.triggerEvent('vsr-ajax-sucess');
            },
            complete: function complete() {
              fn.triggerEvent('vsr-request-end', loadContentE);
            }
          });
          currentPage++;
        }
      };
      return paginador;
    };

    var paginador = paginas();
    if (null !== options.searchUrl) currentSearchUrl = searchUrl = options.searchUrl;else currentSearchUrl = searchUrl = fn.getSearchUrl(); // Reporting Errors

    if ($this.length < 1) {
      log("Nenhuma opção de filtro encontrada", "Aviso");
      if (options.showLinks) jQuery(options.linksMenu).css("visibility", "visible").show();

      if (options.infinitScroll) {
        fn.infinitScroll(paginador);
      } else {
        fn.loadMore(paginador);
      }

      fn.scrollToTop();
      return $this;
    } // Reporting Errors


    if (loadContentE.length < 1) {
      log("Elemento para destino da requisição não foi encontrado \n (" + loadContentE.selector + ")");
      return false;
    }

    if (filtersMenuE.length < 1) {
      log("O menu de filtros não foi encontrado \n (" + filtersMenuE.selector + ")");
    }

    var currentUrl = document.location.href,
        linksMenuE = jQuery(options.linksMenu),
        prodOverlay = jQuery('<div class="vtexSr-overlay"></div>'),
        departamentE = jQuery(options.menuDepartament),
        loadContentOffset = loadContentE.offset(),
        pageNumber = 1,
        shelfJqxhr = null,
        pageJqxhr = null;
    options.emptySearchElem.append(options.emptySearchMsg);
    loadContentE.before(prodOverlay);
    var fns = {
      exec: function exec() {
        fns.setFilterMenu();
        fns.fieldsetFormat();
        $this.each(function () {
          var _this = jQuery(this),
              label = _this.parent();

          if (_this.is(":checked")) {
            urlFilters += "&" + (_this.attr("rel") || ""); // Adicionando classe ao label

            label.addClass("sr_selected");
          }

          fns.adjustText(_this); // Add span vazio (depois de executar de "adjustText")

          label.append('<span class="sr_box"></span><span class="sr_box2"></span>');

          _this.bind("change", function () {
            fns.inputAction();

            if (_this.is(":checked")) {
              fns.addFilter(_this);
            } else {
              fns.removeFilter(_this);
            }

            if (options.filterOnChange) {
              ajaxCallbackObj.filters = $this.filter(":checked").length;
            }
          });
        });
        jQuery(options.filterButtonClass).on('click', function () {
          fns.applyFilter();
        });
        jQuery(options.clearButtonClass).on('click', function (e) {
          fns.removeAllFilters(e, this);
        });
        if ("" !== urlFilters) fns.addFilter($empty);
        fns.contadorDeProdutos();
        fns.atualizarPaginador();
        fn.triggerEvent('vsr-complete');
        fns.starRefresh();
      },
      mergeMenu: function mergeMenu() {
        if (!options.mergeMenu) return false;
        var elem = departamentE;
        elem.insertAfter(options.insertMenuAfter);
        fns.departamentMenuFormat(elem);
      },
      mergeMenuList: function mergeMenuList() {
        var i = 0;
        filtersMenuE.find("h3,h4").each(function () {
          var ul = linksMenuE.find("h3,h4").eq(i).next("ul");
          ul.insertAfter(jQuery(this));
          fns.departamentMenuFormat(ul);
          i++;
        });
      },
      departamentMenuFormat: function departamentMenuFormat(elem) {
        elem.find("a").each(function () {
          var a = jQuery(this);
          a.text(fns.removeCounter(a.text()));
        });
      },
      fieldsetFormat: function fieldsetFormat() {
        labelCallbackData.fieldsetCount = 0;
        labelCallbackData.tmpCurrentLabel = {};
        filtersMenuE.find("fieldset").each(function () {
          var $t = jQuery(this),
              label = $t.find("label"),
              fieldsetClass = "filtro_" + ($t.find("h5:first").text() || "").toLowerCase().replaceSpecialChars().replace(/\s/g, "-");
          labelCallbackData[fieldsetClass] = {}; // Ocultar fieldset quando não existe filtro e sair desste método

          if (label.length < 1) {
            $t.hide();
            return;
          } // Adicionar classe ao fieldset


          $t.addClass(fieldsetClass); // Adicionando classe e título ao label

          label.each(function (ndx) {
            var t = jQuery(this),
                v = t.find("input").val() || "",
                labelClass = "sr_" + v.toLowerCase().replaceSpecialChars().replace(/\s/g, "-");
            labelCallbackData.tmpCurrentLabel = {
              fieldsetParent: [$t, fieldsetClass],
              elem: t
            };
            labelCallbackData[fieldsetClass][ndx.toString()] = {
              className: labelClass,
              title: v
            };
            t.addClass(labelClass).attr({
              "title": v,
              "index": ndx
            });
            options.labelCallback(labelCallbackData);
          });
          labelCallbackData.fieldsetCount++;
        });
      },
      inputAction: function inputAction() {
        if (null !== pageJqxhr) pageJqxhr.abort();
        if (null !== shelfJqxhr) shelfJqxhr.abort();
        currentPage = 2;
        moreResults = true;
      },
      applyFilter: function applyFilter() {
        currentSearchUrl = fn.getUrl();
        fn.triggerEvent('vsr-request-init', loadContentE, currentSearchUrl);
        shelfJqxhr = jQuery.ajax({
          url: currentSearchUrl,
          success: fns.filterAjaxSuccess,
          error: fns.filterAjaxError,
          complete: function complete() {
            fn.triggerEvent('vsr-request-end', loadContentE);
          }
        });
      },
      addFilter: function addFilter(input) {
        urlFilters += "&" + (input.attr("rel") || "");
        currentSearchUrl = fn.getUrl();

        if (options.filterOnChange) {
          prodOverlay.fadeTo(300, 0.6);
          fns.applyFilter();
          fn.triggerEvent('vsr-add-filter');
        } // Adicionando classe ao label


        input.parent().addClass("sr_selected");
      },
      removeAllFilters: function removeAllFilters(evt, obj) {
        urlFilters = "";
        $('input:checked').prop('checked', false).parent().removeClass("sr_selected");
        fns.applyFilter();
        fn.triggerEvent('vsr-clean-all-filter');
      },
      removeFilter: function removeFilter(input) {
        var url = input.attr("rel") || "";
        if (url !== "") urlFilters = urlFilters.replace("&" + url, "");

        if (options.filterOnChange) {
          prodOverlay.fadeTo(300, 0.6);
          fns.applyFilter();
          fn.triggerEvent('vsr-remove-filter');
        } // Removendo classe do label


        input.parent().removeClass("sr_selected");
      },
      filterAjaxSuccess: function filterAjaxSuccess(data) {
        var $data = jQuery(data);
        prodOverlay.fadeTo(300, 0, function () {
          jQuery(this).hide();
        });
        fns.updateContent($data);
        ajaxCallbackObj.requests++;
        options.ajaxCallback(ajaxCallbackObj);

        _html.animate({
          scrollTop: options.filterScrollTop(loadContentOffset || {
            top: 0,
            left: 0
          })
        }, 600);

        fn.triggerEvent('vsr-ajax-sucess');
      },
      filterAjaxError: function filterAjaxError() {
        prodOverlay.fadeTo(300, 0, function () {
          jQuery(this).hide();
        });

        if (options.alertFilterErro) {
          alert(options.filterErrorMsg);
        }

        log("Houve um erro ao tentar fazer a requisição da página com filtros.");
        fn.triggerEvent('vsr-ajax-fail');
      },
      updateContent: function updateContent($data) {
        animatingFilter = true;
        if (!options.authorizeUpdate(ajaxCallbackObj)) return false;
        var shelf = $data.filter(options.shelfClass);
        var shelfPage = loadContentE.find(options.shelfClass);
        (shelfPage.length > 0 ? shelfPage : options.emptySearchElem).slideUp(600, function () {
          jQuery(this).remove(); // Removendo a mensagem de busca vazia, esta remoção "forçada" foi feita para
          // corrigir um bug encontrado ao clicar em vários filtros

          if (options.usePopup) body.find(".boxPopUp2").vtexPopUp2();else options.emptySearchElem.remove();

          if (shelf.length > 0) {
            shelf.hide();
            loadContentE.append(shelf);
            options.shelfCallback();
            shelf.slideDown(600, function () {
              animatingFilter = false;
            });
            ajaxCallbackObj.isEmpty = false;
          } else {
            ajaxCallbackObj.isEmpty = true;
            if (options.usePopup) options.emptySearchElem.addClass("freeContent autoClose ac_" + options.popupAutoCloseSeconds).vtexPopUp2().stop(true).show();else {
              loadContentE.append(options.emptySearchElem);
              options.emptySearchElem.show().css("height", "auto").fadeTo(300, 0.2, function () {
                options.emptySearchElem.fadeTo(300, 1);
              });
            }
            options.emptySearchCallback(ajaxCallbackObj);
          }
        });
      },
      adjustText: function adjustText(input) {
        var label = input.parent(),
            text = label.text();
        text = fns.removeCounter(text);
        label.text(text).prepend(input);
      },
      removeCounter: function removeCounter(text) {
        return text.replace(/\([0-9]+\)/ig, function (a) {
          return "";
        });
      },
      setFilterMenu: function setFilterMenu() {
        if (filtersMenuE.length > 0) {
          linksMenuE.hide();
          filtersMenuE.show();
        }
      },
      atualizarPaginador: function atualizarPaginador() {
        $(window).on('vsr-contagem-produtos', function (event, data) {
          var contagemTotal = parseInt(data);
          var totalDeItensNaPagina = loadContentE.find('li[layout]').length;

          if (totalDeItensNaPagina >= contagemTotal) {
            fn.triggerEvent('vsr-no-more-results', _window);
          } else {
            fn.triggerEvent('vsr-more-results', _window);
          }
        });
      },
      contadorDeProdutos: function contadorDeProdutos() {
        $(window).on('vsr-request-init', function (event, data) {
          $(window).one('vsr-request-end', function (event, data) {
            var urlFiltro = currentSearchUrl.replace('/buscapagina', '');
            var urlAtual = '/api/catalog_system/pub/products/search' + urlFiltro;

            if (urlAtual.indexOf('?') !== -1) {
              urlAtual = urlAtual + '&_from=1&_to=1';
            } else {
              urlAtual = urlAtual + '?_from=1&_to=1';
            }

            $.get(urlAtual).done(function (data, status, jqXHR) {
              var numeroDeRecursos = jqXHR.getResponseHeader('resources');
              var aux = numeroDeRecursos.split('/');
              var totalDeItens = 0;

              if (aux.length > 1) {
                totalDeItens = aux[1];
              }

              setTimeout(function () {
                fn.triggerEvent('vsr-contagem-produtos', loadContentE, totalDeItens);
              }, 200);
            }).fail(); // fn.triggerEvent('vsr-refresh-stars', _window);

            setTimeout(function () {
              $('body').trigger("refresh-stars");
            }, 1000);
          });
        });
      },
      starRefresh: function starRefresh() {
        setTimeout(function () {
          $('body').trigger("refresh-stars");
        }, 1000);
      }
    };
    if (body.hasClass("departamento")) fns.mergeMenu();else if (body.hasClass("categoria") || body.hasClass("resultado-busca")) fns.mergeMenuList();
    fns.exec();

    if (options.infinitScroll) {
      fn.infinitScroll(paginador);
    } else {
      fn.loadMore(paginador);
    }

    fn.scrollToTop();
    options.callback(); // Exibindo o menu

    filtersMenuE.css("visibility", "visible");
  };
})(document, window, jQuery);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! jquery */ "jquery")))

/***/ }),

/***/ "./src/arquivos/js/main.js":
/*!*********************************!*\
  !*** ./src/arquivos/js/main.js ***!
  \*********************************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! regenerator-runtime/runtime.js */ "./node_modules/regenerator-runtime/runtime.js");
/* harmony import */ var regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(regenerator_runtime_runtime_js__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var lazysizes__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lazysizes */ "./node_modules/lazysizes/lazysizes.js");
/* harmony import */ var lazysizes__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lazysizes__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var lazysizes_plugins_noscript_ls_noscript__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lazysizes/plugins/noscript/ls.noscript */ "./node_modules/lazysizes/plugins/noscript/ls.noscript.js");
/* harmony import */ var lazysizes_plugins_noscript_ls_noscript__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(lazysizes_plugins_noscript_ls_noscript__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! slick-carousel */ "./node_modules/slick-carousel/slick/slick.js");
/* harmony import */ var slick_carousel__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(slick_carousel__WEBPACK_IMPORTED_MODULE_3__);
/* harmony import */ var _app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./app */ "./src/arquivos/js/app/index.js");





window.lazySizesConfig = {
  addClasses: true
};
_app__WEBPACK_IMPORTED_MODULE_4__["default"].start();

/***/ }),

/***/ "jquery":
/*!*************************!*\
  !*** external "jQuery" ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = jQuery;

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,